-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    x_ap_vld : IN STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2019_1_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.918000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=33,HLS_SYN_FF=557,HLS_SYN_LUT=699,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x_ap_vld_preg : STD_LOGIC := '0';
    signal x_ap_vld_in_sig : STD_LOGIC;
    signal shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln74_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln74_2_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_2_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_5_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_5_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln74_4_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_4_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_1_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_1_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_1_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_2_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_3_fu_255_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_4_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_4_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_3_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_4_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_1_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_2_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_5_fu_299_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_6_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_7_fu_331_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_7_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_6_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_7_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_8_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_9_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_10_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_10_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_9_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_10_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_6_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_8_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_7_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_5_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_8_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_3_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_ap_vld_preg <= ap_const_logic_0;
            else
                if (((x_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    x_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_ap_vld = ap_const_logic_1))) then 
                    x_ap_vld_preg <= x_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_ap_vld = ap_const_logic_1))) then 
                    x_preg <= x;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln74_2_reg_455 <= add_ln74_2_fu_283_p2;
                shift_reg_6 <= shift_reg_5;
                shift_reg_7 <= shift_reg_6;
                shift_reg_8 <= shift_reg_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln74_4_reg_480 <= add_ln74_4_fu_337_p2;
                mul_ln74_5_reg_470 <= mul_ln74_5_fu_299_p2;
                shift_reg_3 <= shift_reg_2;
                shift_reg_4 <= shift_reg_3;
                shift_reg_5 <= shift_reg_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln74_reg_435 <= add_ln74_fu_223_p2;
                shift_reg_9 <= shift_reg_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_189 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_193 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((x_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                shift_reg_0 <= x_in_sig;
                shift_reg_1 <= shift_reg_0;
                shift_reg_2 <= shift_reg_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, x_ap_vld_in_sig, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((x_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln74_1_fu_277_p2 <= std_logic_vector(unsigned(mul_ln74_3_fu_255_p2) + unsigned(mul_ln74_4_fu_271_p2));
    add_ln74_2_fu_283_p2 <= std_logic_vector(unsigned(add_ln74_1_fu_277_p2) + unsigned(mul_ln74_2_fu_239_p2));
    add_ln74_3_fu_387_p2 <= std_logic_vector(unsigned(add_ln74_2_reg_455) + unsigned(add_ln74_reg_435));
    add_ln74_4_fu_337_p2 <= std_logic_vector(unsigned(mul_ln74_6_fu_315_p2) + unsigned(mul_ln74_7_fu_331_p2));
    add_ln74_5_fu_391_p2 <= std_logic_vector(unsigned(add_ln74_4_reg_480) + unsigned(mul_ln74_5_reg_470));
    add_ln74_6_fu_395_p2 <= std_logic_vector(unsigned(mul_ln74_9_fu_369_p2) + unsigned(mul_ln74_10_fu_381_p2));
    add_ln74_7_fu_401_p2 <= std_logic_vector(unsigned(add_ln74_6_fu_395_p2) + unsigned(mul_ln74_8_fu_353_p2));
    add_ln74_8_fu_407_p2 <= std_logic_vector(unsigned(add_ln74_7_fu_401_p2) + unsigned(add_ln74_5_fu_391_p2));
    add_ln74_fu_223_p2 <= std_logic_vector(unsigned(mul_ln74_fu_201_p2) + unsigned(mul_ln74_1_fu_217_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(x_ap_vld_in_sig, ap_CS_fsm_state12)
    begin
        if (((x_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(x_ap_vld_in_sig, ap_CS_fsm_state12)
    begin
        if (((x_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            c_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            c_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        else 
            c_address0 <= "XXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_10_fu_381_p0 <= c_q0;
    mul_ln74_10_fu_381_p1 <= x_in_sig;
    mul_ln74_10_fu_381_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_10_fu_381_p0) * signed(mul_ln74_10_fu_381_p1))), 32));
    mul_ln74_1_fu_217_p0 <= shift_reg_8;
    mul_ln74_1_fu_217_p1 <= c_q0;
    mul_ln74_1_fu_217_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_1_fu_217_p0) * signed(mul_ln74_1_fu_217_p1))), 32));
    mul_ln74_2_fu_239_p0 <= shift_reg_7;
    mul_ln74_2_fu_239_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_2_fu_239_p0) * signed(reg_189))), 32));
    mul_ln74_3_fu_255_p0 <= shift_reg_6;
    mul_ln74_3_fu_255_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_3_fu_255_p0) * signed(reg_193))), 32));
    mul_ln74_4_fu_271_p0 <= shift_reg_5;
    mul_ln74_4_fu_271_p1 <= c_q0;
    mul_ln74_4_fu_271_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_4_fu_271_p0) * signed(mul_ln74_4_fu_271_p1))), 32));
    mul_ln74_5_fu_299_p0 <= shift_reg_4;
    mul_ln74_5_fu_299_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_5_fu_299_p0) * signed(reg_189))), 32));
    mul_ln74_6_fu_315_p0 <= shift_reg_3;
    mul_ln74_6_fu_315_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_6_fu_315_p0) * signed(reg_193))), 32));
    mul_ln74_7_fu_331_p0 <= shift_reg_2;
    mul_ln74_7_fu_331_p1 <= c_q0;
    mul_ln74_7_fu_331_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_7_fu_331_p0) * signed(mul_ln74_7_fu_331_p1))), 32));
    mul_ln74_8_fu_353_p0 <= shift_reg_1;
    mul_ln74_8_fu_353_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_8_fu_353_p0) * signed(reg_189))), 32));
    mul_ln74_9_fu_369_p0 <= shift_reg_0;
    mul_ln74_9_fu_369_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_9_fu_369_p0) * signed(reg_193))), 32));
    mul_ln74_fu_201_p0 <= shift_reg_9;
    mul_ln74_fu_201_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln74_fu_201_p0) * signed(reg_189))), 32));

    x_ap_vld_in_sig_assign_proc : process(x_ap_vld, x_ap_vld_preg)
    begin
        if ((x_ap_vld = ap_const_logic_1)) then 
            x_ap_vld_in_sig <= x_ap_vld;
        else 
            x_ap_vld_in_sig <= x_ap_vld_preg;
        end if; 
    end process;


    x_blk_n_assign_proc : process(x_ap_vld, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_blk_n <= x_ap_vld;
        else 
            x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_in_sig_assign_proc : process(x, x_preg, x_ap_vld)
    begin
        if ((x_ap_vld = ap_const_logic_1)) then 
            x_in_sig <= x;
        else 
            x_in_sig <= x_preg;
        end if; 
    end process;

    y <= std_logic_vector(unsigned(add_ln74_8_fu_407_p2) + unsigned(add_ln74_3_fu_387_p2));

    y_ap_vld_assign_proc : process(x_ap_vld_in_sig, ap_CS_fsm_state12)
    begin
        if (((x_ap_vld_in_sig = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
