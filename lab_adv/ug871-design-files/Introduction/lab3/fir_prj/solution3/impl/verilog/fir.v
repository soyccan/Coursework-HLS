// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2019_1_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.918000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=33,HLS_SYN_FF=557,HLS_SYN_LUT=699,HLS_VERSION=2019_1_3}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x,
        x_ap_vld
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;
input   x_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg[3:0] c_address0;
reg c_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] x_preg;
reg   [31:0] x_in_sig;
reg    x_ap_vld_preg;
reg    x_ap_vld_in_sig;
reg   [31:0] shift_reg_9;
reg   [31:0] shift_reg_8;
reg   [31:0] shift_reg_7;
reg   [31:0] shift_reg_6;
reg   [31:0] shift_reg_5;
reg   [31:0] shift_reg_4;
reg   [31:0] shift_reg_3;
reg   [31:0] shift_reg_2;
reg   [31:0] shift_reg_1;
reg   [31:0] shift_reg_0;
reg    x_blk_n;
wire    ap_CS_fsm_state12;
reg  signed [31:0] reg_189;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
reg  signed [31:0] reg_193;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln74_fu_223_p2;
reg   [31:0] add_ln74_reg_435;
wire    ap_CS_fsm_state6;
wire   [31:0] add_ln74_2_fu_283_p2;
reg   [31:0] add_ln74_2_reg_455;
wire   [31:0] mul_ln74_5_fu_299_p2;
reg   [31:0] mul_ln74_5_reg_470;
wire    ap_CS_fsm_state9;
wire   [31:0] add_ln74_4_fu_337_p2;
reg   [31:0] add_ln74_4_reg_480;
wire  signed [31:0] mul_ln74_fu_201_p0;
wire  signed [31:0] mul_ln74_1_fu_217_p0;
wire  signed [31:0] mul_ln74_1_fu_217_p1;
wire   [31:0] mul_ln74_fu_201_p2;
wire   [31:0] mul_ln74_1_fu_217_p2;
wire  signed [31:0] mul_ln74_2_fu_239_p0;
wire  signed [31:0] mul_ln74_3_fu_255_p0;
wire  signed [31:0] mul_ln74_4_fu_271_p0;
wire  signed [31:0] mul_ln74_4_fu_271_p1;
wire   [31:0] mul_ln74_3_fu_255_p2;
wire   [31:0] mul_ln74_4_fu_271_p2;
wire   [31:0] add_ln74_1_fu_277_p2;
wire   [31:0] mul_ln74_2_fu_239_p2;
wire  signed [31:0] mul_ln74_5_fu_299_p0;
wire  signed [31:0] mul_ln74_6_fu_315_p0;
wire  signed [31:0] mul_ln74_7_fu_331_p0;
wire  signed [31:0] mul_ln74_7_fu_331_p1;
wire   [31:0] mul_ln74_6_fu_315_p2;
wire   [31:0] mul_ln74_7_fu_331_p2;
wire  signed [31:0] mul_ln74_8_fu_353_p0;
wire  signed [31:0] mul_ln74_9_fu_369_p0;
wire  signed [31:0] mul_ln74_10_fu_381_p0;
wire  signed [31:0] mul_ln74_10_fu_381_p1;
wire   [31:0] mul_ln74_9_fu_369_p2;
wire   [31:0] mul_ln74_10_fu_381_p2;
wire   [31:0] add_ln74_6_fu_395_p2;
wire   [31:0] mul_ln74_8_fu_353_p2;
wire   [31:0] add_ln74_7_fu_401_p2;
wire   [31:0] add_ln74_5_fu_391_p2;
wire   [31:0] add_ln74_8_fu_407_p2;
wire   [31:0] add_ln74_3_fu_387_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 x_preg = 32'd0;
#0 x_ap_vld_preg = 1'b0;
#0 shift_reg_9 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_7 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_0 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_ap_vld_preg <= 1'b0;
    end else begin
        if (((x_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            x_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_ap_vld == 1'b1))) begin
            x_ap_vld_preg <= x_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_ap_vld == 1'b1))) begin
            x_preg <= x;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln74_2_reg_455 <= add_ln74_2_fu_283_p2;
        shift_reg_6 <= shift_reg_5;
        shift_reg_7 <= shift_reg_6;
        shift_reg_8 <= shift_reg_7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln74_4_reg_480 <= add_ln74_4_fu_337_p2;
        mul_ln74_5_reg_470 <= mul_ln74_5_fu_299_p2;
        shift_reg_3 <= shift_reg_2;
        shift_reg_4 <= shift_reg_3;
        shift_reg_5 <= shift_reg_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln74_reg_435 <= add_ln74_fu_223_p2;
        shift_reg_9 <= shift_reg_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_189 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_193 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((x_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        shift_reg_0 <= x_in_sig;
        shift_reg_1 <= shift_reg_0;
        shift_reg_2 <= shift_reg_1;
    end
end

always @ (*) begin
    if (((x_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((x_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        c_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        c_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        c_address0 = 64'd10;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((x_ap_vld == 1'b1)) begin
        x_ap_vld_in_sig = x_ap_vld;
    end else begin
        x_ap_vld_in_sig = x_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_blk_n = x_ap_vld;
    end else begin
        x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_ap_vld == 1'b1)) begin
        x_in_sig = x;
    end else begin
        x_in_sig = x_preg;
    end
end

always @ (*) begin
    if (((x_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((x_ap_vld_in_sig == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln74_1_fu_277_p2 = (mul_ln74_3_fu_255_p2 + mul_ln74_4_fu_271_p2);

assign add_ln74_2_fu_283_p2 = (add_ln74_1_fu_277_p2 + mul_ln74_2_fu_239_p2);

assign add_ln74_3_fu_387_p2 = (add_ln74_2_reg_455 + add_ln74_reg_435);

assign add_ln74_4_fu_337_p2 = (mul_ln74_6_fu_315_p2 + mul_ln74_7_fu_331_p2);

assign add_ln74_5_fu_391_p2 = (add_ln74_4_reg_480 + mul_ln74_5_reg_470);

assign add_ln74_6_fu_395_p2 = (mul_ln74_9_fu_369_p2 + mul_ln74_10_fu_381_p2);

assign add_ln74_7_fu_401_p2 = (add_ln74_6_fu_395_p2 + mul_ln74_8_fu_353_p2);

assign add_ln74_8_fu_407_p2 = (add_ln74_7_fu_401_p2 + add_ln74_5_fu_391_p2);

assign add_ln74_fu_223_p2 = (mul_ln74_fu_201_p2 + mul_ln74_1_fu_217_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign mul_ln74_10_fu_381_p0 = c_q0;

assign mul_ln74_10_fu_381_p1 = x_in_sig;

assign mul_ln74_10_fu_381_p2 = ($signed(mul_ln74_10_fu_381_p0) * $signed(mul_ln74_10_fu_381_p1));

assign mul_ln74_1_fu_217_p0 = shift_reg_8;

assign mul_ln74_1_fu_217_p1 = c_q0;

assign mul_ln74_1_fu_217_p2 = ($signed(mul_ln74_1_fu_217_p0) * $signed(mul_ln74_1_fu_217_p1));

assign mul_ln74_2_fu_239_p0 = shift_reg_7;

assign mul_ln74_2_fu_239_p2 = ($signed(mul_ln74_2_fu_239_p0) * $signed(reg_189));

assign mul_ln74_3_fu_255_p0 = shift_reg_6;

assign mul_ln74_3_fu_255_p2 = ($signed(mul_ln74_3_fu_255_p0) * $signed(reg_193));

assign mul_ln74_4_fu_271_p0 = shift_reg_5;

assign mul_ln74_4_fu_271_p1 = c_q0;

assign mul_ln74_4_fu_271_p2 = ($signed(mul_ln74_4_fu_271_p0) * $signed(mul_ln74_4_fu_271_p1));

assign mul_ln74_5_fu_299_p0 = shift_reg_4;

assign mul_ln74_5_fu_299_p2 = ($signed(mul_ln74_5_fu_299_p0) * $signed(reg_189));

assign mul_ln74_6_fu_315_p0 = shift_reg_3;

assign mul_ln74_6_fu_315_p2 = ($signed(mul_ln74_6_fu_315_p0) * $signed(reg_193));

assign mul_ln74_7_fu_331_p0 = shift_reg_2;

assign mul_ln74_7_fu_331_p1 = c_q0;

assign mul_ln74_7_fu_331_p2 = ($signed(mul_ln74_7_fu_331_p0) * $signed(mul_ln74_7_fu_331_p1));

assign mul_ln74_8_fu_353_p0 = shift_reg_1;

assign mul_ln74_8_fu_353_p2 = ($signed(mul_ln74_8_fu_353_p0) * $signed(reg_189));

assign mul_ln74_9_fu_369_p0 = shift_reg_0;

assign mul_ln74_9_fu_369_p2 = ($signed(mul_ln74_9_fu_369_p0) * $signed(reg_193));

assign mul_ln74_fu_201_p0 = shift_reg_9;

assign mul_ln74_fu_201_p2 = ($signed(mul_ln74_fu_201_p0) * $signed(reg_189));

assign y = (add_ln74_8_fu_407_p2 + add_ln74_3_fu_387_p2);

endmodule //fir
