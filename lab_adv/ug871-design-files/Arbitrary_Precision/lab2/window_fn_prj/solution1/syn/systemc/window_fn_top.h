// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _window_fn_top_HH_
#define _window_fn_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "window_fn_top_mulcud.h"
#include "window_fn_top_coebkb.h"

namespace ap_rtl {

struct window_fn_top : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > outdata_V_address0;
    sc_out< sc_logic > outdata_V_ce0;
    sc_out< sc_logic > outdata_V_we0;
    sc_out< sc_lv<24> > outdata_V_d0;
    sc_out< sc_lv<5> > indata_V_address0;
    sc_out< sc_logic > indata_V_ce0;
    sc_in< sc_lv<8> > indata_V_q0;


    // Module declarations
    window_fn_top(sc_module_name name);
    SC_HAS_PROCESS(window_fn_top);

    ~window_fn_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    window_fn_top_coebkb* coeff_tab1_U;
    window_fn_top_mulcud<1,1,17,8,24>* window_fn_top_mulcud_U1;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > coeff_tab1_address0;
    sc_signal< sc_logic > coeff_tab1_ce0;
    sc_signal< sc_lv<17> > coeff_tab1_q0;
    sc_signal< sc_lv<6> > i_fu_84_p2;
    sc_signal< sc_lv<6> > i_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln131_fu_90_p1;
    sc_signal< sc_lv<64> > zext_ln131_reg_117;
    sc_signal< sc_lv<1> > icmp_ln129_fu_78_p2;
    sc_signal< sc_lv<17> > coeff_tab1_load_reg_128;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<6> > i_0_i_reg_67;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<24> > mul_ln703_fu_102_p2;
    sc_signal< sc_lv<17> > mul_ln703_fu_102_p0;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_lv<24> > mul_ln703_fu_102_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_coeff_tab1_address0();
    void thread_coeff_tab1_ce0();
    void thread_i_fu_84_p2();
    void thread_icmp_ln129_fu_78_p2();
    void thread_indata_V_address0();
    void thread_indata_V_ce0();
    void thread_mul_ln703_fu_102_p0();
    void thread_mul_ln703_fu_102_p00();
    void thread_outdata_V_address0();
    void thread_outdata_V_ce0();
    void thread_outdata_V_d0();
    void thread_outdata_V_we0();
    void thread_zext_ln131_fu_90_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
