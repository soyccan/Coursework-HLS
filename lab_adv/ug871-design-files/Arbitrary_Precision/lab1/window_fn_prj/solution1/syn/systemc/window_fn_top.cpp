// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "window_fn_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic window_fn_top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic window_fn_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> window_fn_top::ap_ST_fsm_state1 = "1";
const sc_lv<6> window_fn_top::ap_ST_fsm_state2 = "10";
const sc_lv<6> window_fn_top::ap_ST_fsm_state3 = "100";
const sc_lv<6> window_fn_top::ap_ST_fsm_state4 = "1000";
const sc_lv<6> window_fn_top::ap_ST_fsm_state5 = "10000";
const sc_lv<6> window_fn_top::ap_ST_fsm_state6 = "100000";
const sc_lv<32> window_fn_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> window_fn_top::ap_const_lv32_1 = "1";
const sc_lv<1> window_fn_top::ap_const_lv1_0 = "0";
const sc_lv<32> window_fn_top::ap_const_lv32_2 = "10";
const sc_lv<6> window_fn_top::ap_const_lv6_0 = "000000";
const sc_lv<32> window_fn_top::ap_const_lv32_5 = "101";
const sc_lv<6> window_fn_top::ap_const_lv6_20 = "100000";
const sc_lv<6> window_fn_top::ap_const_lv6_1 = "1";
const sc_lv<1> window_fn_top::ap_const_lv1_1 = "1";
const bool window_fn_top::ap_const_boolean_1 = true;

window_fn_top::window_fn_top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coeff_tab1_U = new window_fn_top_coebkb("coeff_tab1_U");
    coeff_tab1_U->clk(ap_clk);
    coeff_tab1_U->reset(ap_rst);
    coeff_tab1_U->address0(coeff_tab1_address0);
    coeff_tab1_U->ce0(coeff_tab1_ce0);
    coeff_tab1_U->q0(coeff_tab1_q0);
    window_fn_top_fmucud_U1 = new window_fn_top_fmucud<1,4,32,32,32>("window_fn_top_fmucud_U1");
    window_fn_top_fmucud_U1->clk(ap_clk);
    window_fn_top_fmucud_U1->reset(ap_rst);
    window_fn_top_fmucud_U1->din0(coeff_tab1_q0);
    window_fn_top_fmucud_U1->din1(indata_q0);
    window_fn_top_fmucud_U1->ce(ap_var_for_const0);
    window_fn_top_fmucud_U1->dout(grp_fu_78_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln129_fu_85_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln129_fu_85_p2 );

    SC_METHOD(thread_coeff_tab1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln131_fu_97_p1 );

    SC_METHOD(thread_coeff_tab1_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_fu_91_p2);
    sensitive << ( i_0_i_reg_67 );

    SC_METHOD(thread_icmp_ln129_fu_85_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_reg_67 );

    SC_METHOD(thread_indata_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln131_fu_97_p1 );

    SC_METHOD(thread_indata_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_outdata_address0);
    sensitive << ( zext_ln131_reg_111 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_outdata_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_outdata_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_78_p2 );

    SC_METHOD(thread_outdata_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_zext_ln131_fu_97_p1);
    sensitive << ( i_0_i_reg_67 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln129_fu_85_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "window_fn_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, outdata_address0, "(port)outdata_address0");
    sc_trace(mVcdFile, outdata_ce0, "(port)outdata_ce0");
    sc_trace(mVcdFile, outdata_we0, "(port)outdata_we0");
    sc_trace(mVcdFile, outdata_d0, "(port)outdata_d0");
    sc_trace(mVcdFile, indata_address0, "(port)indata_address0");
    sc_trace(mVcdFile, indata_ce0, "(port)indata_ce0");
    sc_trace(mVcdFile, indata_q0, "(port)indata_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, coeff_tab1_address0, "coeff_tab1_address0");
    sc_trace(mVcdFile, coeff_tab1_ce0, "coeff_tab1_ce0");
    sc_trace(mVcdFile, coeff_tab1_q0, "coeff_tab1_q0");
    sc_trace(mVcdFile, i_fu_91_p2, "i_fu_91_p2");
    sc_trace(mVcdFile, i_reg_106, "i_reg_106");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln131_fu_97_p1, "zext_ln131_fu_97_p1");
    sc_trace(mVcdFile, zext_ln131_reg_111, "zext_ln131_reg_111");
    sc_trace(mVcdFile, icmp_ln129_fu_85_p2, "icmp_ln129_fu_85_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_i_reg_67, "i_0_i_reg_67");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_78_p2, "grp_fu_78_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("window_fn_top.hdltvin.dat");
    mHdltvoutHandle.open("window_fn_top.hdltvout.dat");
}

window_fn_top::~window_fn_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete coeff_tab1_U;
    delete window_fn_top_fmucud_U1;
}

void window_fn_top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void window_fn_top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_i_reg_67 = i_reg_106.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_i_reg_67 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_106 = i_fu_91_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln129_fu_85_p2.read(), ap_const_lv1_0))) {
        zext_ln131_reg_111 = zext_ln131_fu_97_p1.read();
    }
}

void window_fn_top::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void window_fn_top::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void window_fn_top::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void window_fn_top::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void window_fn_top::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln129_fu_85_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void window_fn_top::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void window_fn_top::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln129_fu_85_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void window_fn_top::thread_coeff_tab1_address0() {
    coeff_tab1_address0 =  (sc_lv<5>) (zext_ln131_fu_97_p1.read());
}

void window_fn_top::thread_coeff_tab1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        coeff_tab1_ce0 = ap_const_logic_1;
    } else {
        coeff_tab1_ce0 = ap_const_logic_0;
    }
}

void window_fn_top::thread_i_fu_91_p2() {
    i_fu_91_p2 = (!i_0_i_reg_67.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_i_reg_67.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void window_fn_top::thread_icmp_ln129_fu_85_p2() {
    icmp_ln129_fu_85_p2 = (!i_0_i_reg_67.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_67.read() == ap_const_lv6_20);
}

void window_fn_top::thread_indata_address0() {
    indata_address0 =  (sc_lv<5>) (zext_ln131_fu_97_p1.read());
}

void window_fn_top::thread_indata_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        indata_ce0 = ap_const_logic_1;
    } else {
        indata_ce0 = ap_const_logic_0;
    }
}

void window_fn_top::thread_outdata_address0() {
    outdata_address0 =  (sc_lv<5>) (zext_ln131_reg_111.read());
}

void window_fn_top::thread_outdata_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        outdata_ce0 = ap_const_logic_1;
    } else {
        outdata_ce0 = ap_const_logic_0;
    }
}

void window_fn_top::thread_outdata_d0() {
    outdata_d0 = grp_fu_78_p2.read();
}

void window_fn_top::thread_outdata_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        outdata_we0 = ap_const_logic_1;
    } else {
        outdata_we0 = ap_const_logic_0;
    }
}

void window_fn_top::thread_zext_ln131_fu_97_p1() {
    zext_ln131_fu_97_p1 = esl_zext<64,6>(i_0_i_reg_67.read());
}

void window_fn_top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln129_fu_85_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void window_fn_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_address0\" :  \"" << outdata_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_ce0\" :  \"" << outdata_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_we0\" :  \"" << outdata_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_d0\" :  \"" << outdata_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"indata_address0\" :  \"" << indata_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"indata_ce0\" :  \"" << indata_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indata_q0\" :  \"" << indata_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

