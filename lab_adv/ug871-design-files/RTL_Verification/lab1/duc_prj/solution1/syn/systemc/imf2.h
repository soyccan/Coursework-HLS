// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _imf2_HH_
#define _imf2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "duc_mul_mul_18s_1bkb.h"
#include "imf2_c_1.h"
#include "imf2_shift_reg_p_1.h"

namespace ap_rtl {

struct imf2 : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<18> > x;
    sc_out< sc_lv<18> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    imf2(sc_module_name name);
    SC_HAS_PROCESS(imf2);

    ~imf2();

    sc_trace_file* mVcdFile;

    imf2_c_1* c_1_U;
    imf2_shift_reg_p_1* shift_reg_p_1_U;
    duc_mul_mul_18s_1bkb<1,4,18,18,36>* duc_mul_mul_18s_1bkb_U1;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_3;
    sc_signal< sc_lv<18> > in_2;
    sc_signal< sc_lv<4> > c_1_address0;
    sc_signal< sc_logic > c_1_ce0;
    sc_signal< sc_lv<18> > c_1_q0;
    sc_signal< sc_lv<1> > init_3;
    sc_signal< sc_lv<1> > ch_2;
    sc_signal< sc_lv<5> > shift_reg_p_1_address0;
    sc_signal< sc_logic > shift_reg_p_1_ce0;
    sc_signal< sc_logic > shift_reg_p_1_we0;
    sc_signal< sc_lv<38> > shift_reg_p_1_q0;
    sc_signal< sc_lv<2> > cnt;
    sc_signal< sc_lv<4> > i_3_load_reg_282;
    sc_signal< sc_lv<18> > c_1_load_reg_298;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > inc_fu_118_p2;
    sc_signal< sc_lv<4> > inc_reg_313;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > ch_2_load_reg_319;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln27_fu_143_p2;
    sc_signal< sc_lv<1> > icmp_ln27_reg_330;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<38> > select_ln27_fu_177_p3;
    sc_signal< sc_lv<38> > select_ln27_reg_335;
    sc_signal< sc_lv<36> > grp_fu_275_p2;
    sc_signal< sc_lv<36> > m_reg_340;
    sc_signal< sc_lv<35> > trunc_ln37_fu_185_p1;
    sc_signal< sc_lv<35> > trunc_ln37_reg_345;
    sc_signal< sc_lv<35> > trunc_ln37_1_fu_188_p1;
    sc_signal< sc_lv<35> > trunc_ln37_1_reg_350;
    sc_signal< sc_lv<38> > sum_fu_195_p2;
    sc_signal< sc_lv<38> > sum_reg_355;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<35> > add_ln37_1_fu_200_p2;
    sc_signal< sc_lv<35> > add_ln37_1_reg_360;
    sc_signal< sc_lv<64> > zext_ln27_fu_102_p1;
    sc_signal< sc_lv<64> > zext_ln27_1_fu_134_p1;
    sc_signal< sc_lv<64> > zext_ln29_fu_210_p1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<4> > inc_3_fu_263_p3;
    sc_signal< sc_lv<1> > icmp_ln22_fu_90_p2;
    sc_signal< sc_lv<1> > icmp_ln31_fu_219_p2;
    sc_signal< sc_lv<1> > xor_ln33_fu_231_p2;
    sc_signal< sc_lv<2> > add_ln35_fu_242_p2;
    sc_signal< sc_lv<5> > tmp_6_fu_127_p3;
    sc_signal< sc_lv<1> > icmp_ln27_1_fu_148_p2;
    sc_signal< sc_lv<1> > or_ln27_fu_159_p2;
    sc_signal< sc_lv<1> > xor_ln27_fu_153_p2;
    sc_signal< sc_lv<1> > and_ln27_fu_165_p2;
    sc_signal< sc_lv<1> > or_ln27_1_fu_171_p2;
    sc_signal< sc_lv<38> > sext_ln37_fu_192_p1;
    sc_signal< sc_lv<5> > tmp_fu_204_p3;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<38> ap_const_lv38_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_22;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln35_fu_242_p2();
    void thread_add_ln37_1_fu_200_p2();
    void thread_and_ln27_fu_165_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_c_1_address0();
    void thread_c_1_ce0();
    void thread_icmp_ln22_fu_90_p2();
    void thread_icmp_ln27_1_fu_148_p2();
    void thread_icmp_ln27_fu_143_p2();
    void thread_icmp_ln31_fu_219_p2();
    void thread_inc_3_fu_263_p3();
    void thread_inc_fu_118_p2();
    void thread_or_ln27_1_fu_171_p2();
    void thread_or_ln27_fu_159_p2();
    void thread_select_ln27_fu_177_p3();
    void thread_sext_ln37_fu_192_p1();
    void thread_shift_reg_p_1_address0();
    void thread_shift_reg_p_1_ce0();
    void thread_shift_reg_p_1_we0();
    void thread_sum_fu_195_p2();
    void thread_tmp_6_fu_127_p3();
    void thread_tmp_fu_204_p3();
    void thread_trunc_ln37_1_fu_188_p1();
    void thread_trunc_ln37_fu_185_p1();
    void thread_xor_ln27_fu_153_p2();
    void thread_xor_ln33_fu_231_p2();
    void thread_zext_ln27_1_fu_134_p1();
    void thread_zext_ln27_fu_102_p1();
    void thread_zext_ln29_fu_210_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
