-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imf2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of imf2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal in_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal c_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_ce0 : STD_LOGIC;
    signal c_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init_3 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ch_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal shift_reg_p_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_reg_p_1_ce0 : STD_LOGIC;
    signal shift_reg_p_1_we0 : STD_LOGIC;
    signal shift_reg_p_1_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal cnt : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_3_load_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_load_reg_298 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal inc_fu_118_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal inc_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ch_2_load_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln27_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln27_fu_177_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal select_ln27_reg_335 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal m_reg_340 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln37_fu_185_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln37_reg_345 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln37_1_fu_188_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln37_1_reg_350 : STD_LOGIC_VECTOR (34 downto 0);
    signal sum_fu_195_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_reg_355 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln37_1_fu_200_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln37_1_reg_360 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln27_fu_102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal inc_3_fu_263_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln22_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_127_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln27_1_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln37_fu_192_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_fu_204_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component duc_mul_mul_18s_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component imf2_c_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component imf2_shift_reg_p_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    c_1_U : component imf2_c_1
    generic map (
        DataWidth => 18,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_1_address0,
        ce0 => c_1_ce0,
        q0 => c_1_q0);

    shift_reg_p_1_U : component imf2_shift_reg_p_1
    generic map (
        DataWidth => 38,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p_1_address0,
        ce0 => shift_reg_p_1_ce0,
        we0 => shift_reg_p_1_we0,
        d0 => sum_reg_355,
        q0 => shift_reg_p_1_q0);

    duc_mul_mul_18s_1bkb_U1 : component duc_mul_mul_18s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => c_1_load_reg_298,
        din1 => in_2,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln37_1_reg_360 <= add_ln37_1_fu_200_p2;
                sum_reg_355 <= sum_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_1_load_reg_298 <= c_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_330 = ap_const_lv1_1) and (icmp_ln31_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                ch_2 <= xor_ln33_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ch_2_load_reg_319 <= ch_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_330 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                cnt <= add_ln35_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_3 <= inc_3_fu_263_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                i_3_load_reg_282 <= i_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln27_reg_330 <= icmp_ln27_fu_143_p2;
                m_reg_340 <= grp_fu_275_p2;
                select_ln27_reg_335 <= select_ln27_fu_177_p3;
                trunc_ln37_1_reg_350 <= trunc_ln37_1_fu_188_p1;
                trunc_ln37_reg_345 <= trunc_ln37_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_2 <= x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                inc_reg_313 <= inc_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_330 = ap_const_lv1_1) and (ch_2_load_reg_319 = ap_const_lv1_1) and (icmp_ln31_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                init_3 <= ap_const_lv1_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln35_fu_242_p2 <= std_logic_vector(unsigned(cnt) + unsigned(ap_const_lv2_1));
    add_ln37_1_fu_200_p2 <= std_logic_vector(unsigned(trunc_ln37_1_reg_350) + unsigned(trunc_ln37_reg_345));
    and_ln27_fu_165_p2 <= (xor_ln27_fu_153_p2 and or_ln27_fu_159_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= add_ln37_1_reg_360(34 downto 17);
    c_1_address0 <= zext_ln27_fu_102_p1(4 - 1 downto 0);

    c_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            c_1_ce0 <= ap_const_logic_1;
        else 
            c_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_90_p2 <= "1" when (i_3 = ap_const_lv4_0) else "0";
    icmp_ln27_1_fu_148_p2 <= "1" when (i_3_load_reg_282 = ap_const_lv4_5) else "0";
    icmp_ln27_fu_143_p2 <= "1" when (i_3_load_reg_282 = ap_const_lv4_B) else "0";
    icmp_ln31_fu_219_p2 <= "1" when (cnt = ap_const_lv2_3) else "0";
    inc_3_fu_263_p3 <= 
        ap_const_lv4_0 when (icmp_ln27_reg_330(0) = '1') else 
        inc_reg_313;
    inc_fu_118_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_3_load_reg_282));
    or_ln27_1_fu_171_p2 <= (init_3 or and_ln27_fu_165_p2);
    or_ln27_fu_159_p2 <= (icmp_ln27_fu_143_p2 or icmp_ln27_1_fu_148_p2);
    select_ln27_fu_177_p3 <= 
        ap_const_lv38_0 when (or_ln27_1_fu_171_p2(0) = '1') else 
        shift_reg_p_1_q0;
        sext_ln37_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_reg_340),38));


    shift_reg_p_1_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln27_1_fu_134_p1, zext_ln29_fu_210_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p_1_address0 <= zext_ln29_fu_210_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_p_1_address0 <= zext_ln27_1_fu_134_p1(5 - 1 downto 0);
        else 
            shift_reg_p_1_address0 <= "XXXXX";
        end if; 
    end process;


    shift_reg_p_1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            shift_reg_p_1_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p_1_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p_1_we0 <= ap_const_logic_1;
        else 
            shift_reg_p_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_195_p2 <= std_logic_vector(signed(sext_ln37_fu_192_p1) + signed(select_ln27_reg_335));
    tmp_6_fu_127_p3 <= (inc_reg_313 & ch_2);
    tmp_fu_204_p3 <= (i_3_load_reg_282 & ch_2_load_reg_319);
    trunc_ln37_1_fu_188_p1 <= select_ln27_fu_177_p3(35 - 1 downto 0);
    trunc_ln37_fu_185_p1 <= grp_fu_275_p2(35 - 1 downto 0);
    xor_ln27_fu_153_p2 <= (init_3 xor ap_const_lv1_1);
    xor_ln33_fu_231_p2 <= (ch_2_load_reg_319 xor ap_const_lv1_1);
    zext_ln27_1_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_127_p3),64));
    zext_ln27_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3),64));
    zext_ln29_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_204_p3),64));
end behav;
