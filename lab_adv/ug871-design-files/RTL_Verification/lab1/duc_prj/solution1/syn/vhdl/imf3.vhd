-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imf3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of imf3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal in_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal j : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal c_5_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_5_0_ce0 : STD_LOGIC;
    signal c_5_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init_2 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal shift_reg_p0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_p0_ce0 : STD_LOGIC;
    signal shift_reg_p0_we0 : STD_LOGIC;
    signal shift_reg_p0_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal c_5_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_5_1_ce0 : STD_LOGIC;
    signal c_5_1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_p1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_p1_ce0 : STD_LOGIC;
    signal shift_reg_p1_we0 : STD_LOGIC;
    signal shift_reg_p1_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_2_load_reg_384 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln23_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_5_0_load_reg_411 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_5_1_load_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal inc_fu_169_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal inc_reg_431 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_s_reg_437 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ch_4_fu_178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ch_4_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln46_fu_216_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln46_reg_465 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln30_fu_231_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal select_ln30_reg_470 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal m_reg_475 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln30_fu_239_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln30_reg_480 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln30_1_fu_243_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln30_1_reg_485 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln30_1_fu_246_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal select_ln30_1_reg_490 : STD_LOGIC_VECTOR (37 downto 0);
    signal m_1_fu_254_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_1_reg_495 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln31_fu_260_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln31_reg_501 : STD_LOGIC_VECTOR (34 downto 0);
    signal acc0_fu_267_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal acc0_reg_506 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal acc1_fu_275_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal acc1_reg_511 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_4_reg_516 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_reg_521 : STD_LOGIC_VECTOR (17 downto 0);
    signal d_assign_reg_126 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln30_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal inc_2_fu_360_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_fu_346_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln37_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_191_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_208_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln46_2_fu_204_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln30_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln47_fu_264_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln47_1_fu_272_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln36_fu_280_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln36_1_fu_284_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_fu_308_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln37_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_341_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component duc_mul_mul_18s_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component imf3_c_5_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component imf3_shift_reg_p0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component imf3_c_5_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    c_5_0_U : component imf3_c_5_0
    generic map (
        DataWidth => 18,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_5_0_address0,
        ce0 => c_5_0_ce0,
        q0 => c_5_0_q0);

    shift_reg_p0_U : component imf3_shift_reg_p0
    generic map (
        DataWidth => 38,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p0_address0,
        ce0 => shift_reg_p0_ce0,
        we0 => shift_reg_p0_we0,
        d0 => acc0_reg_506,
        q0 => shift_reg_p0_q0);

    c_5_1_U : component imf3_c_5_1
    generic map (
        DataWidth => 1,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_5_1_address0,
        ce0 => c_5_1_ce0,
        q0 => c_5_1_q0);

    shift_reg_p1_U : component imf3_shift_reg_p0
    generic map (
        DataWidth => 38,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p1_address0,
        ce0 => shift_reg_p1_ce0,
        we0 => shift_reg_p1_we0,
        d0 => acc1_reg_511,
        q0 => shift_reg_p1_q0);

    duc_mul_mul_18s_1bkb_U6 : component duc_mul_mul_18s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => c_5_0_load_reg_411,
        din1 => d_assign_reg_126,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_assign_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((icmp_ln23_fu_140_p2 = ap_const_lv1_0)) then 
                    d_assign_reg_126 <= in_1;
                elsif ((icmp_ln23_fu_140_p2 = ap_const_lv1_1)) then 
                    d_assign_reg_126 <= x;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                acc0_reg_506 <= acc0_fu_267_p2;
                acc1_reg_511 <= acc1_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_5_0_load_reg_411 <= c_5_0_q0;
                c_5_1_load_reg_416 <= c_5_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ch_4_reg_443 <= j(3 downto 3);
                icmp_ln30_reg_448 <= icmp_ln30_fu_186_p2;
                p_Val2_s_reg_437 <= j;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_2 <= inc_2_fu_360_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                i_2_load_reg_384 <= i_2;
                icmp_ln23_reg_391 <= icmp_ln23_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_1 <= x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                inc_reg_431 <= inc_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln37_fu_330_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                init_2 <= ap_const_lv1_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_448 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                j <= select_ln40_fu_346_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_1_reg_495 <= m_1_fu_254_p3;
                m_reg_475 <= grp_fu_372_p2;
                select_ln30_1_reg_490 <= select_ln30_1_fu_246_p3;
                select_ln30_reg_470 <= select_ln30_fu_231_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((c_5_1_load_reg_416 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sub_ln46_reg_465 <= sub_ln46_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_4_reg_516 <= add_ln36_fu_280_p2(34 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_391 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_5_reg_521 <= add_ln36_1_fu_284_p2(34 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                trunc_ln30_1_reg_485 <= trunc_ln30_1_fu_243_p1;
                trunc_ln30_reg_480 <= trunc_ln30_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_391 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                trunc_ln31_reg_501 <= trunc_ln31_fu_260_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    acc0_fu_267_p2 <= std_logic_vector(signed(sext_ln47_fu_264_p1) + signed(select_ln30_reg_470));
    acc1_fu_275_p2 <= std_logic_vector(signed(sext_ln47_1_fu_272_p1) + signed(select_ln30_1_reg_490));
    add_ln36_1_fu_284_p2 <= std_logic_vector(unsigned(trunc_ln31_reg_501) + unsigned(m_1_reg_495));
    add_ln36_fu_280_p2 <= std_logic_vector(unsigned(trunc_ln30_reg_480) + unsigned(trunc_ln30_1_reg_485));
    add_ln40_fu_341_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_437) + unsigned(ap_const_lv6_1));
    and_ln37_fu_330_p2 <= (icmp_ln37_fu_325_p2 and icmp_ln30_reg_448);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        tmp_4_reg_516 when (icmp_ln23_reg_391(0) = '1') else 
        tmp_5_reg_521;
    c_5_0_address0 <= zext_ln30_fu_156_p1(3 - 1 downto 0);

    c_5_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            c_5_0_ce0 <= ap_const_logic_1;
        else 
            c_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_5_1_address0 <= zext_ln30_fu_156_p1(3 - 1 downto 0);

    c_5_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            c_5_1_ce0 <= ap_const_logic_1;
        else 
            c_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ch_4_fu_178_p3 <= j(3 downto 3);
    icmp_ln23_fu_140_p2 <= "1" when (i_2 = ap_const_lv6_0) else "0";
    icmp_ln30_fu_186_p2 <= "1" when (i_2_load_reg_384 = ap_const_lv6_5) else "0";
    icmp_ln37_fu_325_p2 <= "1" when (p_Val2_s_reg_437 = ap_const_lv6_F) else "0";
    inc_2_fu_360_p3 <= 
        ap_const_lv6_0 when (icmp_ln30_reg_448(0) = '1') else 
        inc_reg_431;
    inc_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_2_load_reg_384));
    m_1_fu_254_p3 <= 
        sub_ln46_reg_465 when (c_5_1_load_reg_416(0) = '1') else 
        ap_const_lv35_0;
    or_ln30_fu_226_p2 <= (init_2 or icmp_ln30_reg_448);
    select_ln30_1_fu_246_p3 <= 
        ap_const_lv38_0 when (or_ln30_fu_226_p2(0) = '1') else 
        shift_reg_p1_q0;
    select_ln30_fu_231_p3 <= 
        ap_const_lv38_0 when (or_ln30_fu_226_p2(0) = '1') else 
        shift_reg_p0_q0;
    select_ln40_fu_346_p3 <= 
        ap_const_lv6_0 when (icmp_ln37_fu_325_p2(0) = '1') else 
        add_ln40_fu_341_p2;
        sext_ln46_2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_assign_reg_126),35));

        sext_ln47_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_1_reg_495),38));

        sext_ln47_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_reg_475),38));


    shift_reg_p0_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln30_1_fu_198_p1, zext_ln33_fu_314_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p0_address0 <= zext_ln33_fu_314_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_p0_address0 <= zext_ln30_1_fu_198_p1(4 - 1 downto 0);
        else 
            shift_reg_p0_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_p0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            shift_reg_p0_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p0_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p0_we0 <= ap_const_logic_1;
        else 
            shift_reg_p0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p1_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln30_1_fu_198_p1, zext_ln33_fu_314_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p1_address0 <= zext_ln33_fu_314_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_p1_address0 <= zext_ln30_1_fu_198_p1(4 - 1 downto 0);
        else 
            shift_reg_p1_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_p1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            shift_reg_p1_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p1_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p1_we0 <= ap_const_logic_1;
        else 
            shift_reg_p1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_208_p3 <= (d_assign_reg_126 & ap_const_lv17_0);
    sub_ln46_fu_216_p2 <= std_logic_vector(unsigned(shl_ln_fu_208_p3) - unsigned(sext_ln46_2_fu_204_p1));
    tmp_3_fu_191_p3 <= (inc_reg_431 & ch_4_fu_178_p3);
    tmp_fu_308_p3 <= (i_2_load_reg_384 & ch_4_reg_443);
    trunc_ln30_1_fu_243_p1 <= grp_fu_372_p2(35 - 1 downto 0);
    trunc_ln30_fu_239_p1 <= select_ln30_fu_231_p3(35 - 1 downto 0);
    trunc_ln31_fu_260_p1 <= select_ln30_1_fu_246_p3(35 - 1 downto 0);
    zext_ln30_1_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_191_p3),64));
    zext_ln30_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2),64));
    zext_ln33_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_308_p3),64));
end behav;
