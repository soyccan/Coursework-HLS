// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imf2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x;
output  [17:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_3;
reg  signed [17:0] in_2;
wire   [3:0] c_1_address0;
reg    c_1_ce0;
wire   [17:0] c_1_q0;
reg   [0:0] init_3;
reg   [0:0] ch_2;
reg   [4:0] shift_reg_p_1_address0;
reg    shift_reg_p_1_ce0;
reg    shift_reg_p_1_we0;
wire   [37:0] shift_reg_p_1_q0;
reg   [1:0] cnt;
reg   [3:0] i_3_load_reg_282;
reg  signed [17:0] c_1_load_reg_298;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [3:0] inc_fu_118_p2;
reg   [3:0] inc_reg_313;
wire    ap_CS_fsm_state4;
reg   [0:0] ch_2_load_reg_319;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln27_fu_143_p2;
reg   [0:0] icmp_ln27_reg_330;
wire    ap_CS_fsm_state6;
wire   [37:0] select_ln27_fu_177_p3;
reg   [37:0] select_ln27_reg_335;
wire  signed [35:0] grp_fu_275_p2;
reg  signed [35:0] m_reg_340;
wire   [34:0] trunc_ln37_fu_185_p1;
reg   [34:0] trunc_ln37_reg_345;
wire   [34:0] trunc_ln37_1_fu_188_p1;
reg   [34:0] trunc_ln37_1_reg_350;
wire   [37:0] sum_fu_195_p2;
reg   [37:0] sum_reg_355;
wire    ap_CS_fsm_state7;
wire   [34:0] add_ln37_1_fu_200_p2;
reg   [34:0] add_ln37_1_reg_360;
wire   [63:0] zext_ln27_fu_102_p1;
wire   [63:0] zext_ln27_1_fu_134_p1;
wire   [63:0] zext_ln29_fu_210_p1;
wire    ap_CS_fsm_state8;
wire   [3:0] inc_3_fu_263_p3;
wire   [0:0] icmp_ln22_fu_90_p2;
wire   [0:0] icmp_ln31_fu_219_p2;
wire   [0:0] xor_ln33_fu_231_p2;
wire   [1:0] add_ln35_fu_242_p2;
wire   [4:0] tmp_6_fu_127_p3;
wire   [0:0] icmp_ln27_1_fu_148_p2;
wire   [0:0] or_ln27_fu_159_p2;
wire   [0:0] xor_ln27_fu_153_p2;
wire   [0:0] and_ln27_fu_165_p2;
wire   [0:0] or_ln27_1_fu_171_p2;
wire  signed [37:0] sext_ln37_fu_192_p1;
wire   [4:0] tmp_fu_204_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 i_3 = 4'd0;
#0 in_2 = 18'd0;
#0 init_3 = 1'd1;
#0 ch_2 = 1'd0;
#0 cnt = 2'd0;
end

imf2_c_1 #(
    .DataWidth( 18 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
c_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_1_address0),
    .ce0(c_1_ce0),
    .q0(c_1_q0)
);

imf2_shift_reg_p_1 #(
    .DataWidth( 38 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
shift_reg_p_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_p_1_address0),
    .ce0(shift_reg_p_1_ce0),
    .we0(shift_reg_p_1_we0),
    .d0(sum_reg_355),
    .q0(shift_reg_p_1_q0)
);

duc_mul_mul_18s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
duc_mul_mul_18s_1bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_1_load_reg_298),
    .din1(in_2),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln37_1_reg_360 <= add_ln37_1_fu_200_p2;
        sum_reg_355 <= sum_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_1_load_reg_298 <= c_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_330 == 1'd1) & (icmp_ln31_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ch_2 <= xor_ln33_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ch_2_load_reg_319 <= ch_2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_330 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        cnt <= add_ln35_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3 <= inc_3_fu_263_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_3_load_reg_282 <= i_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln27_reg_330 <= icmp_ln27_fu_143_p2;
        m_reg_340 <= grp_fu_275_p2;
        select_ln27_reg_335 <= select_ln27_fu_177_p3;
        trunc_ln37_1_reg_350 <= trunc_ln37_1_fu_188_p1;
        trunc_ln37_reg_345 <= trunc_ln37_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_2 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inc_reg_313 <= inc_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_330 == 1'd1) & (ch_2_load_reg_319 == 1'd1) & (icmp_ln31_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        init_3 <= 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_1_ce0 = 1'b1;
    end else begin
        c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_p_1_address0 = zext_ln29_fu_210_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_p_1_address0 = zext_ln27_1_fu_134_p1;
    end else begin
        shift_reg_p_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        shift_reg_p_1_ce0 = 1'b1;
    end else begin
        shift_reg_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_p_1_we0 = 1'b1;
    end else begin
        shift_reg_p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_242_p2 = (cnt + 2'd1);

assign add_ln37_1_fu_200_p2 = (trunc_ln37_1_reg_350 + trunc_ln37_reg_345);

assign and_ln27_fu_165_p2 = (xor_ln27_fu_153_p2 & or_ln27_fu_159_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return = {{add_ln37_1_reg_360[34:17]}};

assign c_1_address0 = zext_ln27_fu_102_p1;

assign icmp_ln22_fu_90_p2 = ((i_3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_148_p2 = ((i_3_load_reg_282 == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_143_p2 = ((i_3_load_reg_282 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_219_p2 = ((cnt == 2'd3) ? 1'b1 : 1'b0);

assign inc_3_fu_263_p3 = ((icmp_ln27_reg_330[0:0] === 1'b1) ? 4'd0 : inc_reg_313);

assign inc_fu_118_p2 = (4'd1 + i_3_load_reg_282);

assign or_ln27_1_fu_171_p2 = (init_3 | and_ln27_fu_165_p2);

assign or_ln27_fu_159_p2 = (icmp_ln27_fu_143_p2 | icmp_ln27_1_fu_148_p2);

assign select_ln27_fu_177_p3 = ((or_ln27_1_fu_171_p2[0:0] === 1'b1) ? 38'd0 : shift_reg_p_1_q0);

assign sext_ln37_fu_192_p1 = m_reg_340;

assign sum_fu_195_p2 = ($signed(sext_ln37_fu_192_p1) + $signed(select_ln27_reg_335));

assign tmp_6_fu_127_p3 = {{inc_reg_313}, {ch_2}};

assign tmp_fu_204_p3 = {{i_3_load_reg_282}, {ch_2_load_reg_319}};

assign trunc_ln37_1_fu_188_p1 = select_ln27_fu_177_p3[34:0];

assign trunc_ln37_fu_185_p1 = grp_fu_275_p2[34:0];

assign xor_ln27_fu_153_p2 = (init_3 ^ 1'd1);

assign xor_ln33_fu_231_p2 = (ch_2_load_reg_319 ^ 1'd1);

assign zext_ln27_1_fu_134_p1 = tmp_6_fu_127_p3;

assign zext_ln27_fu_102_p1 = i_3;

assign zext_ln29_fu_210_p1 = tmp_fu_204_p3;

endmodule //imf2
