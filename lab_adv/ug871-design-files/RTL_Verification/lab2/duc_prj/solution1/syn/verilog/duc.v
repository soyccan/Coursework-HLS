// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="duc,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=2.710000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.710000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=7,HLS_SYN_FF=1972,HLS_SYN_LUT=1608,HLS_VERSION=2019_2}" *)

module duc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_i,
        freq,
        dout_i,
        dout_i_ap_vld,
        dout_q,
        dout_q_ap_vld
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] din_i;
input  [15:0] freq;
output  [17:0] dout_i;
output   dout_i_ap_vld;
output  [17:0] dout_q;
output   dout_q_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i;
reg  signed [17:0] in_r;
wire   [5:0] c_address0;
reg    c_ce0;
wire   [17:0] c_q0;
reg   [0:0] init;
reg   [0:0] ch;
reg   [6:0] shift_reg_p_address0;
reg    shift_reg_p_ce0;
reg    shift_reg_p_we0;
wire   [37:0] shift_reg_p_q0;
reg   [4:0] i_4;
reg  signed [17:0] in_3;
wire   [4:0] c_2_address0;
reg    c_2_ce0;
wire   [17:0] c_2_q0;
reg   [0:0] init_4;
reg   [0:0] ch_3;
reg   [5:0] shift_reg_p_2_address0;
reg    shift_reg_p_2_ce0;
reg    shift_reg_p_2_we0;
wire   [37:0] shift_reg_p_2_q0;
reg   [0:0] cnt_1;
reg   [5:0] i_load_reg_643;
reg  signed [17:0] c_load_reg_659;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [5:0] inc_fu_305_p2;
reg   [5:0] inc_reg_674;
wire    ap_CS_fsm_state4;
reg   [0:0] ch_load_reg_680;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_fu_330_p2;
reg   [0:0] icmp_ln21_reg_691;
wire    ap_CS_fsm_state6;
wire   [37:0] select_ln21_fu_364_p3;
reg   [37:0] select_ln21_reg_696;
wire  signed [35:0] grp_fu_624_p2;
reg  signed [35:0] m_reg_701;
wire   [34:0] trunc_ln18_fu_372_p1;
reg   [34:0] trunc_ln18_reg_706;
wire   [34:0] trunc_ln18_1_fu_375_p1;
reg   [34:0] trunc_ln18_1_reg_711;
wire   [37:0] acc_1_fu_382_p2;
reg   [37:0] acc_1_reg_716;
wire    ap_CS_fsm_state7;
wire   [34:0] add_ln21_fu_387_p2;
reg   [34:0] add_ln21_reg_721;
reg   [4:0] i_4_load_reg_726;
wire    ap_CS_fsm_state8;
reg  signed [17:0] c_2_load_reg_742;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [4:0] inc_5_fu_472_p2;
reg   [4:0] inc_5_reg_757;
wire    ap_CS_fsm_state11;
reg   [0:0] ch_3_load_reg_763;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln28_fu_497_p2;
reg   [0:0] icmp_ln28_reg_774;
wire    ap_CS_fsm_state13;
wire   [37:0] select_ln28_fu_531_p3;
reg   [37:0] select_ln28_reg_779;
wire  signed [35:0] grp_fu_631_p2;
reg  signed [35:0] m_2_reg_784;
wire   [34:0] trunc_ln27_fu_539_p1;
reg   [34:0] trunc_ln27_reg_789;
wire   [34:0] trunc_ln27_1_fu_542_p1;
reg   [34:0] trunc_ln27_1_reg_794;
wire   [37:0] sum_fu_549_p2;
reg   [37:0] sum_reg_799;
wire    ap_CS_fsm_state14;
wire   [34:0] add_ln27_1_fu_554_p2;
reg   [34:0] add_ln27_1_reg_804;
reg   [17:0] imf1_o_reg_809;
wire    ap_CS_fsm_state15;
wire   [17:0] grp_imf2_fu_229_ap_return;
reg   [17:0] imf2_o_reg_814;
wire    ap_CS_fsm_state16;
wire    grp_imf2_fu_229_ap_ready;
wire    grp_imf2_fu_229_ap_done;
wire   [17:0] grp_imf3_fu_208_ap_return;
reg   [17:0] imf3_o_reg_819;
wire    ap_CS_fsm_state17;
wire    grp_imf3_fu_208_ap_ready;
wire    grp_imf3_fu_208_ap_done;
wire    grp_imf3_fu_208_ap_start;
wire    grp_imf3_fu_208_ap_idle;
wire    grp_imf2_fu_229_ap_start;
wire    grp_imf2_fu_229_ap_idle;
wire    grp_mixer_fu_249_ap_start;
wire    grp_mixer_fu_249_ap_done;
wire    grp_mixer_fu_249_ap_idle;
wire    grp_mixer_fu_249_ap_ready;
wire   [17:0] grp_mixer_fu_249_Dout_I;
wire    grp_mixer_fu_249_Dout_I_ap_vld;
wire   [17:0] grp_mixer_fu_249_Dout_Q;
wire    grp_mixer_fu_249_Dout_Q_ap_vld;
reg    grp_imf3_fu_208_ap_start_reg;
reg    grp_imf2_fu_229_ap_start_reg;
reg    grp_mixer_fu_249_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln21_fu_289_p1;
wire   [63:0] zext_ln21_1_fu_321_p1;
wire   [63:0] zext_ln23_fu_397_p1;
wire   [63:0] zext_ln28_fu_456_p1;
wire   [63:0] zext_ln28_1_fu_488_p1;
wire   [63:0] zext_ln30_fu_564_p1;
wire   [5:0] inc_4_fu_428_p3;
wire   [0:0] icmp_ln18_fu_277_p2;
wire   [0:0] xor_ln26_fu_408_p2;
wire   [4:0] inc_6_fu_612_p3;
wire   [0:0] icmp_ln22_fu_444_p2;
wire   [0:0] xor_ln33_fu_579_p2;
wire   [0:0] xor_ln34_fu_590_p2;
wire   [6:0] tmp_7_fu_314_p3;
wire   [0:0] icmp_ln21_1_fu_335_p2;
wire   [0:0] or_ln21_fu_346_p2;
wire   [0:0] xor_ln21_fu_340_p2;
wire   [0:0] and_ln21_fu_352_p2;
wire   [0:0] or_ln21_1_fu_358_p2;
wire  signed [37:0] sext_ln17_fu_379_p1;
wire   [6:0] tmp_fu_391_p3;
wire   [5:0] tmp_9_fu_481_p3;
wire   [0:0] icmp_ln28_1_fu_502_p2;
wire   [0:0] or_ln28_fu_513_p2;
wire   [0:0] xor_ln28_fu_507_p2;
wire   [0:0] and_ln28_fu_519_p2;
wire   [0:0] or_ln28_1_fu_525_p2;
wire  signed [37:0] sext_ln27_fu_546_p1;
wire   [5:0] tmp_8_fu_558_p3;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 i = 6'd0;
#0 in_r = 18'd0;
#0 init = 1'd1;
#0 ch = 1'd0;
#0 i_4 = 5'd0;
#0 in_3 = 18'd0;
#0 init_4 = 1'd1;
#0 ch_3 = 1'd0;
#0 cnt_1 = 1'd0;
#0 grp_imf3_fu_208_ap_start_reg = 1'b0;
#0 grp_imf2_fu_229_ap_start_reg = 1'b0;
#0 grp_mixer_fu_249_ap_start_reg = 1'b0;
end

duc_c #(
    .DataWidth( 18 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

duc_shift_reg_p #(
    .DataWidth( 38 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
shift_reg_p_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_p_address0),
    .ce0(shift_reg_p_ce0),
    .we0(shift_reg_p_we0),
    .d0(acc_1_reg_716),
    .q0(shift_reg_p_q0)
);

duc_c_2 #(
    .DataWidth( 18 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
c_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_2_address0),
    .ce0(c_2_ce0),
    .q0(c_2_q0)
);

duc_shift_reg_p_2 #(
    .DataWidth( 38 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
shift_reg_p_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_p_2_address0),
    .ce0(shift_reg_p_2_ce0),
    .we0(shift_reg_p_2_we0),
    .d0(sum_reg_799),
    .q0(shift_reg_p_2_q0)
);

imf3 grp_imf3_fu_208(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imf3_fu_208_ap_start),
    .ap_done(grp_imf3_fu_208_ap_done),
    .ap_idle(grp_imf3_fu_208_ap_idle),
    .ap_ready(grp_imf3_fu_208_ap_ready),
    .x(imf2_o_reg_814),
    .ap_return(grp_imf3_fu_208_ap_return)
);

imf2 grp_imf2_fu_229(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imf2_fu_229_ap_start),
    .ap_done(grp_imf2_fu_229_ap_done),
    .ap_idle(grp_imf2_fu_229_ap_idle),
    .ap_ready(grp_imf2_fu_229_ap_ready),
    .x(imf1_o_reg_809),
    .ap_return(grp_imf2_fu_229_ap_return)
);

mixer grp_mixer_fu_249(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mixer_fu_249_ap_start),
    .ap_done(grp_mixer_fu_249_ap_done),
    .ap_idle(grp_mixer_fu_249_ap_idle),
    .ap_ready(grp_mixer_fu_249_ap_ready),
    .freq(freq),
    .Din(imf3_o_reg_819),
    .Dout_I(grp_mixer_fu_249_Dout_I),
    .Dout_I_ap_vld(grp_mixer_fu_249_Dout_I_ap_vld),
    .Dout_Q(grp_mixer_fu_249_Dout_Q),
    .Dout_Q_ap_vld(grp_mixer_fu_249_Dout_Q_ap_vld)
);

duc_mul_mul_18s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
duc_mul_mul_18s_1bkb_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r),
    .din1(c_load_reg_659),
    .ce(1'b1),
    .dout(grp_fu_624_p2)
);

duc_mul_mul_18s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
duc_mul_mul_18s_1bkb_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_2_load_reg_742),
    .din1(in_3),
    .ce(1'b1),
    .dout(grp_fu_631_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_imf2_fu_229_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_imf2_fu_229_ap_start_reg <= 1'b1;
        end else if ((grp_imf2_fu_229_ap_ready == 1'b1)) begin
            grp_imf2_fu_229_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_imf3_fu_208_ap_start_reg <= 1'b0;
    end else begin
        if (((grp_imf2_fu_229_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
            grp_imf3_fu_208_ap_start_reg <= 1'b1;
        end else if ((grp_imf3_fu_208_ap_ready == 1'b1)) begin
            grp_imf3_fu_208_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mixer_fu_249_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            grp_mixer_fu_249_ap_start_reg <= 1'b1;
        end else if ((grp_mixer_fu_249_ap_ready == 1'b1)) begin
            grp_mixer_fu_249_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_1_reg_716 <= acc_1_fu_382_p2;
        add_ln21_reg_721 <= add_ln21_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln27_1_reg_804 <= add_ln27_1_fu_554_p2;
        sum_reg_799 <= sum_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_2_load_reg_742 <= c_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_load_reg_659 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_691 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ch <= xor_ln26_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ch_3 <= xor_ln33_fu_579_p2;
        cnt_1 <= xor_ln34_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ch_3_load_reg_763 <= ch_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ch_load_reg_680 <= ch;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i <= inc_4_fu_428_p3;
        i_4_load_reg_726 <= i_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_4 <= inc_6_fu_612_p3;
        imf1_o_reg_809 <= {{add_ln27_1_reg_804[34:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_load_reg_643 <= i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln21_reg_691 <= icmp_ln21_fu_330_p2;
        m_reg_701 <= grp_fu_624_p2;
        select_ln21_reg_696 <= select_ln21_fu_364_p3;
        trunc_ln18_1_reg_711 <= trunc_ln18_1_fu_375_p1;
        trunc_ln18_reg_706 <= trunc_ln18_fu_372_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln28_reg_774 <= icmp_ln28_fu_497_p2;
        m_2_reg_784 <= grp_fu_631_p2;
        select_ln28_reg_779 <= select_ln28_fu_531_p3;
        trunc_ln27_1_reg_794 <= trunc_ln27_1_fu_542_p1;
        trunc_ln27_reg_789 <= trunc_ln27_fu_539_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_imf2_fu_229_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        imf2_o_reg_814 <= grp_imf2_fu_229_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_imf3_fu_208_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        imf3_o_reg_819 <= grp_imf3_fu_208_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        in_3 <= {{add_ln21_reg_721[34:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_277_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_r <= din_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        inc_5_reg_757 <= inc_5_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inc_reg_674 <= inc_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_691 == 1'd1) & (ch_load_reg_680 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        init <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_774 == 1'd1) & (ch_3_load_reg_763 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        init_4 <= 1'd0;
    end
end

always @ (*) begin
    if (((grp_mixer_fu_249_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_mixer_fu_249_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_2_ce0 = 1'b1;
    end else begin
        c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        shift_reg_p_2_address0 = zext_ln30_fu_564_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        shift_reg_p_2_address0 = zext_ln28_1_fu_488_p1;
    end else begin
        shift_reg_p_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12))) begin
        shift_reg_p_2_ce0 = 1'b1;
    end else begin
        shift_reg_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        shift_reg_p_2_we0 = 1'b1;
    end else begin
        shift_reg_p_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_p_address0 = zext_ln23_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_p_address0 = zext_ln21_1_fu_321_p1;
    end else begin
        shift_reg_p_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        shift_reg_p_ce0 = 1'b1;
    end else begin
        shift_reg_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_p_we0 = 1'b1;
    end else begin
        shift_reg_p_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_imf2_fu_229_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((grp_imf3_fu_208_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_mixer_fu_249_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_382_p2 = ($signed(sext_ln17_fu_379_p1) + $signed(select_ln21_reg_696));

assign add_ln21_fu_387_p2 = (trunc_ln18_1_reg_711 + trunc_ln18_reg_706);

assign add_ln27_1_fu_554_p2 = (trunc_ln27_1_reg_794 + trunc_ln27_reg_789);

assign and_ln21_fu_352_p2 = (xor_ln21_fu_340_p2 & or_ln21_fu_346_p2);

assign and_ln28_fu_519_p2 = (xor_ln28_fu_507_p2 & or_ln28_fu_513_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_2_address0 = zext_ln28_fu_456_p1;

assign c_address0 = zext_ln21_fu_289_p1;

assign dout_i = grp_mixer_fu_249_Dout_I;

assign dout_i_ap_vld = grp_mixer_fu_249_Dout_I_ap_vld;

assign dout_q = grp_mixer_fu_249_Dout_Q;

assign dout_q_ap_vld = grp_mixer_fu_249_Dout_Q_ap_vld;

assign grp_imf2_fu_229_ap_start = grp_imf2_fu_229_ap_start_reg;

assign grp_imf3_fu_208_ap_start = grp_imf3_fu_208_ap_start_reg;

assign grp_mixer_fu_249_ap_start = grp_mixer_fu_249_ap_start_reg;

assign icmp_ln18_fu_277_p2 = ((i == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_335_p2 = ((i_load_reg_643 == 6'd23) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_330_p2 = ((i_load_reg_643 == 6'd47) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_444_p2 = ((i_4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_502_p2 = ((i_4_load_reg_726 == 5'd11) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_497_p2 = ((i_4_load_reg_726 == 5'd23) ? 1'b1 : 1'b0);

assign inc_4_fu_428_p3 = ((icmp_ln21_reg_691[0:0] === 1'b1) ? 6'd0 : inc_reg_674);

assign inc_5_fu_472_p2 = (5'd1 + i_4_load_reg_726);

assign inc_6_fu_612_p3 = ((icmp_ln28_reg_774[0:0] === 1'b1) ? 5'd0 : inc_5_reg_757);

assign inc_fu_305_p2 = (6'd1 + i_load_reg_643);

assign or_ln21_1_fu_358_p2 = (init | and_ln21_fu_352_p2);

assign or_ln21_fu_346_p2 = (icmp_ln21_fu_330_p2 | icmp_ln21_1_fu_335_p2);

assign or_ln28_1_fu_525_p2 = (init_4 | and_ln28_fu_519_p2);

assign or_ln28_fu_513_p2 = (icmp_ln28_fu_497_p2 | icmp_ln28_1_fu_502_p2);

assign select_ln21_fu_364_p3 = ((or_ln21_1_fu_358_p2[0:0] === 1'b1) ? 38'd0 : shift_reg_p_q0);

assign select_ln28_fu_531_p3 = ((or_ln28_1_fu_525_p2[0:0] === 1'b1) ? 38'd0 : shift_reg_p_2_q0);

assign sext_ln17_fu_379_p1 = m_reg_701;

assign sext_ln27_fu_546_p1 = m_2_reg_784;

assign sum_fu_549_p2 = ($signed(sext_ln27_fu_546_p1) + $signed(select_ln28_reg_779));

assign tmp_7_fu_314_p3 = {{inc_reg_674}, {ch}};

assign tmp_8_fu_558_p3 = {{i_4_load_reg_726}, {ch_3_load_reg_763}};

assign tmp_9_fu_481_p3 = {{inc_5_reg_757}, {ch_3}};

assign tmp_fu_391_p3 = {{i_load_reg_643}, {ch_load_reg_680}};

assign trunc_ln18_1_fu_375_p1 = select_ln21_fu_364_p3[34:0];

assign trunc_ln18_fu_372_p1 = grp_fu_624_p2[34:0];

assign trunc_ln27_1_fu_542_p1 = select_ln28_fu_531_p3[34:0];

assign trunc_ln27_fu_539_p1 = grp_fu_631_p2[34:0];

assign xor_ln21_fu_340_p2 = (init ^ 1'd1);

assign xor_ln26_fu_408_p2 = (ch_load_reg_680 ^ 1'd1);

assign xor_ln28_fu_507_p2 = (init_4 ^ 1'd1);

assign xor_ln33_fu_579_p2 = (cnt_1 ^ ch_3_load_reg_763);

assign xor_ln34_fu_590_p2 = (cnt_1 ^ 1'd1);

assign zext_ln21_1_fu_321_p1 = tmp_7_fu_314_p3;

assign zext_ln21_fu_289_p1 = i;

assign zext_ln23_fu_397_p1 = tmp_fu_391_p3;

assign zext_ln28_1_fu_488_p1 = tmp_9_fu_481_p3;

assign zext_ln28_fu_456_p1 = i_4;

assign zext_ln30_fu_564_p1 = tmp_8_fu_558_p3;

endmodule //duc
