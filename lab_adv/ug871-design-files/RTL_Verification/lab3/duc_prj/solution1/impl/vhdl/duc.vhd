-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity duc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_i : IN STD_LOGIC_VECTOR (17 downto 0);
    freq : IN STD_LOGIC_VECTOR (15 downto 0);
    dout_i : OUT STD_LOGIC_VECTOR (17 downto 0);
    dout_i_ap_vld : OUT STD_LOGIC;
    dout_q : OUT STD_LOGIC_VECTOR (17 downto 0);
    dout_q_ap_vld : OUT STD_LOGIC );
end;


architecture behav of duc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "duc,hls_ip_2019_1_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=2.710000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.519000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=7,HLS_SYN_FF=1578,HLS_SYN_LUT=1479,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal in_r : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal shift_reg_p_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_p_ce0 : STD_LOGIC;
    signal shift_reg_p_we0 : STD_LOGIC;
    signal shift_reg_p_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_4 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal in_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal c_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_2_ce0 : STD_LOGIC;
    signal c_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal init_4 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ch_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal shift_reg_p_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_p_2_ce0 : STD_LOGIC;
    signal shift_reg_p_2_we0 : STD_LOGIC;
    signal shift_reg_p_2_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal cnt_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal i_load_reg_647 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_load_reg_663 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal inc_fu_294_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal inc_reg_668 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ch_load_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_p_load_reg_694 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_628_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal m_reg_699 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln18_fu_327_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln18_reg_704 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln21_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal acc_1_fu_382_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal acc_1_reg_714 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln21_fu_388_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln21_reg_719 : STD_LOGIC_VECTOR (34 downto 0);
    signal i_4_load_reg_724 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal c_2_load_reg_740 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal inc_5_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal inc_5_reg_745 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ch_3_load_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_p_2_load_reg_771 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal m_2_reg_776 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln27_fu_496_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln27_reg_781 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln28_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sum_fu_551_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_reg_791 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln27_1_fu_557_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln27_1_reg_796 : STD_LOGIC_VECTOR (34 downto 0);
    signal imf1_o_reg_801 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_imf2_fu_253_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal imf2_o_reg_806 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_imf2_fu_253_ap_ready : STD_LOGIC;
    signal grp_imf2_fu_253_ap_done : STD_LOGIC;
    signal grp_imf3_fu_208_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal imf3_o_reg_811 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_imf3_fu_208_ap_ready : STD_LOGIC;
    signal grp_imf3_fu_208_ap_done : STD_LOGIC;
    signal grp_imf3_fu_208_ap_start : STD_LOGIC;
    signal grp_imf3_fu_208_ap_idle : STD_LOGIC;
    signal grp_mixer_fu_229_ap_start : STD_LOGIC;
    signal grp_mixer_fu_229_ap_done : STD_LOGIC;
    signal grp_mixer_fu_229_ap_idle : STD_LOGIC;
    signal grp_mixer_fu_229_ap_ready : STD_LOGIC;
    signal grp_mixer_fu_229_Dout_I : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_mixer_fu_229_Dout_I_ap_vld : STD_LOGIC;
    signal grp_mixer_fu_229_Dout_Q : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_mixer_fu_229_Dout_Q_ap_vld : STD_LOGIC;
    signal grp_imf2_fu_253_ap_start : STD_LOGIC;
    signal grp_imf2_fu_253_ap_idle : STD_LOGIC;
    signal grp_imf3_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal grp_mixer_fu_229_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_imf2_fu_253_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln21_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inc_4_fu_430_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inc_6_fu_616_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln22_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_307_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln21_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_368_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln17_fu_375_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln18_1_fu_378_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_fu_393_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_476_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln28_1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_537_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln27_fu_544_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln27_1_fu_547_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_8_fu_562_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component imf3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component mixer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        freq : IN STD_LOGIC_VECTOR (15 downto 0);
        Din : IN STD_LOGIC_VECTOR (17 downto 0);
        Dout_I : OUT STD_LOGIC_VECTOR (17 downto 0);
        Dout_I_ap_vld : OUT STD_LOGIC;
        Dout_Q : OUT STD_LOGIC_VECTOR (17 downto 0);
        Dout_Q_ap_vld : OUT STD_LOGIC );
    end component;


    component imf2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_mul_mul_18s_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component duc_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_shift_reg_p IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component duc_c_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component duc_shift_reg_p_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    c_U : component duc_c
    generic map (
        DataWidth => 18,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);

    shift_reg_p_U : component duc_shift_reg_p
    generic map (
        DataWidth => 38,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p_address0,
        ce0 => shift_reg_p_ce0,
        we0 => shift_reg_p_we0,
        d0 => acc_1_reg_714,
        q0 => shift_reg_p_q0);

    c_2_U : component duc_c_2
    generic map (
        DataWidth => 18,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_2_address0,
        ce0 => c_2_ce0,
        q0 => c_2_q0);

    shift_reg_p_2_U : component duc_shift_reg_p_2
    generic map (
        DataWidth => 38,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_p_2_address0,
        ce0 => shift_reg_p_2_ce0,
        we0 => shift_reg_p_2_we0,
        d0 => sum_reg_791,
        q0 => shift_reg_p_2_q0);

    grp_imf3_fu_208 : component imf3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_imf3_fu_208_ap_start,
        ap_done => grp_imf3_fu_208_ap_done,
        ap_idle => grp_imf3_fu_208_ap_idle,
        ap_ready => grp_imf3_fu_208_ap_ready,
        x => imf2_o_reg_806,
        ap_return => grp_imf3_fu_208_ap_return);

    grp_mixer_fu_229 : component mixer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mixer_fu_229_ap_start,
        ap_done => grp_mixer_fu_229_ap_done,
        ap_idle => grp_mixer_fu_229_ap_idle,
        ap_ready => grp_mixer_fu_229_ap_ready,
        freq => freq,
        Din => imf3_o_reg_811,
        Dout_I => grp_mixer_fu_229_Dout_I,
        Dout_I_ap_vld => grp_mixer_fu_229_Dout_I_ap_vld,
        Dout_Q => grp_mixer_fu_229_Dout_Q,
        Dout_Q_ap_vld => grp_mixer_fu_229_Dout_Q_ap_vld);

    grp_imf2_fu_253 : component imf2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_imf2_fu_253_ap_start,
        ap_done => grp_imf2_fu_253_ap_done,
        ap_idle => grp_imf2_fu_253_ap_idle,
        ap_ready => grp_imf2_fu_253_ap_ready,
        x => imf1_o_reg_801,
        ap_return => grp_imf2_fu_253_ap_return);

    duc_mul_mul_18s_1bkb_U23 : component duc_mul_mul_18s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r,
        din1 => c_load_reg_663,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p2);

    duc_mul_mul_18s_1bkb_U24 : component duc_mul_mul_18s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => c_2_load_reg_740,
        din1 => in_3,
        ce => ap_const_logic_1,
        dout => grp_fu_635_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_imf2_fu_253_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_imf2_fu_253_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_imf2_fu_253_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_imf2_fu_253_ap_ready = ap_const_logic_1)) then 
                    grp_imf2_fu_253_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_imf3_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_imf3_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_imf2_fu_253_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    grp_imf3_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_imf3_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_imf3_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mixer_fu_229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mixer_fu_229_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_mixer_fu_229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mixer_fu_229_ap_ready = ap_const_logic_1)) then 
                    grp_mixer_fu_229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                acc_1_reg_714 <= acc_1_fu_382_p2;
                add_ln21_reg_719 <= add_ln21_fu_388_p2;
                icmp_ln21_reg_709 <= icmp_ln21_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln27_1_reg_796 <= add_ln27_1_fu_557_p2;
                icmp_ln28_reg_786 <= icmp_ln28_fu_503_p2;
                sum_reg_791 <= sum_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_2_load_reg_740 <= c_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_load_reg_663 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_709 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                ch <= xor_ln26_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_786 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                ch_3 <= xor_ln33_fu_583_p2;
                cnt_1 <= xor_ln34_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ch_3_load_reg_750 <= ch_3;
                inc_5_reg_745 <= inc_5_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ch_load_reg_673 <= ch;
                inc_reg_668 <= inc_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i <= inc_4_fu_430_p3;
                i_4_load_reg_724 <= i_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_4 <= inc_6_fu_616_p3;
                imf1_o_reg_801 <= add_ln27_1_reg_796(34 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_load_reg_647 <= i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_imf2_fu_253_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                imf2_o_reg_806 <= grp_imf2_fu_253_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_imf3_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                imf3_o_reg_811 <= grp_imf3_fu_208_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                in_3 <= add_ln21_reg_719(34 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_277_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in_r <= din_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_709 = ap_const_lv1_1) and (ch_load_reg_673 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                init <= ap_const_lv1_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_786 = ap_const_lv1_1) and (ch_3_load_reg_750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                init_4 <= ap_const_lv1_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_2_reg_776 <= grp_fu_635_p2;
                shift_reg_p_2_load_reg_771 <= shift_reg_p_2_q0;
                trunc_ln27_reg_781 <= trunc_ln27_fu_496_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_reg_699 <= grp_fu_628_p2;
                shift_reg_p_load_reg_694 <= shift_reg_p_q0;
                trunc_ln18_reg_704 <= trunc_ln18_fu_327_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, grp_imf2_fu_253_ap_done, ap_CS_fsm_state13, grp_imf3_fu_208_ap_done, grp_mixer_fu_229_ap_done, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_imf2_fu_253_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((grp_imf3_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_mixer_fu_229_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_1_fu_382_p2 <= std_logic_vector(signed(sext_ln17_fu_375_p1) + signed(select_ln21_fu_368_p3));
    add_ln21_fu_388_p2 <= std_logic_vector(unsigned(trunc_ln18_1_fu_378_p1) + unsigned(trunc_ln18_reg_704));
    add_ln27_1_fu_557_p2 <= std_logic_vector(unsigned(trunc_ln27_1_fu_547_p1) + unsigned(trunc_ln27_reg_781));
    and_ln21_fu_356_p2 <= (xor_ln21_fu_344_p2 and or_ln21_fu_350_p2);
    and_ln28_fu_525_p2 <= (xor_ln28_fu_513_p2 and or_ln28_fu_519_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_mixer_fu_229_ap_done, ap_CS_fsm_state15)
    begin
        if (((grp_mixer_fu_229_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_mixer_fu_229_ap_done, ap_CS_fsm_state15)
    begin
        if (((grp_mixer_fu_229_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_2_address0 <= zext_ln28_fu_458_p1(5 - 1 downto 0);

    c_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_2_ce0 <= ap_const_logic_1;
        else 
            c_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln21_fu_289_p1(6 - 1 downto 0);

    c_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dout_i <= grp_mixer_fu_229_Dout_I;
    dout_i_ap_vld <= grp_mixer_fu_229_Dout_I_ap_vld;
    dout_q <= grp_mixer_fu_229_Dout_Q;
    dout_q_ap_vld <= grp_mixer_fu_229_Dout_Q_ap_vld;
    grp_imf2_fu_253_ap_start <= grp_imf2_fu_253_ap_start_reg;
    grp_imf3_fu_208_ap_start <= grp_imf3_fu_208_ap_start_reg;
    grp_mixer_fu_229_ap_start <= grp_mixer_fu_229_ap_start_reg;
    icmp_ln18_fu_277_p2 <= "1" when (i = ap_const_lv6_0) else "0";
    icmp_ln21_1_fu_339_p2 <= "1" when (i_load_reg_647 = ap_const_lv6_17) else "0";
    icmp_ln21_fu_334_p2 <= "1" when (i_load_reg_647 = ap_const_lv6_2F) else "0";
    icmp_ln22_fu_446_p2 <= "1" when (i_4 = ap_const_lv5_0) else "0";
    icmp_ln28_1_fu_508_p2 <= "1" when (i_4_load_reg_724 = ap_const_lv5_B) else "0";
    icmp_ln28_fu_503_p2 <= "1" when (i_4_load_reg_724 = ap_const_lv5_17) else "0";
    inc_4_fu_430_p3 <= 
        ap_const_lv6_0 when (icmp_ln21_reg_709(0) = '1') else 
        inc_reg_668;
    inc_5_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_4_load_reg_724));
    inc_6_fu_616_p3 <= 
        ap_const_lv5_0 when (icmp_ln28_reg_786(0) = '1') else 
        inc_5_reg_745;
    inc_fu_294_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_load_reg_647));
    or_ln21_1_fu_362_p2 <= (init or and_ln21_fu_356_p2);
    or_ln21_fu_350_p2 <= (icmp_ln21_fu_334_p2 or icmp_ln21_1_fu_339_p2);
    or_ln28_1_fu_531_p2 <= (init_4 or and_ln28_fu_525_p2);
    or_ln28_fu_519_p2 <= (icmp_ln28_fu_503_p2 or icmp_ln28_1_fu_508_p2);
    select_ln21_fu_368_p3 <= 
        ap_const_lv38_0 when (or_ln21_1_fu_362_p2(0) = '1') else 
        shift_reg_p_load_reg_694;
    select_ln28_fu_537_p3 <= 
        ap_const_lv38_0 when (or_ln28_1_fu_531_p2(0) = '1') else 
        shift_reg_p_2_load_reg_771;
        sext_ln17_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_reg_699),38));

        sext_ln27_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_2_reg_776),38));


    shift_reg_p_2_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, zext_ln28_1_fu_484_p1, zext_ln30_fu_568_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            shift_reg_p_2_address0 <= zext_ln30_fu_568_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_p_2_address0 <= zext_ln28_1_fu_484_p1(6 - 1 downto 0);
        else 
            shift_reg_p_2_address0 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_p_2_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            shift_reg_p_2_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p_2_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            shift_reg_p_2_we0 <= ap_const_logic_1;
        else 
            shift_reg_p_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln21_1_fu_315_p1, zext_ln23_fu_399_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_p_address0 <= zext_ln23_fu_399_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_p_address0 <= zext_ln21_1_fu_315_p1(7 - 1 downto 0);
        else 
            shift_reg_p_address0 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_p_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            shift_reg_p_ce0 <= ap_const_logic_1;
        else 
            shift_reg_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_p_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_p_we0 <= ap_const_logic_1;
        else 
            shift_reg_p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_551_p2 <= std_logic_vector(signed(sext_ln27_fu_544_p1) + signed(select_ln28_fu_537_p3));
    tmp_7_fu_307_p3 <= (inc_fu_294_p2 & ch);
    tmp_8_fu_562_p3 <= (i_4_load_reg_724 & ch_3_load_reg_750);
    tmp_9_fu_476_p3 <= (inc_5_fu_463_p2 & ch_3);
    tmp_fu_393_p3 <= (i_load_reg_647 & ch_load_reg_673);
    trunc_ln18_1_fu_378_p1 <= select_ln21_fu_368_p3(35 - 1 downto 0);
    trunc_ln18_fu_327_p1 <= grp_fu_628_p2(35 - 1 downto 0);
    trunc_ln27_1_fu_547_p1 <= select_ln28_fu_537_p3(35 - 1 downto 0);
    trunc_ln27_fu_496_p1 <= grp_fu_635_p2(35 - 1 downto 0);
    xor_ln21_fu_344_p2 <= (init xor ap_const_lv1_1);
    xor_ln26_fu_410_p2 <= (ch_load_reg_673 xor ap_const_lv1_1);
    xor_ln28_fu_513_p2 <= (init_4 xor ap_const_lv1_1);
    xor_ln33_fu_583_p2 <= (cnt_1 xor ch_3_load_reg_750);
    xor_ln34_fu_594_p2 <= (cnt_1 xor ap_const_lv1_1);
    zext_ln21_1_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_307_p3),64));
    zext_ln21_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),64));
    zext_ln23_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_393_p3),64));
    zext_ln28_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_476_p3),64));
    zext_ln28_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4),64));
    zext_ln30_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_562_p3),64));
end behav;
