// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "imf2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic imf2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic imf2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> imf2::ap_ST_fsm_state1 = "1";
const sc_lv<5> imf2::ap_ST_fsm_state2 = "10";
const sc_lv<5> imf2::ap_ST_fsm_state3 = "100";
const sc_lv<5> imf2::ap_ST_fsm_state4 = "1000";
const sc_lv<5> imf2::ap_ST_fsm_state5 = "10000";
const sc_lv<32> imf2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> imf2::ap_const_lv4_0 = "0000";
const sc_lv<18> imf2::ap_const_lv18_0 = "000000000000000000";
const sc_lv<1> imf2::ap_const_lv1_1 = "1";
const sc_lv<1> imf2::ap_const_lv1_0 = "0";
const sc_lv<32> imf2::ap_const_lv32_1 = "1";
const sc_lv<32> imf2::ap_const_lv32_2 = "10";
const sc_lv<32> imf2::ap_const_lv32_3 = "11";
const sc_lv<32> imf2::ap_const_lv32_4 = "100";
const sc_lv<4> imf2::ap_const_lv4_1 = "1";
const sc_lv<4> imf2::ap_const_lv4_B = "1011";
const sc_lv<4> imf2::ap_const_lv4_5 = "101";
const sc_lv<38> imf2::ap_const_lv38_0 = "00000000000000000000000000000000000000";
const sc_lv<2> imf2::ap_const_lv2_3 = "11";
const sc_lv<2> imf2::ap_const_lv2_1 = "1";
const sc_lv<32> imf2::ap_const_lv32_11 = "10001";
const sc_lv<32> imf2::ap_const_lv32_22 = "100010";
const bool imf2::ap_const_boolean_1 = true;

imf2::imf2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    c_1_U = new imf2_c_1("c_1_U");
    c_1_U->clk(ap_clk);
    c_1_U->reset(ap_rst);
    c_1_U->address0(c_1_address0);
    c_1_U->ce0(c_1_ce0);
    c_1_U->q0(c_1_q0);
    shift_reg_p_1_U = new imf2_shift_reg_p_1("shift_reg_p_1_U");
    shift_reg_p_1_U->clk(ap_clk);
    shift_reg_p_1_U->reset(ap_rst);
    shift_reg_p_1_U->address0(shift_reg_p_1_address0);
    shift_reg_p_1_U->ce0(shift_reg_p_1_ce0);
    shift_reg_p_1_U->we0(shift_reg_p_1_we0);
    shift_reg_p_1_U->d0(shift_reg_p_1_d0);
    shift_reg_p_1_U->q0(shift_reg_p_1_q0);
    duc_mul_mul_18s_1bkb_U1 = new duc_mul_mul_18s_1bkb<1,2,18,18,36>("duc_mul_mul_18s_1bkb_U1");
    duc_mul_mul_18s_1bkb_U1->clk(ap_clk);
    duc_mul_mul_18s_1bkb_U1->reset(ap_rst);
    duc_mul_mul_18s_1bkb_U1->din0(c_1_load_reg_300);
    duc_mul_mul_18s_1bkb_U1->din1(in_2);
    duc_mul_mul_18s_1bkb_U1->ce(ap_var_for_const0);
    duc_mul_mul_18s_1bkb_U1->dout(grp_fu_277_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln35_fu_243_p2);
    sensitive << ( cnt );

    SC_METHOD(thread_add_ln37_1_fu_211_p2);
    sensitive << ( trunc_ln37_reg_352 );
    sensitive << ( trunc_ln37_1_fu_200_p1 );

    SC_METHOD(thread_and_ln27_fu_178_p2);
    sensitive << ( or_ln27_fu_174_p2 );
    sensitive << ( xor_ln27_fu_168_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( add_ln37_1_fu_211_p2 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_c_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln27_fu_102_p1 );

    SC_METHOD(thread_c_1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln22_fu_90_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i_3 );

    SC_METHOD(thread_icmp_ln27_1_fu_145_p2);
    sensitive << ( i_3_load_reg_284 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln27_fu_140_p2);
    sensitive << ( i_3_load_reg_284 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln31_fu_220_p2);
    sensitive << ( cnt );
    sensitive << ( icmp_ln27_reg_336 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_inc_3_fu_265_p3);
    sensitive << ( inc_reg_305 );
    sensitive << ( icmp_ln27_reg_336 );

    SC_METHOD(thread_inc_fu_107_p2);
    sensitive << ( i_3_load_reg_284 );

    SC_METHOD(thread_or_ln27_1_fu_184_p2);
    sensitive << ( init_3 );
    sensitive << ( and_ln27_fu_178_p2 );

    SC_METHOD(thread_or_ln27_fu_174_p2);
    sensitive << ( icmp_ln27_reg_336 );
    sensitive << ( icmp_ln27_1_reg_342 );

    SC_METHOD(thread_select_ln27_fu_190_p3);
    sensitive << ( shift_reg_p_1_load_reg_331 );
    sensitive << ( or_ln27_1_fu_184_p2 );

    SC_METHOD(thread_sext_ln37_fu_197_p1);
    sensitive << ( m_reg_347 );

    SC_METHOD(thread_shift_reg_p_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln27_1_fu_128_p1 );
    sensitive << ( zext_ln29_fu_163_p1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_shift_reg_p_1_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_shift_reg_p_1_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( select_ln27_fu_190_p3 );
    sensitive << ( sext_ln37_fu_197_p1 );

    SC_METHOD(thread_shift_reg_p_1_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_6_fu_120_p3);
    sensitive << ( ch_2 );
    sensitive << ( inc_fu_107_p2 );

    SC_METHOD(thread_tmp_fu_157_p3);
    sensitive << ( i_3_load_reg_284 );
    sensitive << ( ch_2_load_reg_310 );

    SC_METHOD(thread_trunc_ln37_1_fu_200_p1);
    sensitive << ( select_ln27_fu_190_p3 );

    SC_METHOD(thread_trunc_ln37_fu_150_p1);
    sensitive << ( grp_fu_277_p2 );

    SC_METHOD(thread_xor_ln27_fu_168_p2);
    sensitive << ( init_3 );

    SC_METHOD(thread_xor_ln33_fu_232_p2);
    sensitive << ( ch_2_load_reg_310 );

    SC_METHOD(thread_zext_ln27_1_fu_128_p1);
    sensitive << ( tmp_6_fu_120_p3 );

    SC_METHOD(thread_zext_ln27_fu_102_p1);
    sensitive << ( i_3 );

    SC_METHOD(thread_zext_ln29_fu_163_p1);
    sensitive << ( tmp_fu_157_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    i_3 = "0000";
    in_2 = "000000000000000000";
    init_3 = "1";
    ch_2 = "0";
    cnt = "00";
    ap_return_preg = "000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "imf2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_3, "i_3");
    sc_trace(mVcdFile, in_2, "in_2");
    sc_trace(mVcdFile, c_1_address0, "c_1_address0");
    sc_trace(mVcdFile, c_1_ce0, "c_1_ce0");
    sc_trace(mVcdFile, c_1_q0, "c_1_q0");
    sc_trace(mVcdFile, init_3, "init_3");
    sc_trace(mVcdFile, ch_2, "ch_2");
    sc_trace(mVcdFile, shift_reg_p_1_address0, "shift_reg_p_1_address0");
    sc_trace(mVcdFile, shift_reg_p_1_ce0, "shift_reg_p_1_ce0");
    sc_trace(mVcdFile, shift_reg_p_1_we0, "shift_reg_p_1_we0");
    sc_trace(mVcdFile, shift_reg_p_1_d0, "shift_reg_p_1_d0");
    sc_trace(mVcdFile, shift_reg_p_1_q0, "shift_reg_p_1_q0");
    sc_trace(mVcdFile, cnt, "cnt");
    sc_trace(mVcdFile, i_3_load_reg_284, "i_3_load_reg_284");
    sc_trace(mVcdFile, c_1_load_reg_300, "c_1_load_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, inc_fu_107_p2, "inc_fu_107_p2");
    sc_trace(mVcdFile, inc_reg_305, "inc_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ch_2_load_reg_310, "ch_2_load_reg_310");
    sc_trace(mVcdFile, shift_reg_p_1_load_reg_331, "shift_reg_p_1_load_reg_331");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln27_fu_140_p2, "icmp_ln27_fu_140_p2");
    sc_trace(mVcdFile, icmp_ln27_reg_336, "icmp_ln27_reg_336");
    sc_trace(mVcdFile, icmp_ln27_1_fu_145_p2, "icmp_ln27_1_fu_145_p2");
    sc_trace(mVcdFile, icmp_ln27_1_reg_342, "icmp_ln27_1_reg_342");
    sc_trace(mVcdFile, grp_fu_277_p2, "grp_fu_277_p2");
    sc_trace(mVcdFile, m_reg_347, "m_reg_347");
    sc_trace(mVcdFile, trunc_ln37_fu_150_p1, "trunc_ln37_fu_150_p1");
    sc_trace(mVcdFile, trunc_ln37_reg_352, "trunc_ln37_reg_352");
    sc_trace(mVcdFile, zext_ln27_fu_102_p1, "zext_ln27_fu_102_p1");
    sc_trace(mVcdFile, zext_ln27_1_fu_128_p1, "zext_ln27_1_fu_128_p1");
    sc_trace(mVcdFile, zext_ln29_fu_163_p1, "zext_ln29_fu_163_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, inc_3_fu_265_p3, "inc_3_fu_265_p3");
    sc_trace(mVcdFile, icmp_ln22_fu_90_p2, "icmp_ln22_fu_90_p2");
    sc_trace(mVcdFile, icmp_ln31_fu_220_p2, "icmp_ln31_fu_220_p2");
    sc_trace(mVcdFile, xor_ln33_fu_232_p2, "xor_ln33_fu_232_p2");
    sc_trace(mVcdFile, add_ln35_fu_243_p2, "add_ln35_fu_243_p2");
    sc_trace(mVcdFile, tmp_6_fu_120_p3, "tmp_6_fu_120_p3");
    sc_trace(mVcdFile, tmp_fu_157_p3, "tmp_fu_157_p3");
    sc_trace(mVcdFile, or_ln27_fu_174_p2, "or_ln27_fu_174_p2");
    sc_trace(mVcdFile, xor_ln27_fu_168_p2, "xor_ln27_fu_168_p2");
    sc_trace(mVcdFile, and_ln27_fu_178_p2, "and_ln27_fu_178_p2");
    sc_trace(mVcdFile, or_ln27_1_fu_184_p2, "or_ln27_1_fu_184_p2");
    sc_trace(mVcdFile, select_ln27_fu_190_p3, "select_ln27_fu_190_p3");
    sc_trace(mVcdFile, sext_ln37_fu_197_p1, "sext_ln37_fu_197_p1");
    sc_trace(mVcdFile, trunc_ln37_1_fu_200_p1, "trunc_ln37_1_fu_200_p1");
    sc_trace(mVcdFile, add_ln37_1_fu_211_p2, "add_ln37_1_fu_211_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

imf2::~imf2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete c_1_U;
    delete shift_reg_p_1_U;
    delete duc_mul_mul_18s_1bkb_U1;
}

void imf2::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void imf2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv18_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_return_preg = add_ln37_1_fu_211_p2.read().range(34, 17);
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_1_load_reg_300 = c_1_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_reg_336.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_220_p2.read()))) {
        ch_2 = xor_ln33_fu_232_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ch_2_load_reg_310 = ch_2.read();
        inc_reg_305 = inc_fu_107_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_reg_336.read()))) {
        cnt = add_ln35_fu_243_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_3 = inc_3_fu_265_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_3_load_reg_284 = i_3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        icmp_ln27_1_reg_342 = icmp_ln27_1_fu_145_p2.read();
        icmp_ln27_reg_336 = icmp_ln27_fu_140_p2.read();
        m_reg_347 = grp_fu_277_p2.read();
        shift_reg_p_1_load_reg_331 = shift_reg_p_1_q0.read();
        trunc_ln37_reg_352 = trunc_ln37_fu_150_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln22_fu_90_p2.read()))) {
        in_2 = x.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_reg_336.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_220_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ch_2_load_reg_310.read()))) {
        init_3 = ap_const_lv1_0;
    }
}

void imf2::thread_add_ln35_fu_243_p2() {
    add_ln35_fu_243_p2 = (!cnt.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(cnt.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void imf2::thread_add_ln37_1_fu_211_p2() {
    add_ln37_1_fu_211_p2 = (!trunc_ln37_1_fu_200_p1.read().is_01() || !trunc_ln37_reg_352.read().is_01())? sc_lv<35>(): (sc_biguint<35>(trunc_ln37_1_fu_200_p1.read()) + sc_biguint<35>(trunc_ln37_reg_352.read()));
}

void imf2::thread_and_ln27_fu_178_p2() {
    and_ln27_fu_178_p2 = (or_ln27_fu_174_p2.read() & xor_ln27_fu_168_p2.read());
}

void imf2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void imf2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void imf2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void imf2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void imf2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void imf2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void imf2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void imf2::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void imf2::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_return = add_ln37_1_fu_211_p2.read().range(34, 17);
    } else {
        ap_return = ap_return_preg.read();
    }
}

void imf2::thread_c_1_address0() {
    c_1_address0 =  (sc_lv<4>) (zext_ln27_fu_102_p1.read());
}

void imf2::thread_c_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_1_ce0 = ap_const_logic_1;
    } else {
        c_1_ce0 = ap_const_logic_0;
    }
}

void imf2::thread_icmp_ln22_fu_90_p2() {
    icmp_ln22_fu_90_p2 = (!i_3.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_3.read() == ap_const_lv4_0);
}

void imf2::thread_icmp_ln27_1_fu_145_p2() {
    icmp_ln27_1_fu_145_p2 = (!i_3_load_reg_284.read().is_01() || !ap_const_lv4_5.is_01())? sc_lv<1>(): sc_lv<1>(i_3_load_reg_284.read() == ap_const_lv4_5);
}

void imf2::thread_icmp_ln27_fu_140_p2() {
    icmp_ln27_fu_140_p2 = (!i_3_load_reg_284.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(i_3_load_reg_284.read() == ap_const_lv4_B);
}

void imf2::thread_icmp_ln31_fu_220_p2() {
    icmp_ln31_fu_220_p2 = (!cnt.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(cnt.read() == ap_const_lv2_3);
}

void imf2::thread_inc_3_fu_265_p3() {
    inc_3_fu_265_p3 = (!icmp_ln27_reg_336.read()[0].is_01())? sc_lv<4>(): ((icmp_ln27_reg_336.read()[0].to_bool())? ap_const_lv4_0: inc_reg_305.read());
}

void imf2::thread_inc_fu_107_p2() {
    inc_fu_107_p2 = (!ap_const_lv4_1.is_01() || !i_3_load_reg_284.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_biguint<4>(i_3_load_reg_284.read()));
}

void imf2::thread_or_ln27_1_fu_184_p2() {
    or_ln27_1_fu_184_p2 = (and_ln27_fu_178_p2.read() | init_3.read());
}

void imf2::thread_or_ln27_fu_174_p2() {
    or_ln27_fu_174_p2 = (icmp_ln27_reg_336.read() | icmp_ln27_1_reg_342.read());
}

void imf2::thread_select_ln27_fu_190_p3() {
    select_ln27_fu_190_p3 = (!or_ln27_1_fu_184_p2.read()[0].is_01())? sc_lv<38>(): ((or_ln27_1_fu_184_p2.read()[0].to_bool())? ap_const_lv38_0: shift_reg_p_1_load_reg_331.read());
}

void imf2::thread_sext_ln37_fu_197_p1() {
    sext_ln37_fu_197_p1 = esl_sext<38,36>(m_reg_347.read());
}

void imf2::thread_shift_reg_p_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        shift_reg_p_1_address0 =  (sc_lv<5>) (zext_ln29_fu_163_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_p_1_address0 =  (sc_lv<5>) (zext_ln27_1_fu_128_p1.read());
    } else {
        shift_reg_p_1_address0 = "XXXXX";
    }
}

void imf2::thread_shift_reg_p_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        shift_reg_p_1_ce0 = ap_const_logic_1;
    } else {
        shift_reg_p_1_ce0 = ap_const_logic_0;
    }
}

void imf2::thread_shift_reg_p_1_d0() {
    shift_reg_p_1_d0 = (!sext_ln37_fu_197_p1.read().is_01() || !select_ln27_fu_190_p3.read().is_01())? sc_lv<38>(): (sc_bigint<38>(sext_ln37_fu_197_p1.read()) + sc_biguint<38>(select_ln27_fu_190_p3.read()));
}

void imf2::thread_shift_reg_p_1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        shift_reg_p_1_we0 = ap_const_logic_1;
    } else {
        shift_reg_p_1_we0 = ap_const_logic_0;
    }
}

void imf2::thread_tmp_6_fu_120_p3() {
    tmp_6_fu_120_p3 = esl_concat<4,1>(inc_fu_107_p2.read(), ch_2.read());
}

void imf2::thread_tmp_fu_157_p3() {
    tmp_fu_157_p3 = esl_concat<4,1>(i_3_load_reg_284.read(), ch_2_load_reg_310.read());
}

void imf2::thread_trunc_ln37_1_fu_200_p1() {
    trunc_ln37_1_fu_200_p1 = select_ln27_fu_190_p3.read().range(35-1, 0);
}

void imf2::thread_trunc_ln37_fu_150_p1() {
    trunc_ln37_fu_150_p1 = grp_fu_277_p2.read().range(35-1, 0);
}

void imf2::thread_xor_ln27_fu_168_p2() {
    xor_ln27_fu_168_p2 = (init_3.read() ^ ap_const_lv1_1);
}

void imf2::thread_xor_ln33_fu_232_p2() {
    xor_ln33_fu_232_p2 = (ch_2_load_reg_310.read() ^ ap_const_lv1_1);
}

void imf2::thread_zext_ln27_1_fu_128_p1() {
    zext_ln27_1_fu_128_p1 = esl_zext<64,5>(tmp_6_fu_120_p3.read());
}

void imf2::thread_zext_ln27_fu_102_p1() {
    zext_ln27_fu_102_p1 = esl_zext<64,4>(i_3.read());
}

void imf2::thread_zext_ln29_fu_163_p1() {
    zext_ln29_fu_163_p1 = esl_zext<64,5>(tmp_fu_157_p3.read());
}

void imf2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

