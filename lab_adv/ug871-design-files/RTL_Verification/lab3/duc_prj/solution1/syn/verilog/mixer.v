// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mixer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        freq,
        Din,
        Dout_I,
        Dout_I_ap_vld,
        Dout_Q,
        Dout_Q_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] freq;
input  [17:0] Din;
output  [17:0] Dout_I;
output   Dout_I_ap_vld;
output  [17:0] Dout_Q;
output   Dout_Q_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Dout_I_ap_vld;
reg Dout_Q_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i_1;
reg   [0:0] init_1;
reg   [0:0] ch_1;
reg   [3:0] index;
reg   [3:0] DI_cache_address0;
reg    DI_cache_ce0;
reg    DI_cache_we0;
wire   [17:0] DI_cache_q0;
reg   [15:0] acc;
wire   [4:0] dds_table_address0;
reg    dds_table_ce0;
wire   [15:0] dds_table_q0;
wire   [4:0] dds_table_address1;
reg    dds_table_ce1;
wire   [15:0] dds_table_q1;
reg   [2:0] i_1_load_reg_372;
wire   [2:0] inc_fu_145_p2;
reg   [2:0] inc_reg_377;
wire   [0:0] valid_in_fu_161_p2;
reg   [0:0] valid_in_reg_382;
reg   [0:0] ch_1_load_reg_386;
wire   [0:0] and_ln45_fu_183_p2;
reg   [0:0] and_ln45_reg_391;
reg   [3:0] index_load_reg_395;
reg   [4:0] phase1_reg_403;
wire    ap_CS_fsm_state2;
reg  signed [15:0] sine_reg_419;
wire    ap_CS_fsm_state3;
reg  signed [15:0] cosine_reg_425;
wire    ap_CS_fsm_state4;
wire  signed [31:0] grp_fu_340_p3;
reg  signed [31:0] mul_ln4_reg_441;
wire    ap_CS_fsm_state5;
wire  signed [31:0] grp_fu_348_p4;
reg  signed [31:0] add_ln59_reg_457;
wire    ap_CS_fsm_state6;
wire  signed [31:0] grp_fu_357_p4;
reg  signed [31:0] add_ln60_reg_462;
wire   [63:0] zext_ln46_fu_219_p1;
wire   [63:0] zext_ln26_fu_224_p1;
wire   [63:0] zext_ln33_fu_233_p1;
wire   [63:0] zext_ln50_fu_238_p1;
wire   [2:0] inc_1_fu_327_p3;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln62_fu_284_p2;
wire   [0:0] xor_ln68_fu_300_p2;
wire   [0:0] icmp_ln68_fu_295_p2;
wire   [3:0] add_ln69_fu_311_p2;
wire   [15:0] add_ln12_fu_197_p2;
wire   [1:0] tmp_3_fu_151_p4;
wire   [15:0] freq_dds_fu_171_p3;
wire   [4:0] phase2_fu_228_p2;
wire  signed [17:0] sext_ln7_3_fu_255_p0;
wire   [0:0] icmp_ln70_fu_322_p2;
wire  signed [17:0] grp_fu_348_p0;
wire  signed [18:0] sext_ln7_2_fu_251_p1;
wire  signed [17:0] grp_fu_348_p1;
wire  signed [18:0] sext_ln7_3_fu_255_p1;
wire  signed [17:0] grp_fu_357_p0;
wire  signed [17:0] grp_fu_357_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 i_1 = 3'd0;
#0 init_1 = 1'd1;
#0 ch_1 = 1'd1;
#0 index = 4'd0;
#0 acc = 16'd0;
end

mixer_DI_cache #(
    .DataWidth( 18 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
DI_cache_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(DI_cache_address0),
    .ce0(DI_cache_ce0),
    .we0(DI_cache_we0),
    .d0(Din),
    .q0(DI_cache_q0)
);

mixer_dds_table #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
dds_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dds_table_address0),
    .ce0(dds_table_ce0),
    .q0(dds_table_q0),
    .address1(dds_table_address1),
    .ce1(dds_table_ce1),
    .q1(dds_table_q1)
);

duc_am_submul_16scud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
duc_am_submul_16scud_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sine_reg_419),
    .din1(cosine_reg_425),
    .din2(Din),
    .ce(1'b1),
    .dout(grp_fu_340_p3)
);

duc_ama_submuladddEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
duc_ama_submuladddEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .din1(grp_fu_348_p1),
    .din2(sine_reg_419),
    .din3(mul_ln4_reg_441),
    .ce(1'b1),
    .dout(grp_fu_348_p4)
);

duc_ama_addmuladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
duc_ama_addmuladdeOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_357_p0),
    .din1(grp_fu_357_p1),
    .din2(cosine_reg_425),
    .din3(mul_ln4_reg_441),
    .ce(1'b1),
    .dout(grp_fu_357_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln45_fu_183_p2) & (valid_in_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc <= add_ln12_fu_197_p2;
        phase1_reg_403 <= {{add_ln12_fu_197_p2[15:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln59_reg_457 <= grp_fu_348_p4;
        add_ln60_reg_462 <= grp_fu_357_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        and_ln45_reg_391 <= and_ln45_fu_183_p2;
        ch_1_load_reg_386 <= ch_1;
        i_1_load_reg_372 <= i_1;
        inc_reg_377 <= inc_fu_145_p2;
        index_load_reg_395 <= index;
        valid_in_reg_382 <= valid_in_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ch_1 <= xor_ln68_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cosine_reg_425 <= dds_table_q1;
        sine_reg_419 <= dds_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1 <= inc_1_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((valid_in_reg_382 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        index <= add_ln69_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln45_reg_391) & (valid_in_reg_382 == 1'd1) & (icmp_ln62_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        init_1 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln4_reg_441 <= grp_fu_340_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        DI_cache_address0 = zext_ln50_fu_238_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        DI_cache_address0 = zext_ln46_fu_219_p1;
    end else begin
        DI_cache_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        DI_cache_ce0 = 1'b1;
    end else begin
        DI_cache_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln45_fu_183_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        DI_cache_we0 = 1'b1;
    end else begin
        DI_cache_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln45_reg_391) & (valid_in_reg_382 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        Dout_I_ap_vld = 1'b1;
    end else begin
        Dout_I_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln45_reg_391) & (valid_in_reg_382 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        Dout_Q_ap_vld = 1'b1;
    end else begin
        Dout_Q_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dds_table_ce0 = 1'b1;
    end else begin
        dds_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dds_table_ce1 = 1'b1;
    end else begin
        dds_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & ((valid_in_fu_161_p2 == 1'd0) | (1'd1 == and_ln45_fu_183_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'd0 == and_ln45_fu_183_p2) & (valid_in_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Dout_I = {{add_ln59_reg_457[31:14]}};

assign Dout_Q = {{add_ln60_reg_462[31:14]}};

assign add_ln12_fu_197_p2 = (acc + freq_dds_fu_171_p3);

assign add_ln69_fu_311_p2 = (index_load_reg_395 + 4'd1);

assign and_ln45_fu_183_p2 = (valid_in_fu_161_p2 & ch_1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign dds_table_address0 = zext_ln26_fu_224_p1;

assign dds_table_address1 = zext_ln33_fu_233_p1;

assign freq_dds_fu_171_p3 = ((init_1[0:0] === 1'b1) ? 16'd0 : freq);

assign grp_fu_348_p0 = sext_ln7_2_fu_251_p1;

assign grp_fu_348_p1 = sext_ln7_3_fu_255_p1;

assign grp_fu_357_p0 = sext_ln7_2_fu_251_p1;

assign grp_fu_357_p1 = sext_ln7_3_fu_255_p1;

assign icmp_ln62_fu_284_p2 = ((index_load_reg_395 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_295_p2 = ((index_load_reg_395 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_322_p2 = ((i_1_load_reg_372 == 3'd5) ? 1'b1 : 1'b0);

assign inc_1_fu_327_p3 = ((icmp_ln70_fu_322_p2[0:0] === 1'b1) ? 3'd0 : inc_reg_377);

assign inc_fu_145_p2 = (i_1 + 3'd1);

assign phase2_fu_228_p2 = (5'd8 - phase1_reg_403);

assign sext_ln7_2_fu_251_p1 = $signed(DI_cache_q0);

assign sext_ln7_3_fu_255_p0 = Din;

assign sext_ln7_3_fu_255_p1 = sext_ln7_3_fu_255_p0;

assign tmp_3_fu_151_p4 = {{i_1[2:1]}};

assign valid_in_fu_161_p2 = ((tmp_3_fu_151_p4 == 2'd0) ? 1'b1 : 1'b0);

assign xor_ln68_fu_300_p2 = (ch_1_load_reg_386 ^ 1'd1);

assign zext_ln26_fu_224_p1 = phase1_reg_403;

assign zext_ln33_fu_233_p1 = phase2_fu_228_p2;

assign zext_ln46_fu_219_p1 = index;

assign zext_ln50_fu_238_p1 = index_load_reg_395;

endmodule //mixer
