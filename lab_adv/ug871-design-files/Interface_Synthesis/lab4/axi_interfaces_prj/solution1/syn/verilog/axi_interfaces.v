// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_interfaces,hls_ip_2019_1_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.541000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=846,HLS_SYN_LUT=1304,HLS_VERSION=2019_1_3}" *)

module axi_interfaces (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_0_TREADY,
        d_o_1_TREADY,
        d_o_2_TREADY,
        d_o_3_TREADY,
        d_o_4_TREADY,
        d_o_5_TREADY,
        d_o_6_TREADY,
        d_o_7_TREADY,
        d_o_0_TDATA,
        d_o_0_TVALID,
        d_o_1_TDATA,
        d_o_1_TVALID,
        d_o_2_TDATA,
        d_o_2_TVALID,
        d_o_3_TDATA,
        d_o_3_TVALID,
        d_o_4_TDATA,
        d_o_4_TVALID,
        d_o_5_TDATA,
        d_o_5_TVALID,
        d_o_6_TDATA,
        d_o_6_TVALID,
        d_o_7_TDATA,
        d_o_7_TVALID,
        d_i_0_TDATA,
        d_i_0_TVALID,
        d_i_0_TREADY,
        d_i_1_TDATA,
        d_i_1_TVALID,
        d_i_1_TREADY,
        d_i_2_TDATA,
        d_i_2_TVALID,
        d_i_2_TREADY,
        d_i_3_TDATA,
        d_i_3_TVALID,
        d_i_3_TREADY,
        d_i_4_TDATA,
        d_i_4_TVALID,
        d_i_4_TREADY,
        d_i_5_TDATA,
        d_i_5_TVALID,
        d_i_5_TREADY,
        d_i_6_TDATA,
        d_i_6_TVALID,
        d_i_6_TREADY,
        d_i_7_TDATA,
        d_i_7_TVALID,
        d_i_7_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   d_o_0_TREADY;
input   d_o_1_TREADY;
input   d_o_2_TREADY;
input   d_o_3_TREADY;
input   d_o_4_TREADY;
input   d_o_5_TREADY;
input   d_o_6_TREADY;
input   d_o_7_TREADY;
output  [15:0] d_o_0_TDATA;
output   d_o_0_TVALID;
output  [15:0] d_o_1_TDATA;
output   d_o_1_TVALID;
output  [15:0] d_o_2_TDATA;
output   d_o_2_TVALID;
output  [15:0] d_o_3_TDATA;
output   d_o_3_TVALID;
output  [15:0] d_o_4_TDATA;
output   d_o_4_TVALID;
output  [15:0] d_o_5_TDATA;
output   d_o_5_TVALID;
output  [15:0] d_o_6_TDATA;
output   d_o_6_TVALID;
output  [15:0] d_o_7_TDATA;
output   d_o_7_TVALID;
input  [15:0] d_i_0_TDATA;
input   d_i_0_TVALID;
output   d_i_0_TREADY;
input  [15:0] d_i_1_TDATA;
input   d_i_1_TVALID;
output   d_i_1_TREADY;
input  [15:0] d_i_2_TDATA;
input   d_i_2_TVALID;
output   d_i_2_TREADY;
input  [15:0] d_i_3_TDATA;
input   d_i_3_TVALID;
output   d_i_3_TREADY;
input  [15:0] d_i_4_TDATA;
input   d_i_4_TVALID;
output   d_i_4_TREADY;
input  [15:0] d_i_5_TDATA;
input   d_i_5_TVALID;
output   d_i_5_TREADY;
input  [15:0] d_i_6_TDATA;
input   d_i_6_TVALID;
output   d_i_6_TREADY;
input  [15:0] d_i_7_TDATA;
input   d_i_7_TVALID;
output   d_i_7_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln64_fu_492_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    d_i_0_0_vld_out;
wire    d_i_1_0_vld_out;
wire    d_i_2_0_vld_out;
wire    d_i_3_0_vld_out;
wire    d_i_4_0_vld_out;
wire    d_i_5_0_vld_out;
wire    d_i_6_0_vld_out;
wire    d_i_7_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter0;
wire    d_o_0_1_ack_in;
wire    d_o_1_1_ack_in;
wire    d_o_2_1_ack_in;
wire    d_o_3_1_ack_in;
wire    d_o_4_1_ack_in;
wire    d_o_5_1_ack_in;
wire    d_o_6_1_ack_in;
wire    d_o_7_1_ack_in;
reg    ap_block_state2_io;
wire    d_o_0_1_ack_out;
reg   [1:0] d_o_0_1_state;
wire    d_o_1_1_ack_out;
reg   [1:0] d_o_1_1_state;
wire    d_o_2_1_ack_out;
reg   [1:0] d_o_2_1_state;
wire    d_o_3_1_ack_out;
reg   [1:0] d_o_3_1_state;
wire    d_o_4_1_ack_out;
reg   [1:0] d_o_4_1_state;
wire    d_o_5_1_ack_out;
reg   [1:0] d_o_5_1_state;
wire    d_o_6_1_ack_out;
reg   [1:0] d_o_6_1_state;
wire    d_o_7_1_ack_out;
reg   [1:0] d_o_7_1_state;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] d_o_0_1_data_out;
reg    d_o_0_1_vld_in;
wire    d_o_0_1_vld_out;
reg   [15:0] d_o_0_1_payload_A;
reg   [15:0] d_o_0_1_payload_B;
reg    d_o_0_1_sel_rd;
reg    d_o_0_1_sel_wr;
wire    d_o_0_1_sel;
wire    d_o_0_1_load_A;
wire    d_o_0_1_load_B;
wire    d_o_0_1_state_cmp_full;
reg   [15:0] d_o_1_1_data_out;
reg    d_o_1_1_vld_in;
wire    d_o_1_1_vld_out;
reg   [15:0] d_o_1_1_payload_A;
reg   [15:0] d_o_1_1_payload_B;
reg    d_o_1_1_sel_rd;
reg    d_o_1_1_sel_wr;
wire    d_o_1_1_sel;
wire    d_o_1_1_load_A;
wire    d_o_1_1_load_B;
wire    d_o_1_1_state_cmp_full;
reg   [15:0] d_o_2_1_data_out;
reg    d_o_2_1_vld_in;
wire    d_o_2_1_vld_out;
reg   [15:0] d_o_2_1_payload_A;
reg   [15:0] d_o_2_1_payload_B;
reg    d_o_2_1_sel_rd;
reg    d_o_2_1_sel_wr;
wire    d_o_2_1_sel;
wire    d_o_2_1_load_A;
wire    d_o_2_1_load_B;
wire    d_o_2_1_state_cmp_full;
reg   [15:0] d_o_3_1_data_out;
reg    d_o_3_1_vld_in;
wire    d_o_3_1_vld_out;
reg   [15:0] d_o_3_1_payload_A;
reg   [15:0] d_o_3_1_payload_B;
reg    d_o_3_1_sel_rd;
reg    d_o_3_1_sel_wr;
wire    d_o_3_1_sel;
wire    d_o_3_1_load_A;
wire    d_o_3_1_load_B;
wire    d_o_3_1_state_cmp_full;
reg   [15:0] d_o_4_1_data_out;
reg    d_o_4_1_vld_in;
wire    d_o_4_1_vld_out;
reg   [15:0] d_o_4_1_payload_A;
reg   [15:0] d_o_4_1_payload_B;
reg    d_o_4_1_sel_rd;
reg    d_o_4_1_sel_wr;
wire    d_o_4_1_sel;
wire    d_o_4_1_load_A;
wire    d_o_4_1_load_B;
wire    d_o_4_1_state_cmp_full;
reg   [15:0] d_o_5_1_data_out;
reg    d_o_5_1_vld_in;
wire    d_o_5_1_vld_out;
reg   [15:0] d_o_5_1_payload_A;
reg   [15:0] d_o_5_1_payload_B;
reg    d_o_5_1_sel_rd;
reg    d_o_5_1_sel_wr;
wire    d_o_5_1_sel;
wire    d_o_5_1_load_A;
wire    d_o_5_1_load_B;
wire    d_o_5_1_state_cmp_full;
reg   [15:0] d_o_6_1_data_out;
reg    d_o_6_1_vld_in;
wire    d_o_6_1_vld_out;
reg   [15:0] d_o_6_1_payload_A;
reg   [15:0] d_o_6_1_payload_B;
reg    d_o_6_1_sel_rd;
reg    d_o_6_1_sel_wr;
wire    d_o_6_1_sel;
wire    d_o_6_1_load_A;
wire    d_o_6_1_load_B;
wire    d_o_6_1_state_cmp_full;
reg   [15:0] d_o_7_1_data_out;
reg    d_o_7_1_vld_in;
wire    d_o_7_1_vld_out;
reg   [15:0] d_o_7_1_payload_A;
reg   [15:0] d_o_7_1_payload_B;
reg    d_o_7_1_sel_rd;
reg    d_o_7_1_sel_wr;
wire    d_o_7_1_sel;
wire    d_o_7_1_load_A;
wire    d_o_7_1_load_B;
wire    d_o_7_1_state_cmp_full;
reg   [15:0] d_i_0_0_data_out;
wire    d_i_0_0_vld_in;
wire    d_i_0_0_ack_in;
reg    d_i_0_0_ack_out;
reg   [15:0] d_i_0_0_payload_A;
reg   [15:0] d_i_0_0_payload_B;
reg    d_i_0_0_sel_rd;
reg    d_i_0_0_sel_wr;
wire    d_i_0_0_sel;
wire    d_i_0_0_load_A;
wire    d_i_0_0_load_B;
reg   [1:0] d_i_0_0_state;
wire    d_i_0_0_state_cmp_full;
reg   [15:0] d_i_1_0_data_out;
wire    d_i_1_0_vld_in;
wire    d_i_1_0_ack_in;
reg    d_i_1_0_ack_out;
reg   [15:0] d_i_1_0_payload_A;
reg   [15:0] d_i_1_0_payload_B;
reg    d_i_1_0_sel_rd;
reg    d_i_1_0_sel_wr;
wire    d_i_1_0_sel;
wire    d_i_1_0_load_A;
wire    d_i_1_0_load_B;
reg   [1:0] d_i_1_0_state;
wire    d_i_1_0_state_cmp_full;
reg   [15:0] d_i_2_0_data_out;
wire    d_i_2_0_vld_in;
wire    d_i_2_0_ack_in;
reg    d_i_2_0_ack_out;
reg   [15:0] d_i_2_0_payload_A;
reg   [15:0] d_i_2_0_payload_B;
reg    d_i_2_0_sel_rd;
reg    d_i_2_0_sel_wr;
wire    d_i_2_0_sel;
wire    d_i_2_0_load_A;
wire    d_i_2_0_load_B;
reg   [1:0] d_i_2_0_state;
wire    d_i_2_0_state_cmp_full;
reg   [15:0] d_i_3_0_data_out;
wire    d_i_3_0_vld_in;
wire    d_i_3_0_ack_in;
reg    d_i_3_0_ack_out;
reg   [15:0] d_i_3_0_payload_A;
reg   [15:0] d_i_3_0_payload_B;
reg    d_i_3_0_sel_rd;
reg    d_i_3_0_sel_wr;
wire    d_i_3_0_sel;
wire    d_i_3_0_load_A;
wire    d_i_3_0_load_B;
reg   [1:0] d_i_3_0_state;
wire    d_i_3_0_state_cmp_full;
reg   [15:0] d_i_4_0_data_out;
wire    d_i_4_0_vld_in;
wire    d_i_4_0_ack_in;
reg    d_i_4_0_ack_out;
reg   [15:0] d_i_4_0_payload_A;
reg   [15:0] d_i_4_0_payload_B;
reg    d_i_4_0_sel_rd;
reg    d_i_4_0_sel_wr;
wire    d_i_4_0_sel;
wire    d_i_4_0_load_A;
wire    d_i_4_0_load_B;
reg   [1:0] d_i_4_0_state;
wire    d_i_4_0_state_cmp_full;
reg   [15:0] d_i_5_0_data_out;
wire    d_i_5_0_vld_in;
wire    d_i_5_0_ack_in;
reg    d_i_5_0_ack_out;
reg   [15:0] d_i_5_0_payload_A;
reg   [15:0] d_i_5_0_payload_B;
reg    d_i_5_0_sel_rd;
reg    d_i_5_0_sel_wr;
wire    d_i_5_0_sel;
wire    d_i_5_0_load_A;
wire    d_i_5_0_load_B;
reg   [1:0] d_i_5_0_state;
wire    d_i_5_0_state_cmp_full;
reg   [15:0] d_i_6_0_data_out;
wire    d_i_6_0_vld_in;
wire    d_i_6_0_ack_in;
reg    d_i_6_0_ack_out;
reg   [15:0] d_i_6_0_payload_A;
reg   [15:0] d_i_6_0_payload_B;
reg    d_i_6_0_sel_rd;
reg    d_i_6_0_sel_wr;
wire    d_i_6_0_sel;
wire    d_i_6_0_load_A;
wire    d_i_6_0_load_B;
reg   [1:0] d_i_6_0_state;
wire    d_i_6_0_state_cmp_full;
reg   [15:0] d_i_7_0_data_out;
wire    d_i_7_0_vld_in;
wire    d_i_7_0_ack_in;
reg    d_i_7_0_ack_out;
reg   [15:0] d_i_7_0_payload_A;
reg   [15:0] d_i_7_0_payload_B;
reg    d_i_7_0_sel_rd;
reg    d_i_7_0_sel_wr;
wire    d_i_7_0_sel;
wire    d_i_7_0_load_A;
wire    d_i_7_0_load_B;
reg   [1:0] d_i_7_0_state;
wire    d_i_7_0_state_cmp_full;
reg   [31:0] acc_0;
reg   [31:0] acc_1;
reg   [31:0] acc_2;
reg   [31:0] acc_3;
reg   [31:0] acc_4;
reg   [31:0] acc_5;
reg   [31:0] acc_6;
reg   [31:0] acc_7;
reg    d_o_0_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    d_o_1_TDATA_blk_n;
reg    d_o_2_TDATA_blk_n;
reg    d_o_3_TDATA_blk_n;
reg    d_o_4_TDATA_blk_n;
reg    d_o_5_TDATA_blk_n;
reg    d_o_6_TDATA_blk_n;
reg    d_o_7_TDATA_blk_n;
reg    d_i_0_TDATA_blk_n;
reg    d_i_1_TDATA_blk_n;
reg    d_i_2_TDATA_blk_n;
reg    d_i_3_TDATA_blk_n;
reg    d_i_4_TDATA_blk_n;
reg    d_i_5_TDATA_blk_n;
reg    d_i_6_TDATA_blk_n;
reg    d_i_7_TDATA_blk_n;
reg   [4:0] i_0_01_reg_216;
wire   [15:0] add_ln67_fu_258_p2;
wire   [15:0] add_ln67_1_fu_289_p2;
wire   [15:0] add_ln67_2_fu_320_p2;
wire   [15:0] add_ln67_3_fu_351_p2;
wire   [15:0] add_ln67_4_fu_382_p2;
wire   [15:0] add_ln67_5_fu_413_p2;
wire   [15:0] add_ln67_6_fu_444_p2;
wire   [15:0] add_ln67_7_fu_475_p2;
wire   [4:0] empty_2_fu_488_p1;
reg   [4:0] empty_2_reg_540;
reg   [0:0] icmp_ln64_reg_545;
reg    ap_block_pp0_stage0_subdone;
reg   [4:0] ap_phi_mux_i_0_01_phi_fu_220_p6;
wire   [31:0] add_ln66_fu_246_p2;
wire   [31:0] add_ln66_1_fu_277_p2;
wire   [31:0] add_ln66_2_fu_308_p2;
wire   [31:0] add_ln66_3_fu_339_p2;
wire   [31:0] add_ln66_4_fu_370_p2;
wire   [31:0] add_ln66_5_fu_401_p2;
wire   [31:0] add_ln66_6_fu_432_p2;
wire   [31:0] add_ln66_7_fu_463_p2;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] sext_ln66_fu_238_p0;
wire  signed [31:0] sext_ln66_fu_238_p1;
wire   [15:0] trunc_ln66_fu_242_p1;
wire  signed [15:0] add_ln67_fu_258_p1;
wire  signed [15:0] sext_ln66_1_fu_269_p0;
wire  signed [31:0] sext_ln66_1_fu_269_p1;
wire   [15:0] trunc_ln66_1_fu_273_p1;
wire  signed [15:0] add_ln67_1_fu_289_p1;
wire  signed [15:0] sext_ln66_2_fu_300_p0;
wire  signed [31:0] sext_ln66_2_fu_300_p1;
wire   [15:0] trunc_ln66_2_fu_304_p1;
wire  signed [15:0] add_ln67_2_fu_320_p1;
wire  signed [15:0] sext_ln66_3_fu_331_p0;
wire  signed [31:0] sext_ln66_3_fu_331_p1;
wire   [15:0] trunc_ln66_3_fu_335_p1;
wire  signed [15:0] add_ln67_3_fu_351_p1;
wire  signed [15:0] sext_ln66_4_fu_362_p0;
wire  signed [31:0] sext_ln66_4_fu_362_p1;
wire   [15:0] trunc_ln66_4_fu_366_p1;
wire  signed [15:0] add_ln67_4_fu_382_p1;
wire  signed [15:0] sext_ln66_5_fu_393_p0;
wire  signed [31:0] sext_ln66_5_fu_393_p1;
wire   [15:0] trunc_ln66_5_fu_397_p1;
wire  signed [15:0] add_ln67_5_fu_413_p1;
wire  signed [15:0] sext_ln66_6_fu_424_p0;
wire  signed [31:0] sext_ln66_6_fu_424_p1;
wire   [15:0] trunc_ln66_6_fu_428_p1;
wire  signed [15:0] add_ln67_6_fu_444_p1;
wire  signed [15:0] sext_ln66_7_fu_455_p0;
wire  signed [31:0] sext_ln66_7_fu_455_p1;
wire   [15:0] trunc_ln66_7_fu_459_p1;
wire  signed [15:0] add_ln67_7_fu_475_p1;
wire   [5:0] zext_ln64_fu_230_p1;
wire   [5:0] add_ln64_fu_482_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1071;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 d_o_0_1_state = 2'd0;
#0 d_o_1_1_state = 2'd0;
#0 d_o_2_1_state = 2'd0;
#0 d_o_3_1_state = 2'd0;
#0 d_o_4_1_state = 2'd0;
#0 d_o_5_1_state = 2'd0;
#0 d_o_6_1_state = 2'd0;
#0 d_o_7_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 d_o_0_1_sel_rd = 1'b0;
#0 d_o_0_1_sel_wr = 1'b0;
#0 d_o_1_1_sel_rd = 1'b0;
#0 d_o_1_1_sel_wr = 1'b0;
#0 d_o_2_1_sel_rd = 1'b0;
#0 d_o_2_1_sel_wr = 1'b0;
#0 d_o_3_1_sel_rd = 1'b0;
#0 d_o_3_1_sel_wr = 1'b0;
#0 d_o_4_1_sel_rd = 1'b0;
#0 d_o_4_1_sel_wr = 1'b0;
#0 d_o_5_1_sel_rd = 1'b0;
#0 d_o_5_1_sel_wr = 1'b0;
#0 d_o_6_1_sel_rd = 1'b0;
#0 d_o_6_1_sel_wr = 1'b0;
#0 d_o_7_1_sel_rd = 1'b0;
#0 d_o_7_1_sel_wr = 1'b0;
#0 d_i_0_0_sel_rd = 1'b0;
#0 d_i_0_0_sel_wr = 1'b0;
#0 d_i_0_0_state = 2'd0;
#0 d_i_1_0_sel_rd = 1'b0;
#0 d_i_1_0_sel_wr = 1'b0;
#0 d_i_1_0_state = 2'd0;
#0 d_i_2_0_sel_rd = 1'b0;
#0 d_i_2_0_sel_wr = 1'b0;
#0 d_i_2_0_state = 2'd0;
#0 d_i_3_0_sel_rd = 1'b0;
#0 d_i_3_0_sel_wr = 1'b0;
#0 d_i_3_0_state = 2'd0;
#0 d_i_4_0_sel_rd = 1'b0;
#0 d_i_4_0_sel_wr = 1'b0;
#0 d_i_4_0_state = 2'd0;
#0 d_i_5_0_sel_rd = 1'b0;
#0 d_i_5_0_sel_wr = 1'b0;
#0 d_i_5_0_state = 2'd0;
#0 d_i_6_0_sel_rd = 1'b0;
#0 d_i_6_0_sel_wr = 1'b0;
#0 d_i_6_0_state = 2'd0;
#0 d_i_7_0_sel_rd = 1'b0;
#0 d_i_7_0_sel_wr = 1'b0;
#0 d_i_7_0_state = 2'd0;
#0 acc_0 = 32'd0;
#0 acc_1 = 32'd0;
#0 acc_2 = 32'd0;
#0 acc_3 = 32'd0;
#0 acc_4 = 32'd0;
#0 acc_5 = 32'd0;
#0 acc_6 = 32'd0;
#0 acc_7 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_0_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_0_0_ack_out == 1'b1) & (d_i_0_0_vld_out == 1'b1))) begin
            d_i_0_0_sel_rd <= ~d_i_0_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_0_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_0_0_ack_in == 1'b1) & (d_i_0_0_vld_in == 1'b1))) begin
            d_i_0_0_sel_wr <= ~d_i_0_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_0_0_state <= 2'd0;
    end else begin
        if ((((d_i_0_0_vld_in == 1'b0) & (d_i_0_0_state == 2'd2)) | ((d_i_0_0_vld_in == 1'b0) & (d_i_0_0_ack_out == 1'b1) & (d_i_0_0_state == 2'd3)))) begin
            d_i_0_0_state <= 2'd2;
        end else if ((((d_i_0_0_ack_out == 1'b0) & (d_i_0_0_state == 2'd1)) | ((d_i_0_0_ack_out == 1'b0) & (d_i_0_0_vld_in == 1'b1) & (d_i_0_0_state == 2'd3)))) begin
            d_i_0_0_state <= 2'd1;
        end else if (((~((d_i_0_0_vld_in == 1'b0) & (d_i_0_0_ack_out == 1'b1)) & ~((d_i_0_0_ack_out == 1'b0) & (d_i_0_0_vld_in == 1'b1)) & (d_i_0_0_state == 2'd3)) | ((d_i_0_0_ack_out == 1'b1) & (d_i_0_0_state == 2'd1)) | ((d_i_0_0_vld_in == 1'b1) & (d_i_0_0_state == 2'd2)))) begin
            d_i_0_0_state <= 2'd3;
        end else begin
            d_i_0_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_1_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_1_0_ack_out == 1'b1) & (d_i_1_0_vld_out == 1'b1))) begin
            d_i_1_0_sel_rd <= ~d_i_1_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_1_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_1_0_ack_in == 1'b1) & (d_i_1_0_vld_in == 1'b1))) begin
            d_i_1_0_sel_wr <= ~d_i_1_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_1_0_state <= 2'd0;
    end else begin
        if ((((d_i_1_0_vld_in == 1'b0) & (d_i_1_0_state == 2'd2)) | ((d_i_1_0_vld_in == 1'b0) & (d_i_1_0_ack_out == 1'b1) & (d_i_1_0_state == 2'd3)))) begin
            d_i_1_0_state <= 2'd2;
        end else if ((((d_i_1_0_ack_out == 1'b0) & (d_i_1_0_state == 2'd1)) | ((d_i_1_0_ack_out == 1'b0) & (d_i_1_0_vld_in == 1'b1) & (d_i_1_0_state == 2'd3)))) begin
            d_i_1_0_state <= 2'd1;
        end else if (((~((d_i_1_0_vld_in == 1'b0) & (d_i_1_0_ack_out == 1'b1)) & ~((d_i_1_0_ack_out == 1'b0) & (d_i_1_0_vld_in == 1'b1)) & (d_i_1_0_state == 2'd3)) | ((d_i_1_0_ack_out == 1'b1) & (d_i_1_0_state == 2'd1)) | ((d_i_1_0_vld_in == 1'b1) & (d_i_1_0_state == 2'd2)))) begin
            d_i_1_0_state <= 2'd3;
        end else begin
            d_i_1_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_2_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_2_0_ack_out == 1'b1) & (d_i_2_0_vld_out == 1'b1))) begin
            d_i_2_0_sel_rd <= ~d_i_2_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_2_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_2_0_ack_in == 1'b1) & (d_i_2_0_vld_in == 1'b1))) begin
            d_i_2_0_sel_wr <= ~d_i_2_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_2_0_state <= 2'd0;
    end else begin
        if ((((d_i_2_0_vld_in == 1'b0) & (d_i_2_0_state == 2'd2)) | ((d_i_2_0_vld_in == 1'b0) & (d_i_2_0_ack_out == 1'b1) & (d_i_2_0_state == 2'd3)))) begin
            d_i_2_0_state <= 2'd2;
        end else if ((((d_i_2_0_ack_out == 1'b0) & (d_i_2_0_state == 2'd1)) | ((d_i_2_0_ack_out == 1'b0) & (d_i_2_0_vld_in == 1'b1) & (d_i_2_0_state == 2'd3)))) begin
            d_i_2_0_state <= 2'd1;
        end else if (((~((d_i_2_0_vld_in == 1'b0) & (d_i_2_0_ack_out == 1'b1)) & ~((d_i_2_0_ack_out == 1'b0) & (d_i_2_0_vld_in == 1'b1)) & (d_i_2_0_state == 2'd3)) | ((d_i_2_0_ack_out == 1'b1) & (d_i_2_0_state == 2'd1)) | ((d_i_2_0_vld_in == 1'b1) & (d_i_2_0_state == 2'd2)))) begin
            d_i_2_0_state <= 2'd3;
        end else begin
            d_i_2_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_3_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_3_0_ack_out == 1'b1) & (d_i_3_0_vld_out == 1'b1))) begin
            d_i_3_0_sel_rd <= ~d_i_3_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_3_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_3_0_ack_in == 1'b1) & (d_i_3_0_vld_in == 1'b1))) begin
            d_i_3_0_sel_wr <= ~d_i_3_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_3_0_state <= 2'd0;
    end else begin
        if ((((d_i_3_0_vld_in == 1'b0) & (d_i_3_0_state == 2'd2)) | ((d_i_3_0_vld_in == 1'b0) & (d_i_3_0_ack_out == 1'b1) & (d_i_3_0_state == 2'd3)))) begin
            d_i_3_0_state <= 2'd2;
        end else if ((((d_i_3_0_ack_out == 1'b0) & (d_i_3_0_state == 2'd1)) | ((d_i_3_0_ack_out == 1'b0) & (d_i_3_0_vld_in == 1'b1) & (d_i_3_0_state == 2'd3)))) begin
            d_i_3_0_state <= 2'd1;
        end else if (((~((d_i_3_0_vld_in == 1'b0) & (d_i_3_0_ack_out == 1'b1)) & ~((d_i_3_0_ack_out == 1'b0) & (d_i_3_0_vld_in == 1'b1)) & (d_i_3_0_state == 2'd3)) | ((d_i_3_0_ack_out == 1'b1) & (d_i_3_0_state == 2'd1)) | ((d_i_3_0_vld_in == 1'b1) & (d_i_3_0_state == 2'd2)))) begin
            d_i_3_0_state <= 2'd3;
        end else begin
            d_i_3_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_4_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_4_0_ack_out == 1'b1) & (d_i_4_0_vld_out == 1'b1))) begin
            d_i_4_0_sel_rd <= ~d_i_4_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_4_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_4_0_ack_in == 1'b1) & (d_i_4_0_vld_in == 1'b1))) begin
            d_i_4_0_sel_wr <= ~d_i_4_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_4_0_state <= 2'd0;
    end else begin
        if ((((d_i_4_0_vld_in == 1'b0) & (d_i_4_0_state == 2'd2)) | ((d_i_4_0_vld_in == 1'b0) & (d_i_4_0_ack_out == 1'b1) & (d_i_4_0_state == 2'd3)))) begin
            d_i_4_0_state <= 2'd2;
        end else if ((((d_i_4_0_ack_out == 1'b0) & (d_i_4_0_state == 2'd1)) | ((d_i_4_0_ack_out == 1'b0) & (d_i_4_0_vld_in == 1'b1) & (d_i_4_0_state == 2'd3)))) begin
            d_i_4_0_state <= 2'd1;
        end else if (((~((d_i_4_0_vld_in == 1'b0) & (d_i_4_0_ack_out == 1'b1)) & ~((d_i_4_0_ack_out == 1'b0) & (d_i_4_0_vld_in == 1'b1)) & (d_i_4_0_state == 2'd3)) | ((d_i_4_0_ack_out == 1'b1) & (d_i_4_0_state == 2'd1)) | ((d_i_4_0_vld_in == 1'b1) & (d_i_4_0_state == 2'd2)))) begin
            d_i_4_0_state <= 2'd3;
        end else begin
            d_i_4_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_5_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_5_0_ack_out == 1'b1) & (d_i_5_0_vld_out == 1'b1))) begin
            d_i_5_0_sel_rd <= ~d_i_5_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_5_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_5_0_ack_in == 1'b1) & (d_i_5_0_vld_in == 1'b1))) begin
            d_i_5_0_sel_wr <= ~d_i_5_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_5_0_state <= 2'd0;
    end else begin
        if ((((d_i_5_0_vld_in == 1'b0) & (d_i_5_0_state == 2'd2)) | ((d_i_5_0_vld_in == 1'b0) & (d_i_5_0_ack_out == 1'b1) & (d_i_5_0_state == 2'd3)))) begin
            d_i_5_0_state <= 2'd2;
        end else if ((((d_i_5_0_ack_out == 1'b0) & (d_i_5_0_state == 2'd1)) | ((d_i_5_0_ack_out == 1'b0) & (d_i_5_0_vld_in == 1'b1) & (d_i_5_0_state == 2'd3)))) begin
            d_i_5_0_state <= 2'd1;
        end else if (((~((d_i_5_0_vld_in == 1'b0) & (d_i_5_0_ack_out == 1'b1)) & ~((d_i_5_0_ack_out == 1'b0) & (d_i_5_0_vld_in == 1'b1)) & (d_i_5_0_state == 2'd3)) | ((d_i_5_0_ack_out == 1'b1) & (d_i_5_0_state == 2'd1)) | ((d_i_5_0_vld_in == 1'b1) & (d_i_5_0_state == 2'd2)))) begin
            d_i_5_0_state <= 2'd3;
        end else begin
            d_i_5_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_6_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_6_0_ack_out == 1'b1) & (d_i_6_0_vld_out == 1'b1))) begin
            d_i_6_0_sel_rd <= ~d_i_6_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_6_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_6_0_ack_in == 1'b1) & (d_i_6_0_vld_in == 1'b1))) begin
            d_i_6_0_sel_wr <= ~d_i_6_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_6_0_state <= 2'd0;
    end else begin
        if ((((d_i_6_0_vld_in == 1'b0) & (d_i_6_0_state == 2'd2)) | ((d_i_6_0_vld_in == 1'b0) & (d_i_6_0_ack_out == 1'b1) & (d_i_6_0_state == 2'd3)))) begin
            d_i_6_0_state <= 2'd2;
        end else if ((((d_i_6_0_ack_out == 1'b0) & (d_i_6_0_state == 2'd1)) | ((d_i_6_0_ack_out == 1'b0) & (d_i_6_0_vld_in == 1'b1) & (d_i_6_0_state == 2'd3)))) begin
            d_i_6_0_state <= 2'd1;
        end else if (((~((d_i_6_0_vld_in == 1'b0) & (d_i_6_0_ack_out == 1'b1)) & ~((d_i_6_0_ack_out == 1'b0) & (d_i_6_0_vld_in == 1'b1)) & (d_i_6_0_state == 2'd3)) | ((d_i_6_0_ack_out == 1'b1) & (d_i_6_0_state == 2'd1)) | ((d_i_6_0_vld_in == 1'b1) & (d_i_6_0_state == 2'd2)))) begin
            d_i_6_0_state <= 2'd3;
        end else begin
            d_i_6_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_7_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i_7_0_vld_out == 1'b1) & (d_i_7_0_ack_out == 1'b1))) begin
            d_i_7_0_sel_rd <= ~d_i_7_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_7_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i_7_0_ack_in == 1'b1) & (d_i_7_0_vld_in == 1'b1))) begin
            d_i_7_0_sel_wr <= ~d_i_7_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i_7_0_state <= 2'd0;
    end else begin
        if ((((d_i_7_0_vld_in == 1'b0) & (d_i_7_0_state == 2'd2)) | ((d_i_7_0_vld_in == 1'b0) & (d_i_7_0_ack_out == 1'b1) & (d_i_7_0_state == 2'd3)))) begin
            d_i_7_0_state <= 2'd2;
        end else if ((((d_i_7_0_ack_out == 1'b0) & (d_i_7_0_state == 2'd1)) | ((d_i_7_0_ack_out == 1'b0) & (d_i_7_0_vld_in == 1'b1) & (d_i_7_0_state == 2'd3)))) begin
            d_i_7_0_state <= 2'd1;
        end else if (((~((d_i_7_0_vld_in == 1'b0) & (d_i_7_0_ack_out == 1'b1)) & ~((d_i_7_0_ack_out == 1'b0) & (d_i_7_0_vld_in == 1'b1)) & (d_i_7_0_state == 2'd3)) | ((d_i_7_0_ack_out == 1'b1) & (d_i_7_0_state == 2'd1)) | ((d_i_7_0_vld_in == 1'b1) & (d_i_7_0_state == 2'd2)))) begin
            d_i_7_0_state <= 2'd3;
        end else begin
            d_i_7_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_0_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_0_1_vld_out == 1'b1) & (d_o_0_1_ack_out == 1'b1))) begin
            d_o_0_1_sel_rd <= ~d_o_0_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_0_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_0_1_ack_in == 1'b1) & (d_o_0_1_vld_in == 1'b1))) begin
            d_o_0_1_sel_wr <= ~d_o_0_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_0_1_state <= 2'd0;
    end else begin
        if ((((d_o_0_1_vld_in == 1'b0) & (d_o_0_1_ack_out == 1'b1) & (d_o_0_1_state == 2'd3)) | ((d_o_0_1_vld_in == 1'b0) & (d_o_0_1_state == 2'd2)))) begin
            d_o_0_1_state <= 2'd2;
        end else if ((((d_o_0_TREADY == 1'b0) & (d_o_0_1_state == 2'd1)) | ((d_o_0_TREADY == 1'b0) & (d_o_0_1_vld_in == 1'b1) & (d_o_0_1_state == 2'd3)))) begin
            d_o_0_1_state <= 2'd1;
        end else if ((((d_o_0_1_ack_out == 1'b1) & (d_o_0_1_state == 2'd1)) | (~((d_o_0_1_vld_in == 1'b0) & (d_o_0_1_ack_out == 1'b1)) & ~((d_o_0_TREADY == 1'b0) & (d_o_0_1_vld_in == 1'b1)) & (d_o_0_1_state == 2'd3)) | ((d_o_0_1_vld_in == 1'b1) & (d_o_0_1_state == 2'd2)))) begin
            d_o_0_1_state <= 2'd3;
        end else begin
            d_o_0_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_1_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_1_1_vld_out == 1'b1) & (d_o_1_1_ack_out == 1'b1))) begin
            d_o_1_1_sel_rd <= ~d_o_1_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_1_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_1_1_ack_in == 1'b1) & (d_o_1_1_vld_in == 1'b1))) begin
            d_o_1_1_sel_wr <= ~d_o_1_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_1_1_state <= 2'd0;
    end else begin
        if ((((d_o_1_1_vld_in == 1'b0) & (d_o_1_1_ack_out == 1'b1) & (d_o_1_1_state == 2'd3)) | ((d_o_1_1_vld_in == 1'b0) & (d_o_1_1_state == 2'd2)))) begin
            d_o_1_1_state <= 2'd2;
        end else if ((((d_o_1_TREADY == 1'b0) & (d_o_1_1_state == 2'd1)) | ((d_o_1_TREADY == 1'b0) & (d_o_1_1_vld_in == 1'b1) & (d_o_1_1_state == 2'd3)))) begin
            d_o_1_1_state <= 2'd1;
        end else if ((((d_o_1_1_ack_out == 1'b1) & (d_o_1_1_state == 2'd1)) | (~((d_o_1_1_vld_in == 1'b0) & (d_o_1_1_ack_out == 1'b1)) & ~((d_o_1_TREADY == 1'b0) & (d_o_1_1_vld_in == 1'b1)) & (d_o_1_1_state == 2'd3)) | ((d_o_1_1_vld_in == 1'b1) & (d_o_1_1_state == 2'd2)))) begin
            d_o_1_1_state <= 2'd3;
        end else begin
            d_o_1_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_2_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_2_1_vld_out == 1'b1) & (d_o_2_1_ack_out == 1'b1))) begin
            d_o_2_1_sel_rd <= ~d_o_2_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_2_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_2_1_ack_in == 1'b1) & (d_o_2_1_vld_in == 1'b1))) begin
            d_o_2_1_sel_wr <= ~d_o_2_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_2_1_state <= 2'd0;
    end else begin
        if ((((d_o_2_1_vld_in == 1'b0) & (d_o_2_1_ack_out == 1'b1) & (d_o_2_1_state == 2'd3)) | ((d_o_2_1_vld_in == 1'b0) & (d_o_2_1_state == 2'd2)))) begin
            d_o_2_1_state <= 2'd2;
        end else if ((((d_o_2_TREADY == 1'b0) & (d_o_2_1_state == 2'd1)) | ((d_o_2_TREADY == 1'b0) & (d_o_2_1_vld_in == 1'b1) & (d_o_2_1_state == 2'd3)))) begin
            d_o_2_1_state <= 2'd1;
        end else if ((((d_o_2_1_ack_out == 1'b1) & (d_o_2_1_state == 2'd1)) | (~((d_o_2_1_vld_in == 1'b0) & (d_o_2_1_ack_out == 1'b1)) & ~((d_o_2_TREADY == 1'b0) & (d_o_2_1_vld_in == 1'b1)) & (d_o_2_1_state == 2'd3)) | ((d_o_2_1_vld_in == 1'b1) & (d_o_2_1_state == 2'd2)))) begin
            d_o_2_1_state <= 2'd3;
        end else begin
            d_o_2_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_3_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_3_1_vld_out == 1'b1) & (d_o_3_1_ack_out == 1'b1))) begin
            d_o_3_1_sel_rd <= ~d_o_3_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_3_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_3_1_ack_in == 1'b1) & (d_o_3_1_vld_in == 1'b1))) begin
            d_o_3_1_sel_wr <= ~d_o_3_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_3_1_state <= 2'd0;
    end else begin
        if ((((d_o_3_1_vld_in == 1'b0) & (d_o_3_1_ack_out == 1'b1) & (d_o_3_1_state == 2'd3)) | ((d_o_3_1_vld_in == 1'b0) & (d_o_3_1_state == 2'd2)))) begin
            d_o_3_1_state <= 2'd2;
        end else if ((((d_o_3_TREADY == 1'b0) & (d_o_3_1_state == 2'd1)) | ((d_o_3_TREADY == 1'b0) & (d_o_3_1_vld_in == 1'b1) & (d_o_3_1_state == 2'd3)))) begin
            d_o_3_1_state <= 2'd1;
        end else if ((((d_o_3_1_ack_out == 1'b1) & (d_o_3_1_state == 2'd1)) | (~((d_o_3_1_vld_in == 1'b0) & (d_o_3_1_ack_out == 1'b1)) & ~((d_o_3_TREADY == 1'b0) & (d_o_3_1_vld_in == 1'b1)) & (d_o_3_1_state == 2'd3)) | ((d_o_3_1_vld_in == 1'b1) & (d_o_3_1_state == 2'd2)))) begin
            d_o_3_1_state <= 2'd3;
        end else begin
            d_o_3_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_4_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_4_1_vld_out == 1'b1) & (d_o_4_1_ack_out == 1'b1))) begin
            d_o_4_1_sel_rd <= ~d_o_4_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_4_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_4_1_ack_in == 1'b1) & (d_o_4_1_vld_in == 1'b1))) begin
            d_o_4_1_sel_wr <= ~d_o_4_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_4_1_state <= 2'd0;
    end else begin
        if ((((d_o_4_1_vld_in == 1'b0) & (d_o_4_1_ack_out == 1'b1) & (d_o_4_1_state == 2'd3)) | ((d_o_4_1_vld_in == 1'b0) & (d_o_4_1_state == 2'd2)))) begin
            d_o_4_1_state <= 2'd2;
        end else if ((((d_o_4_TREADY == 1'b0) & (d_o_4_1_state == 2'd1)) | ((d_o_4_TREADY == 1'b0) & (d_o_4_1_vld_in == 1'b1) & (d_o_4_1_state == 2'd3)))) begin
            d_o_4_1_state <= 2'd1;
        end else if ((((d_o_4_1_ack_out == 1'b1) & (d_o_4_1_state == 2'd1)) | (~((d_o_4_1_vld_in == 1'b0) & (d_o_4_1_ack_out == 1'b1)) & ~((d_o_4_TREADY == 1'b0) & (d_o_4_1_vld_in == 1'b1)) & (d_o_4_1_state == 2'd3)) | ((d_o_4_1_vld_in == 1'b1) & (d_o_4_1_state == 2'd2)))) begin
            d_o_4_1_state <= 2'd3;
        end else begin
            d_o_4_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_5_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_5_1_vld_out == 1'b1) & (d_o_5_1_ack_out == 1'b1))) begin
            d_o_5_1_sel_rd <= ~d_o_5_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_5_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_5_1_ack_in == 1'b1) & (d_o_5_1_vld_in == 1'b1))) begin
            d_o_5_1_sel_wr <= ~d_o_5_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_5_1_state <= 2'd0;
    end else begin
        if ((((d_o_5_1_vld_in == 1'b0) & (d_o_5_1_ack_out == 1'b1) & (d_o_5_1_state == 2'd3)) | ((d_o_5_1_vld_in == 1'b0) & (d_o_5_1_state == 2'd2)))) begin
            d_o_5_1_state <= 2'd2;
        end else if ((((d_o_5_TREADY == 1'b0) & (d_o_5_1_state == 2'd1)) | ((d_o_5_TREADY == 1'b0) & (d_o_5_1_vld_in == 1'b1) & (d_o_5_1_state == 2'd3)))) begin
            d_o_5_1_state <= 2'd1;
        end else if ((((d_o_5_1_ack_out == 1'b1) & (d_o_5_1_state == 2'd1)) | (~((d_o_5_1_vld_in == 1'b0) & (d_o_5_1_ack_out == 1'b1)) & ~((d_o_5_TREADY == 1'b0) & (d_o_5_1_vld_in == 1'b1)) & (d_o_5_1_state == 2'd3)) | ((d_o_5_1_vld_in == 1'b1) & (d_o_5_1_state == 2'd2)))) begin
            d_o_5_1_state <= 2'd3;
        end else begin
            d_o_5_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_6_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_6_1_vld_out == 1'b1) & (d_o_6_1_ack_out == 1'b1))) begin
            d_o_6_1_sel_rd <= ~d_o_6_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_6_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_6_1_ack_in == 1'b1) & (d_o_6_1_vld_in == 1'b1))) begin
            d_o_6_1_sel_wr <= ~d_o_6_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_6_1_state <= 2'd0;
    end else begin
        if ((((d_o_6_1_vld_in == 1'b0) & (d_o_6_1_ack_out == 1'b1) & (d_o_6_1_state == 2'd3)) | ((d_o_6_1_vld_in == 1'b0) & (d_o_6_1_state == 2'd2)))) begin
            d_o_6_1_state <= 2'd2;
        end else if ((((d_o_6_TREADY == 1'b0) & (d_o_6_1_state == 2'd1)) | ((d_o_6_TREADY == 1'b0) & (d_o_6_1_vld_in == 1'b1) & (d_o_6_1_state == 2'd3)))) begin
            d_o_6_1_state <= 2'd1;
        end else if ((((d_o_6_1_ack_out == 1'b1) & (d_o_6_1_state == 2'd1)) | (~((d_o_6_1_vld_in == 1'b0) & (d_o_6_1_ack_out == 1'b1)) & ~((d_o_6_TREADY == 1'b0) & (d_o_6_1_vld_in == 1'b1)) & (d_o_6_1_state == 2'd3)) | ((d_o_6_1_vld_in == 1'b1) & (d_o_6_1_state == 2'd2)))) begin
            d_o_6_1_state <= 2'd3;
        end else begin
            d_o_6_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_7_1_sel_rd <= 1'b0;
    end else begin
        if (((d_o_7_1_vld_out == 1'b1) & (d_o_7_1_ack_out == 1'b1))) begin
            d_o_7_1_sel_rd <= ~d_o_7_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_7_1_sel_wr <= 1'b0;
    end else begin
        if (((d_o_7_1_vld_in == 1'b1) & (d_o_7_1_ack_in == 1'b1))) begin
            d_o_7_1_sel_wr <= ~d_o_7_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_o_7_1_state <= 2'd0;
    end else begin
        if ((((d_o_7_1_vld_in == 1'b0) & (d_o_7_1_ack_out == 1'b1) & (d_o_7_1_state == 2'd3)) | ((d_o_7_1_vld_in == 1'b0) & (d_o_7_1_state == 2'd2)))) begin
            d_o_7_1_state <= 2'd2;
        end else if ((((d_o_7_TREADY == 1'b0) & (d_o_7_1_state == 2'd1)) | ((d_o_7_TREADY == 1'b0) & (d_o_7_1_vld_in == 1'b1) & (d_o_7_1_state == 2'd3)))) begin
            d_o_7_1_state <= 2'd1;
        end else if ((((d_o_7_1_ack_out == 1'b1) & (d_o_7_1_state == 2'd1)) | (~((d_o_7_1_vld_in == 1'b0) & (d_o_7_1_ack_out == 1'b1)) & ~((d_o_7_TREADY == 1'b0) & (d_o_7_1_vld_in == 1'b1)) & (d_o_7_1_state == 2'd3)) | ((d_o_7_1_vld_in == 1'b1) & (d_o_7_1_state == 2'd2)))) begin
            d_o_7_1_state <= 2'd3;
        end else begin
            d_o_7_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_545 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_01_reg_216 <= empty_2_reg_540;
    end else if ((((icmp_ln64_reg_545 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_0_01_reg_216 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_0 <= add_ln66_fu_246_p2;
        acc_1 <= add_ln66_1_fu_277_p2;
        acc_2 <= add_ln66_2_fu_308_p2;
        acc_3 <= add_ln66_3_fu_339_p2;
        acc_4 <= add_ln66_4_fu_370_p2;
        acc_5 <= add_ln66_5_fu_401_p2;
        acc_6 <= add_ln66_6_fu_432_p2;
        acc_7 <= add_ln66_7_fu_463_p2;
        empty_2_reg_540 <= empty_2_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_0_0_load_A == 1'b1)) begin
        d_i_0_0_payload_A <= d_i_0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_0_0_load_B == 1'b1)) begin
        d_i_0_0_payload_B <= d_i_0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_1_0_load_A == 1'b1)) begin
        d_i_1_0_payload_A <= d_i_1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_1_0_load_B == 1'b1)) begin
        d_i_1_0_payload_B <= d_i_1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_2_0_load_A == 1'b1)) begin
        d_i_2_0_payload_A <= d_i_2_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_2_0_load_B == 1'b1)) begin
        d_i_2_0_payload_B <= d_i_2_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_3_0_load_A == 1'b1)) begin
        d_i_3_0_payload_A <= d_i_3_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_3_0_load_B == 1'b1)) begin
        d_i_3_0_payload_B <= d_i_3_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_4_0_load_A == 1'b1)) begin
        d_i_4_0_payload_A <= d_i_4_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_4_0_load_B == 1'b1)) begin
        d_i_4_0_payload_B <= d_i_4_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_5_0_load_A == 1'b1)) begin
        d_i_5_0_payload_A <= d_i_5_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_5_0_load_B == 1'b1)) begin
        d_i_5_0_payload_B <= d_i_5_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_6_0_load_A == 1'b1)) begin
        d_i_6_0_payload_A <= d_i_6_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_6_0_load_B == 1'b1)) begin
        d_i_6_0_payload_B <= d_i_6_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_7_0_load_A == 1'b1)) begin
        d_i_7_0_payload_A <= d_i_7_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i_7_0_load_B == 1'b1)) begin
        d_i_7_0_payload_B <= d_i_7_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_0_1_load_A == 1'b1)) begin
        d_o_0_1_payload_A <= add_ln67_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_0_1_load_B == 1'b1)) begin
        d_o_0_1_payload_B <= add_ln67_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_1_1_load_A == 1'b1)) begin
        d_o_1_1_payload_A <= add_ln67_1_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_1_1_load_B == 1'b1)) begin
        d_o_1_1_payload_B <= add_ln67_1_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_2_1_load_A == 1'b1)) begin
        d_o_2_1_payload_A <= add_ln67_2_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_2_1_load_B == 1'b1)) begin
        d_o_2_1_payload_B <= add_ln67_2_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_3_1_load_A == 1'b1)) begin
        d_o_3_1_payload_A <= add_ln67_3_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_3_1_load_B == 1'b1)) begin
        d_o_3_1_payload_B <= add_ln67_3_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_4_1_load_A == 1'b1)) begin
        d_o_4_1_payload_A <= add_ln67_4_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_4_1_load_B == 1'b1)) begin
        d_o_4_1_payload_B <= add_ln67_4_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_5_1_load_A == 1'b1)) begin
        d_o_5_1_payload_A <= add_ln67_5_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_5_1_load_B == 1'b1)) begin
        d_o_5_1_payload_B <= add_ln67_5_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_6_1_load_A == 1'b1)) begin
        d_o_6_1_payload_A <= add_ln67_6_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_6_1_load_B == 1'b1)) begin
        d_o_6_1_payload_B <= add_ln67_6_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_7_1_load_A == 1'b1)) begin
        d_o_7_1_payload_A <= add_ln67_7_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((d_o_7_1_load_B == 1'b1)) begin
        d_o_7_1_payload_B <= add_ln67_7_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln64_reg_545 <= icmp_ln64_fu_492_p2;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_545 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1071)) begin
        if ((icmp_ln64_reg_545 == 1'd1)) begin
            ap_phi_mux_i_0_01_phi_fu_220_p6 = 5'd0;
        end else if ((icmp_ln64_reg_545 == 1'd0)) begin
            ap_phi_mux_i_0_01_phi_fu_220_p6 = empty_2_reg_540;
        end else begin
            ap_phi_mux_i_0_01_phi_fu_220_p6 = i_0_01_reg_216;
        end
    end else begin
        ap_phi_mux_i_0_01_phi_fu_220_p6 = i_0_01_reg_216;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_492_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_0_0_ack_out = 1'b1;
    end else begin
        d_i_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_0_0_sel == 1'b1)) begin
        d_i_0_0_data_out = d_i_0_0_payload_B;
    end else begin
        d_i_0_0_data_out = d_i_0_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_0_TDATA_blk_n = d_i_0_0_state[1'd0];
    end else begin
        d_i_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_1_0_ack_out = 1'b1;
    end else begin
        d_i_1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_1_0_sel == 1'b1)) begin
        d_i_1_0_data_out = d_i_1_0_payload_B;
    end else begin
        d_i_1_0_data_out = d_i_1_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_1_TDATA_blk_n = d_i_1_0_state[1'd0];
    end else begin
        d_i_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_2_0_ack_out = 1'b1;
    end else begin
        d_i_2_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_2_0_sel == 1'b1)) begin
        d_i_2_0_data_out = d_i_2_0_payload_B;
    end else begin
        d_i_2_0_data_out = d_i_2_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_2_TDATA_blk_n = d_i_2_0_state[1'd0];
    end else begin
        d_i_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_3_0_ack_out = 1'b1;
    end else begin
        d_i_3_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_3_0_sel == 1'b1)) begin
        d_i_3_0_data_out = d_i_3_0_payload_B;
    end else begin
        d_i_3_0_data_out = d_i_3_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_3_TDATA_blk_n = d_i_3_0_state[1'd0];
    end else begin
        d_i_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_4_0_ack_out = 1'b1;
    end else begin
        d_i_4_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_4_0_sel == 1'b1)) begin
        d_i_4_0_data_out = d_i_4_0_payload_B;
    end else begin
        d_i_4_0_data_out = d_i_4_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_4_TDATA_blk_n = d_i_4_0_state[1'd0];
    end else begin
        d_i_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_5_0_ack_out = 1'b1;
    end else begin
        d_i_5_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_5_0_sel == 1'b1)) begin
        d_i_5_0_data_out = d_i_5_0_payload_B;
    end else begin
        d_i_5_0_data_out = d_i_5_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_5_TDATA_blk_n = d_i_5_0_state[1'd0];
    end else begin
        d_i_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_6_0_ack_out = 1'b1;
    end else begin
        d_i_6_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_6_0_sel == 1'b1)) begin
        d_i_6_0_data_out = d_i_6_0_payload_B;
    end else begin
        d_i_6_0_data_out = d_i_6_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_6_TDATA_blk_n = d_i_6_0_state[1'd0];
    end else begin
        d_i_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i_7_0_ack_out = 1'b1;
    end else begin
        d_i_7_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i_7_0_sel == 1'b1)) begin
        d_i_7_0_data_out = d_i_7_0_payload_B;
    end else begin
        d_i_7_0_data_out = d_i_7_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i_7_TDATA_blk_n = d_i_7_0_state[1'd0];
    end else begin
        d_i_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_0_1_sel == 1'b1)) begin
        d_o_0_1_data_out = d_o_0_1_payload_B;
    end else begin
        d_o_0_1_data_out = d_o_0_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_0_1_vld_in = 1'b1;
    end else begin
        d_o_0_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_0_TDATA_blk_n = d_o_0_1_state[1'd1];
    end else begin
        d_o_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_1_1_sel == 1'b1)) begin
        d_o_1_1_data_out = d_o_1_1_payload_B;
    end else begin
        d_o_1_1_data_out = d_o_1_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_1_1_vld_in = 1'b1;
    end else begin
        d_o_1_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_1_TDATA_blk_n = d_o_1_1_state[1'd1];
    end else begin
        d_o_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_2_1_sel == 1'b1)) begin
        d_o_2_1_data_out = d_o_2_1_payload_B;
    end else begin
        d_o_2_1_data_out = d_o_2_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_2_1_vld_in = 1'b1;
    end else begin
        d_o_2_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_2_TDATA_blk_n = d_o_2_1_state[1'd1];
    end else begin
        d_o_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_3_1_sel == 1'b1)) begin
        d_o_3_1_data_out = d_o_3_1_payload_B;
    end else begin
        d_o_3_1_data_out = d_o_3_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_3_1_vld_in = 1'b1;
    end else begin
        d_o_3_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_3_TDATA_blk_n = d_o_3_1_state[1'd1];
    end else begin
        d_o_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_4_1_sel == 1'b1)) begin
        d_o_4_1_data_out = d_o_4_1_payload_B;
    end else begin
        d_o_4_1_data_out = d_o_4_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_4_1_vld_in = 1'b1;
    end else begin
        d_o_4_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_4_TDATA_blk_n = d_o_4_1_state[1'd1];
    end else begin
        d_o_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_5_1_sel == 1'b1)) begin
        d_o_5_1_data_out = d_o_5_1_payload_B;
    end else begin
        d_o_5_1_data_out = d_o_5_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_5_1_vld_in = 1'b1;
    end else begin
        d_o_5_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_5_TDATA_blk_n = d_o_5_1_state[1'd1];
    end else begin
        d_o_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_6_1_sel == 1'b1)) begin
        d_o_6_1_data_out = d_o_6_1_payload_B;
    end else begin
        d_o_6_1_data_out = d_o_6_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_6_1_vld_in = 1'b1;
    end else begin
        d_o_6_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_6_TDATA_blk_n = d_o_6_1_state[1'd1];
    end else begin
        d_o_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_o_7_1_sel == 1'b1)) begin
        d_o_7_1_data_out = d_o_7_1_payload_B;
    end else begin
        d_o_7_1_data_out = d_o_7_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_7_1_vld_in = 1'b1;
    end else begin
        d_o_7_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        d_o_7_TDATA_blk_n = d_o_7_1_state[1'd1];
    end else begin
        d_o_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_482_p2 = (6'd8 + zext_ln64_fu_230_p1);

assign add_ln66_1_fu_277_p2 = ($signed(sext_ln66_1_fu_269_p1) + $signed(acc_1));

assign add_ln66_2_fu_308_p2 = ($signed(sext_ln66_2_fu_300_p1) + $signed(acc_2));

assign add_ln66_3_fu_339_p2 = ($signed(sext_ln66_3_fu_331_p1) + $signed(acc_3));

assign add_ln66_4_fu_370_p2 = ($signed(sext_ln66_4_fu_362_p1) + $signed(acc_4));

assign add_ln66_5_fu_401_p2 = ($signed(sext_ln66_5_fu_393_p1) + $signed(acc_5));

assign add_ln66_6_fu_432_p2 = ($signed(sext_ln66_6_fu_424_p1) + $signed(acc_6));

assign add_ln66_7_fu_463_p2 = ($signed(sext_ln66_7_fu_455_p1) + $signed(acc_7));

assign add_ln66_fu_246_p2 = ($signed(sext_ln66_fu_238_p1) + $signed(acc_0));

assign add_ln67_1_fu_289_p1 = d_i_1_0_data_out;

assign add_ln67_1_fu_289_p2 = ($signed(trunc_ln66_1_fu_273_p1) + $signed(add_ln67_1_fu_289_p1));

assign add_ln67_2_fu_320_p1 = d_i_2_0_data_out;

assign add_ln67_2_fu_320_p2 = ($signed(trunc_ln66_2_fu_304_p1) + $signed(add_ln67_2_fu_320_p1));

assign add_ln67_3_fu_351_p1 = d_i_3_0_data_out;

assign add_ln67_3_fu_351_p2 = ($signed(trunc_ln66_3_fu_335_p1) + $signed(add_ln67_3_fu_351_p1));

assign add_ln67_4_fu_382_p1 = d_i_4_0_data_out;

assign add_ln67_4_fu_382_p2 = ($signed(trunc_ln66_4_fu_366_p1) + $signed(add_ln67_4_fu_382_p1));

assign add_ln67_5_fu_413_p1 = d_i_5_0_data_out;

assign add_ln67_5_fu_413_p2 = ($signed(trunc_ln66_5_fu_397_p1) + $signed(add_ln67_5_fu_413_p1));

assign add_ln67_6_fu_444_p1 = d_i_6_0_data_out;

assign add_ln67_6_fu_444_p2 = ($signed(trunc_ln66_6_fu_428_p1) + $signed(add_ln67_6_fu_444_p1));

assign add_ln67_7_fu_475_p1 = d_i_7_0_data_out;

assign add_ln67_7_fu_475_p2 = ($signed(trunc_ln66_7_fu_459_p1) + $signed(add_ln67_7_fu_475_p1));

assign add_ln67_fu_258_p1 = d_i_0_0_data_out;

assign add_ln67_fu_258_p2 = ($signed(trunc_ln66_fu_242_p1) + $signed(add_ln67_fu_258_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & ((d_i_7_0_vld_out == 1'b0) | (d_i_6_0_vld_out == 1'b0) | (d_i_5_0_vld_out == 1'b0) | (d_i_4_0_vld_out == 1'b0) | (d_i_3_0_vld_out == 1'b0) | (d_i_2_0_vld_out == 1'b0) | (d_i_1_0_vld_out == 1'b0) | (d_i_0_0_vld_out == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((d_o_7_1_state == 2'd1) | (d_o_6_1_state == 2'd1) | (d_o_5_1_state == 2'd1) | (d_o_4_1_state == 2'd1) | (d_o_3_1_state == 2'd1) | (d_o_2_1_state == 2'd1) | (d_o_1_1_state == 2'd1) | (d_o_0_1_state == 2'd1) | ((d_o_7_TREADY == 1'b0) & (d_o_7_1_state == 2'd3)) | ((d_o_6_TREADY == 1'b0) & (d_o_6_1_state == 2'd3)) | ((d_o_5_TREADY == 1'b0) & (d_o_5_1_state == 2'd3)) | ((d_o_4_TREADY == 1'b0) & (d_o_4_1_state == 2'd3)) | ((d_o_3_TREADY == 1'b0) & (d_o_3_1_state == 2'd3)) | ((d_o_2_TREADY == 1'b0) & (d_o_2_1_state == 2'd3)) | ((d_o_1_TREADY == 1'b0) & (d_o_1_1_state == 2'd3)) | ((d_o_0_TREADY == 1'b0) & (d_o_0_1_state == 2'd3)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((d_i_7_0_vld_out == 1'b0) | (d_i_6_0_vld_out == 1'b0) | (d_i_5_0_vld_out == 1'b0) | (d_i_4_0_vld_out == 1'b0) | (d_i_3_0_vld_out == 1'b0) | (d_i_2_0_vld_out == 1'b0) | (d_i_1_0_vld_out == 1'b0) | (d_i_0_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (d_o_7_1_state == 2'd1) | (d_o_6_1_state == 2'd1) | (d_o_5_1_state == 2'd1) | (d_o_4_1_state == 2'd1) | (d_o_3_1_state == 2'd1) | (d_o_2_1_state == 2'd1) | (d_o_1_1_state == 2'd1) | (d_o_0_1_state == 2'd1) | ((d_o_7_TREADY == 1'b0) & (d_o_7_1_state == 2'd3)) | ((d_o_6_TREADY == 1'b0) & (d_o_6_1_state == 2'd3)) | ((d_o_5_TREADY == 1'b0) & (d_o_5_1_state == 2'd3)) | ((d_o_4_TREADY == 1'b0) & (d_o_4_1_state == 2'd3)) | ((d_o_3_TREADY == 1'b0) & (d_o_3_1_state == 2'd3)) | ((d_o_2_TREADY == 1'b0) & (d_o_2_1_state == 2'd3)) | ((d_o_1_TREADY == 1'b0) & (d_o_1_1_state == 2'd3)) | ((d_o_0_TREADY == 1'b0) & (d_o_0_1_state == 2'd3)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((d_i_7_0_vld_out == 1'b0) | (d_i_6_0_vld_out == 1'b0) | (d_i_5_0_vld_out == 1'b0) | (d_i_4_0_vld_out == 1'b0) | (d_i_3_0_vld_out == 1'b0) | (d_i_2_0_vld_out == 1'b0) | (d_i_1_0_vld_out == 1'b0) | (d_i_0_0_vld_out == 1'b0) | (1'b1 == ap_block_state2_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (d_o_7_1_state == 2'd1) | (d_o_6_1_state == 2'd1) | (d_o_5_1_state == 2'd1) | (d_o_4_1_state == 2'd1) | (d_o_3_1_state == 2'd1) | (d_o_2_1_state == 2'd1) | (d_o_1_1_state == 2'd1) | (d_o_0_1_state == 2'd1) | ((d_o_7_TREADY == 1'b0) & (d_o_7_1_state == 2'd3)) | ((d_o_6_TREADY == 1'b0) & (d_o_6_1_state == 2'd3)) | ((d_o_5_TREADY == 1'b0) & (d_o_5_1_state == 2'd3)) | ((d_o_4_TREADY == 1'b0) & (d_o_4_1_state == 2'd3)) | ((d_o_3_TREADY == 1'b0) & (d_o_3_1_state == 2'd3)) | ((d_o_2_TREADY == 1'b0) & (d_o_2_1_state == 2'd3)) | ((d_o_1_TREADY == 1'b0) & (d_o_1_1_state == 2'd3)) | ((d_o_0_TREADY == 1'b0) & (d_o_0_1_state == 2'd3)))));
end

always @ (*) begin
    ap_block_state2_io = ((d_o_6_1_ack_in == 1'b0) | (d_o_5_1_ack_in == 1'b0) | (d_o_4_1_ack_in == 1'b0) | (d_o_3_1_ack_in == 1'b0) | (d_o_2_1_ack_in == 1'b0) | (d_o_1_1_ack_in == 1'b0) | (d_o_0_1_ack_in == 1'b0) | (d_o_7_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((d_i_7_0_vld_out == 1'b0) | (d_i_6_0_vld_out == 1'b0) | (d_i_5_0_vld_out == 1'b0) | (d_i_4_0_vld_out == 1'b0) | (d_i_3_0_vld_out == 1'b0) | (d_i_2_0_vld_out == 1'b0) | (d_i_1_0_vld_out == 1'b0) | (d_i_0_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((d_o_6_1_ack_in == 1'b0) | (d_o_5_1_ack_in == 1'b0) | (d_o_4_1_ack_in == 1'b0) | (d_o_3_1_ack_in == 1'b0) | (d_o_2_1_ack_in == 1'b0) | (d_o_1_1_ack_in == 1'b0) | (d_o_0_1_ack_in == 1'b0) | (d_o_7_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((d_o_7_1_state == 2'd1) | (d_o_6_1_state == 2'd1) | (d_o_5_1_state == 2'd1) | (d_o_4_1_state == 2'd1) | (d_o_3_1_state == 2'd1) | (d_o_2_1_state == 2'd1) | (d_o_1_1_state == 2'd1) | (d_o_0_1_state == 2'd1) | ((d_o_7_TREADY == 1'b0) & (d_o_7_1_state == 2'd3)) | ((d_o_6_TREADY == 1'b0) & (d_o_6_1_state == 2'd3)) | ((d_o_5_TREADY == 1'b0) & (d_o_5_1_state == 2'd3)) | ((d_o_4_TREADY == 1'b0) & (d_o_4_1_state == 2'd3)) | ((d_o_3_TREADY == 1'b0) & (d_o_3_1_state == 2'd3)) | ((d_o_2_TREADY == 1'b0) & (d_o_2_1_state == 2'd3)) | ((d_o_1_TREADY == 1'b0) & (d_o_1_1_state == 2'd3)) | ((d_o_0_TREADY == 1'b0) & (d_o_0_1_state == 2'd3)));
end

always @ (*) begin
    ap_condition_1071 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign d_i_0_0_ack_in = d_i_0_0_state[1'd1];

assign d_i_0_0_load_A = (~d_i_0_0_sel_wr & d_i_0_0_state_cmp_full);

assign d_i_0_0_load_B = (d_i_0_0_state_cmp_full & d_i_0_0_sel_wr);

assign d_i_0_0_sel = d_i_0_0_sel_rd;

assign d_i_0_0_state_cmp_full = ((d_i_0_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_0_0_vld_in = d_i_0_TVALID;

assign d_i_0_0_vld_out = d_i_0_0_state[1'd0];

assign d_i_0_TREADY = d_i_0_0_state[1'd1];

assign d_i_1_0_ack_in = d_i_1_0_state[1'd1];

assign d_i_1_0_load_A = (~d_i_1_0_sel_wr & d_i_1_0_state_cmp_full);

assign d_i_1_0_load_B = (d_i_1_0_state_cmp_full & d_i_1_0_sel_wr);

assign d_i_1_0_sel = d_i_1_0_sel_rd;

assign d_i_1_0_state_cmp_full = ((d_i_1_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_1_0_vld_in = d_i_1_TVALID;

assign d_i_1_0_vld_out = d_i_1_0_state[1'd0];

assign d_i_1_TREADY = d_i_1_0_state[1'd1];

assign d_i_2_0_ack_in = d_i_2_0_state[1'd1];

assign d_i_2_0_load_A = (~d_i_2_0_sel_wr & d_i_2_0_state_cmp_full);

assign d_i_2_0_load_B = (d_i_2_0_state_cmp_full & d_i_2_0_sel_wr);

assign d_i_2_0_sel = d_i_2_0_sel_rd;

assign d_i_2_0_state_cmp_full = ((d_i_2_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_2_0_vld_in = d_i_2_TVALID;

assign d_i_2_0_vld_out = d_i_2_0_state[1'd0];

assign d_i_2_TREADY = d_i_2_0_state[1'd1];

assign d_i_3_0_ack_in = d_i_3_0_state[1'd1];

assign d_i_3_0_load_A = (~d_i_3_0_sel_wr & d_i_3_0_state_cmp_full);

assign d_i_3_0_load_B = (d_i_3_0_state_cmp_full & d_i_3_0_sel_wr);

assign d_i_3_0_sel = d_i_3_0_sel_rd;

assign d_i_3_0_state_cmp_full = ((d_i_3_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_3_0_vld_in = d_i_3_TVALID;

assign d_i_3_0_vld_out = d_i_3_0_state[1'd0];

assign d_i_3_TREADY = d_i_3_0_state[1'd1];

assign d_i_4_0_ack_in = d_i_4_0_state[1'd1];

assign d_i_4_0_load_A = (~d_i_4_0_sel_wr & d_i_4_0_state_cmp_full);

assign d_i_4_0_load_B = (d_i_4_0_state_cmp_full & d_i_4_0_sel_wr);

assign d_i_4_0_sel = d_i_4_0_sel_rd;

assign d_i_4_0_state_cmp_full = ((d_i_4_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_4_0_vld_in = d_i_4_TVALID;

assign d_i_4_0_vld_out = d_i_4_0_state[1'd0];

assign d_i_4_TREADY = d_i_4_0_state[1'd1];

assign d_i_5_0_ack_in = d_i_5_0_state[1'd1];

assign d_i_5_0_load_A = (~d_i_5_0_sel_wr & d_i_5_0_state_cmp_full);

assign d_i_5_0_load_B = (d_i_5_0_state_cmp_full & d_i_5_0_sel_wr);

assign d_i_5_0_sel = d_i_5_0_sel_rd;

assign d_i_5_0_state_cmp_full = ((d_i_5_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_5_0_vld_in = d_i_5_TVALID;

assign d_i_5_0_vld_out = d_i_5_0_state[1'd0];

assign d_i_5_TREADY = d_i_5_0_state[1'd1];

assign d_i_6_0_ack_in = d_i_6_0_state[1'd1];

assign d_i_6_0_load_A = (~d_i_6_0_sel_wr & d_i_6_0_state_cmp_full);

assign d_i_6_0_load_B = (d_i_6_0_state_cmp_full & d_i_6_0_sel_wr);

assign d_i_6_0_sel = d_i_6_0_sel_rd;

assign d_i_6_0_state_cmp_full = ((d_i_6_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_6_0_vld_in = d_i_6_TVALID;

assign d_i_6_0_vld_out = d_i_6_0_state[1'd0];

assign d_i_6_TREADY = d_i_6_0_state[1'd1];

assign d_i_7_0_ack_in = d_i_7_0_state[1'd1];

assign d_i_7_0_load_A = (~d_i_7_0_sel_wr & d_i_7_0_state_cmp_full);

assign d_i_7_0_load_B = (d_i_7_0_state_cmp_full & d_i_7_0_sel_wr);

assign d_i_7_0_sel = d_i_7_0_sel_rd;

assign d_i_7_0_state_cmp_full = ((d_i_7_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i_7_0_vld_in = d_i_7_TVALID;

assign d_i_7_0_vld_out = d_i_7_0_state[1'd0];

assign d_i_7_TREADY = d_i_7_0_state[1'd1];

assign d_o_0_1_ack_in = d_o_0_1_state[1'd1];

assign d_o_0_1_ack_out = d_o_0_TREADY;

assign d_o_0_1_load_A = (~d_o_0_1_sel_wr & d_o_0_1_state_cmp_full);

assign d_o_0_1_load_B = (d_o_0_1_state_cmp_full & d_o_0_1_sel_wr);

assign d_o_0_1_sel = d_o_0_1_sel_rd;

assign d_o_0_1_state_cmp_full = ((d_o_0_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_0_1_vld_out = d_o_0_1_state[1'd0];

assign d_o_0_TDATA = d_o_0_1_data_out;

assign d_o_0_TVALID = d_o_0_1_state[1'd0];

assign d_o_1_1_ack_in = d_o_1_1_state[1'd1];

assign d_o_1_1_ack_out = d_o_1_TREADY;

assign d_o_1_1_load_A = (~d_o_1_1_sel_wr & d_o_1_1_state_cmp_full);

assign d_o_1_1_load_B = (d_o_1_1_state_cmp_full & d_o_1_1_sel_wr);

assign d_o_1_1_sel = d_o_1_1_sel_rd;

assign d_o_1_1_state_cmp_full = ((d_o_1_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_1_1_vld_out = d_o_1_1_state[1'd0];

assign d_o_1_TDATA = d_o_1_1_data_out;

assign d_o_1_TVALID = d_o_1_1_state[1'd0];

assign d_o_2_1_ack_in = d_o_2_1_state[1'd1];

assign d_o_2_1_ack_out = d_o_2_TREADY;

assign d_o_2_1_load_A = (~d_o_2_1_sel_wr & d_o_2_1_state_cmp_full);

assign d_o_2_1_load_B = (d_o_2_1_state_cmp_full & d_o_2_1_sel_wr);

assign d_o_2_1_sel = d_o_2_1_sel_rd;

assign d_o_2_1_state_cmp_full = ((d_o_2_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_2_1_vld_out = d_o_2_1_state[1'd0];

assign d_o_2_TDATA = d_o_2_1_data_out;

assign d_o_2_TVALID = d_o_2_1_state[1'd0];

assign d_o_3_1_ack_in = d_o_3_1_state[1'd1];

assign d_o_3_1_ack_out = d_o_3_TREADY;

assign d_o_3_1_load_A = (~d_o_3_1_sel_wr & d_o_3_1_state_cmp_full);

assign d_o_3_1_load_B = (d_o_3_1_state_cmp_full & d_o_3_1_sel_wr);

assign d_o_3_1_sel = d_o_3_1_sel_rd;

assign d_o_3_1_state_cmp_full = ((d_o_3_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_3_1_vld_out = d_o_3_1_state[1'd0];

assign d_o_3_TDATA = d_o_3_1_data_out;

assign d_o_3_TVALID = d_o_3_1_state[1'd0];

assign d_o_4_1_ack_in = d_o_4_1_state[1'd1];

assign d_o_4_1_ack_out = d_o_4_TREADY;

assign d_o_4_1_load_A = (~d_o_4_1_sel_wr & d_o_4_1_state_cmp_full);

assign d_o_4_1_load_B = (d_o_4_1_state_cmp_full & d_o_4_1_sel_wr);

assign d_o_4_1_sel = d_o_4_1_sel_rd;

assign d_o_4_1_state_cmp_full = ((d_o_4_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_4_1_vld_out = d_o_4_1_state[1'd0];

assign d_o_4_TDATA = d_o_4_1_data_out;

assign d_o_4_TVALID = d_o_4_1_state[1'd0];

assign d_o_5_1_ack_in = d_o_5_1_state[1'd1];

assign d_o_5_1_ack_out = d_o_5_TREADY;

assign d_o_5_1_load_A = (~d_o_5_1_sel_wr & d_o_5_1_state_cmp_full);

assign d_o_5_1_load_B = (d_o_5_1_state_cmp_full & d_o_5_1_sel_wr);

assign d_o_5_1_sel = d_o_5_1_sel_rd;

assign d_o_5_1_state_cmp_full = ((d_o_5_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_5_1_vld_out = d_o_5_1_state[1'd0];

assign d_o_5_TDATA = d_o_5_1_data_out;

assign d_o_5_TVALID = d_o_5_1_state[1'd0];

assign d_o_6_1_ack_in = d_o_6_1_state[1'd1];

assign d_o_6_1_ack_out = d_o_6_TREADY;

assign d_o_6_1_load_A = (~d_o_6_1_sel_wr & d_o_6_1_state_cmp_full);

assign d_o_6_1_load_B = (d_o_6_1_state_cmp_full & d_o_6_1_sel_wr);

assign d_o_6_1_sel = d_o_6_1_sel_rd;

assign d_o_6_1_state_cmp_full = ((d_o_6_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_6_1_vld_out = d_o_6_1_state[1'd0];

assign d_o_6_TDATA = d_o_6_1_data_out;

assign d_o_6_TVALID = d_o_6_1_state[1'd0];

assign d_o_7_1_ack_in = d_o_7_1_state[1'd1];

assign d_o_7_1_ack_out = d_o_7_TREADY;

assign d_o_7_1_load_A = (~d_o_7_1_sel_wr & d_o_7_1_state_cmp_full);

assign d_o_7_1_load_B = (d_o_7_1_state_cmp_full & d_o_7_1_sel_wr);

assign d_o_7_1_sel = d_o_7_1_sel_rd;

assign d_o_7_1_state_cmp_full = ((d_o_7_1_state != 2'd1) ? 1'b1 : 1'b0);

assign d_o_7_1_vld_out = d_o_7_1_state[1'd0];

assign d_o_7_TDATA = d_o_7_1_data_out;

assign d_o_7_TVALID = d_o_7_1_state[1'd0];

assign empty_2_fu_488_p1 = add_ln64_fu_482_p2[4:0];

assign icmp_ln64_fu_492_p2 = ((add_ln64_fu_482_p2 == 6'd32) ? 1'b1 : 1'b0);

assign sext_ln66_1_fu_269_p0 = d_i_1_0_data_out;

assign sext_ln66_1_fu_269_p1 = sext_ln66_1_fu_269_p0;

assign sext_ln66_2_fu_300_p0 = d_i_2_0_data_out;

assign sext_ln66_2_fu_300_p1 = sext_ln66_2_fu_300_p0;

assign sext_ln66_3_fu_331_p0 = d_i_3_0_data_out;

assign sext_ln66_3_fu_331_p1 = sext_ln66_3_fu_331_p0;

assign sext_ln66_4_fu_362_p0 = d_i_4_0_data_out;

assign sext_ln66_4_fu_362_p1 = sext_ln66_4_fu_362_p0;

assign sext_ln66_5_fu_393_p0 = d_i_5_0_data_out;

assign sext_ln66_5_fu_393_p1 = sext_ln66_5_fu_393_p0;

assign sext_ln66_6_fu_424_p0 = d_i_6_0_data_out;

assign sext_ln66_6_fu_424_p1 = sext_ln66_6_fu_424_p0;

assign sext_ln66_7_fu_455_p0 = d_i_7_0_data_out;

assign sext_ln66_7_fu_455_p1 = sext_ln66_7_fu_455_p0;

assign sext_ln66_fu_238_p0 = d_i_0_0_data_out;

assign sext_ln66_fu_238_p1 = sext_ln66_fu_238_p0;

assign trunc_ln66_1_fu_273_p1 = acc_1[15:0];

assign trunc_ln66_2_fu_304_p1 = acc_2[15:0];

assign trunc_ln66_3_fu_335_p1 = acc_3[15:0];

assign trunc_ln66_4_fu_366_p1 = acc_4[15:0];

assign trunc_ln66_5_fu_397_p1 = acc_5[15:0];

assign trunc_ln66_6_fu_428_p1 = acc_6[15:0];

assign trunc_ln66_7_fu_459_p1 = acc_7[15:0];

assign trunc_ln66_fu_242_p1 = acc_0[15:0];

assign zext_ln64_fu_230_p1 = ap_phi_mux_i_0_01_phi_fu_220_p6;

endmodule //axi_interfaces
