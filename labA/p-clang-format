#!/bin/bash
# Copyright (c) 2017, Medicine Yeh
# MIT License
# https://github.com/MedicineYeh/p-clang-format

# Turn on this to replace any pragma
REPLACE_ANY_PRAGMA=1

function replace_all()
{
    local prefix="$1"
    local keywords=("${!2}")
    local pattern="$3"

    # echo "Keywords     : ${keywords[*]}"
    # echo "Pattern      : ${pattern}"
    # echo "File Path    : ${file_pathes[*]}"

    text="$(< /dev/stdin)"
    for w in "${keywords[@]}"; do
        # echo "Replace '${prefix}$w' in '$file_path'"
        text="$(sed "s/${prefix}${w}/${pattern}${prefix}${w}/g" <<< "$text")"
    done
    echo "$text"
}

function re_replace_all()
{
    local prefix="$1"
    local keywords=("${!2}")
    local pattern="$3"

    # echo "Keywords     : ${keywords[*]}"
    # echo "Anti-Pattern : ${pattern}"
    # echo "File Path    : ${file_pathes[*]}"

    text="$(< /dev/stdin)"
    for w in "${keywords[@]}"; do
        # echo "Re:replace '${prefix}$w' in '$file_path'"
        text="$(sed "s/${pattern}${prefix}${w}/${prefix}${w}/g" <<< "$text")"
    done
    echo "$text"
}

function format()
{
    clang-format "$@"
}

function main()
{
    # This is the pattern for replacing to comments
    local comment_pattern="\/\/"
    # This is the pattern for replacing comments back to original string
    local re_comment_pattern="\/\/ *"
    # The path of files
    local file_pathes=()
    # The arguments passed to clang-format
    local args=()
    # Whether the file should be modified in-place
    local inplace=
    # Define the keywords of pragma to be escaped from formatting
    local pragma_prefix="#pragma "
    local pragma_key_words=()
    # Loop specific
    pragma_key_words+=(omp simd loop unroll ivdep vector)
    # Memory specific
    pragma_key_words+=(alloc_section)
    # Misc.
    pragma_key_words+=("cilk grainsize" offload)

    # Turn on the following line to indent any pragma
    [[ "$REPLACE_ANY_PRAGMA" == "1" ]] && pragma_key_words=("")

    # Find all files in the arguments
    for var in "$@"; do
        if [[ ! "$var" =~ ^-.* ]]; then
            # the argument is a file
            file_pathes+=("$var")
        else
            # the argument is an option
            if [[ "$var" = '-i' ]]; then
                inplace=1
            else
                args+=("$var")
            fi
        fi
    done

    if [[ -n "$file_pathes" ]]; then
        for file_path in "${file_pathes[@]}"; do
            [[ ! -r "$file_path" ]] && continue


            result="$(< "$file_path" \
                replace_all "$pragma_prefix" "pragma_key_words[@]" "$comment_pattern" \
                | format "${args[@]}" \
                | re_replace_all "$pragma_prefix" "pragma_key_words[@]" "$re_comment_pattern" "file_pathes[@]")"

            if [[ "$inplace" ]]; then
                echo "$result" > "$file_path"
            else
                echo "$result"
            fi
        done
    else
        # If no filename is given, read from stdin
        replace_all "$pragma_prefix" "pragma_key_words[@]" "$comment_pattern" \
            | format "${args[@]}" \
            | re_replace_all "$pragma_prefix" "pragma_key_words[@]" "$re_comment_pattern" "file_pathes[@]"
    fi
}

main "$@"

