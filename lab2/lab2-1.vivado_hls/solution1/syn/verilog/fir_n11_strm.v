// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_n11_strm,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.371000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=33,HLS_SYN_FF=3741,HLS_SYN_LUT=786,HLS_VERSION=2019_2}" *)

module fir_n11_strm (
        ap_clk,
        ap_rst_n,
        pstrmInput_TDATA,
        pstrmInput_TVALID,
        pstrmInput_TREADY,
        pstrmInput_TKEEP,
        pstrmInput_TSTRB,
        pstrmInput_TUSER,
        pstrmInput_TLAST,
        pstrmInput_TID,
        pstrmInput_TDEST,
        pstrmOutput_TDATA,
        pstrmOutput_TVALID,
        pstrmOutput_TREADY,
        pstrmOutput_TKEEP,
        pstrmOutput_TSTRB,
        pstrmOutput_TUSER,
        pstrmOutput_TLAST,
        pstrmOutput_TID,
        pstrmOutput_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_pp0_stage1 = 13'd4;
parameter    ap_ST_fsm_pp0_stage2 = 13'd8;
parameter    ap_ST_fsm_pp0_stage3 = 13'd16;
parameter    ap_ST_fsm_pp0_stage4 = 13'd32;
parameter    ap_ST_fsm_pp0_stage5 = 13'd64;
parameter    ap_ST_fsm_pp0_stage6 = 13'd128;
parameter    ap_ST_fsm_pp0_stage7 = 13'd256;
parameter    ap_ST_fsm_pp0_stage8 = 13'd512;
parameter    ap_ST_fsm_pp0_stage9 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 13'd2048;
parameter    ap_ST_fsm_state22 = 13'd4096;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] pstrmInput_TDATA;
input   pstrmInput_TVALID;
output   pstrmInput_TREADY;
input  [3:0] pstrmInput_TKEEP;
input  [3:0] pstrmInput_TSTRB;
input  [0:0] pstrmInput_TUSER;
input  [0:0] pstrmInput_TLAST;
input  [0:0] pstrmInput_TID;
input  [0:0] pstrmInput_TDEST;
output  [31:0] pstrmOutput_TDATA;
output   pstrmOutput_TVALID;
input   pstrmOutput_TREADY;
output  [3:0] pstrmOutput_TKEEP;
output  [3:0] pstrmOutput_TSTRB;
output  [0:0] pstrmOutput_TUSER;
output  [0:0] pstrmOutput_TLAST;
output  [0:0] pstrmOutput_TID;
output  [0:0] pstrmOutput_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg pstrmInput_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [3:0] an32Coef_address0;
reg    an32Coef_ce0;
wire   [31:0] an32Coef_q0;
wire   [31:0] regXferLeng_V;
reg  signed [31:0] an32ShiftReg_9;
reg  signed [31:0] an32ShiftReg_8;
reg  signed [31:0] an32ShiftReg_7;
reg  signed [31:0] an32ShiftReg_6;
reg  signed [31:0] an32ShiftReg_5;
reg  signed [31:0] an32ShiftReg_4;
reg  signed [31:0] an32ShiftReg_3;
reg  signed [31:0] an32ShiftReg_2;
reg  signed [31:0] an32ShiftReg_1;
reg  signed [31:0] an32ShiftReg_0;
reg    pstrmInput_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage6;
reg   [0:0] icmp_ln22_reg_630;
reg    pstrmOutput_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage7;
reg   [0:0] icmp_ln22_reg_630_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
reg   [30:0] n32XferCnt_0_reg_272;
reg  signed [31:0] reg_283;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_state19_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
reg  signed [31:0] reg_287;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_state20_pp0_stage7_iter1;
reg    ap_block_state20_io;
reg    ap_block_pp0_stage7_11001;
reg  signed [31:0] reg_291;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_state21_pp0_stage8_iter1;
reg    ap_block_state21_io;
reg    ap_block_pp0_stage8_11001;
reg  signed [31:0] reg_295;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state17_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg  signed [31:0] reg_299;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state18_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg   [30:0] tmp_1_reg_570;
wire   [0:0] icmp_ln22_fu_323_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln22_fu_328_p2;
reg   [30:0] add_ln22_reg_634;
reg  signed [31:0] an32ShiftReg_7_load_reg_644;
reg  signed [31:0] tmp_data_V_1_reg_660;
reg   [3:0] tmp_keep_V_reg_666;
reg   [3:0] tmp_keep_V_reg_666_pp0_iter1_reg;
reg   [3:0] tmp_strb_V_reg_671;
reg   [3:0] tmp_strb_V_reg_671_pp0_iter1_reg;
reg   [0:0] tmp_user_V_reg_676;
reg   [0:0] tmp_user_V_reg_676_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_681;
reg   [0:0] tmp_last_V_reg_681_pp0_iter1_reg;
reg   [0:0] tmp_id_V_reg_686;
reg   [0:0] tmp_id_V_reg_686_pp0_iter1_reg;
reg   [0:0] tmp_dest_V_reg_691;
reg   [0:0] tmp_dest_V_reg_691_pp0_iter1_reg;
wire   [31:0] grp_fu_338_p2;
reg   [31:0] mul_ln35_reg_696;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] mul_ln35_2_reg_706;
wire   [31:0] grp_fu_364_p2;
reg   [31:0] mul_ln35_3_reg_711;
wire   [31:0] add_ln35_4_fu_457_p2;
reg   [31:0] add_ln35_4_reg_721;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] mul_ln35_4_reg_726;
wire   [31:0] grp_fu_414_p2;
reg   [31:0] mul_ln35_10_reg_741;
wire   [31:0] grp_fu_430_p2;
reg   [31:0] mul_ln35_1_reg_746;
reg  signed [31:0] an32Coef_load_9_reg_756;
wire   [31:0] add_ln35_7_fu_513_p2;
reg   [31:0] add_ln35_7_reg_761;
wire   [31:0] grp_fu_451_p2;
reg   [31:0] mul_ln35_5_reg_766;
wire   [31:0] add_ln35_8_fu_542_p2;
reg   [31:0] add_ln35_8_reg_776;
wire   [31:0] grp_fu_471_p2;
reg   [31:0] mul_ln35_6_reg_781;
wire   [31:0] grp_fu_487_p2;
reg   [31:0] mul_ln35_7_reg_786;
wire   [31:0] grp_fu_503_p2;
reg   [31:0] mul_ln35_8_reg_791;
wire   [31:0] add_ln35_2_fu_551_p2;
reg   [31:0] add_ln35_2_reg_796;
wire   [31:0] grp_fu_528_p2;
reg   [31:0] mul_ln35_9_reg_801;
wire   [31:0] add_ln35_fu_556_p2;
reg   [31:0] add_ln35_reg_806;
wire    ap_block_pp0_stage10_subdone;
reg    ap_predicate_tran21to22_state12;
reg    ap_block_pp0_stage8_subdone;
reg   [30:0] ap_phi_mux_n32XferCnt_0_phi_fu_276_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage7_01001;
wire   [32:0] zext_ln215_fu_303_p1;
wire   [32:0] ret_V_fu_307_p2;
wire   [31:0] add_ln35_6_fu_509_p2;
wire   [31:0] add_ln35_5_fu_538_p2;
wire   [31:0] add_ln35_1_fu_547_p2;
wire   [31:0] add_ln35_3_fu_560_p2;
reg    grp_fu_338_ce;
reg    grp_fu_348_ce;
reg    grp_fu_364_ce;
reg    grp_fu_380_ce;
reg    grp_fu_414_ce;
reg    grp_fu_430_ce;
reg    grp_fu_451_ce;
reg    grp_fu_471_ce;
reg    grp_fu_487_ce;
reg    grp_fu_503_ce;
reg    grp_fu_528_ce;
wire    ap_CS_fsm_state22;
wire    regslice_both_pstrmOutput_V_data_V_U_apdone_blk;
reg   [12:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage9_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_pstrmInput_V_data_V_U_apdone_blk;
wire  signed [31:0] pstrmInput_TDATA_int;
wire    pstrmInput_TVALID_int;
reg    pstrmInput_TREADY_int;
wire    regslice_both_pstrmInput_V_data_V_U_ack_in;
wire    regslice_both_pstrmInput_V_keep_V_U_apdone_blk;
wire   [3:0] pstrmInput_TKEEP_int;
wire    regslice_both_pstrmInput_V_keep_V_U_vld_out;
wire    regslice_both_pstrmInput_V_keep_V_U_ack_in;
wire    regslice_both_pstrmInput_V_strb_V_U_apdone_blk;
wire   [3:0] pstrmInput_TSTRB_int;
wire    regslice_both_pstrmInput_V_strb_V_U_vld_out;
wire    regslice_both_pstrmInput_V_strb_V_U_ack_in;
wire    regslice_both_pstrmInput_V_user_V_U_apdone_blk;
wire   [0:0] pstrmInput_TUSER_int;
wire    regslice_both_pstrmInput_V_user_V_U_vld_out;
wire    regslice_both_pstrmInput_V_user_V_U_ack_in;
wire    regslice_both_pstrmInput_V_last_V_U_apdone_blk;
wire   [0:0] pstrmInput_TLAST_int;
wire    regslice_both_pstrmInput_V_last_V_U_vld_out;
wire    regslice_both_pstrmInput_V_last_V_U_ack_in;
wire    regslice_both_pstrmInput_V_id_V_U_apdone_blk;
wire   [0:0] pstrmInput_TID_int;
wire    regslice_both_pstrmInput_V_id_V_U_vld_out;
wire    regslice_both_pstrmInput_V_id_V_U_ack_in;
wire    regslice_both_pstrmInput_V_dest_V_U_apdone_blk;
wire   [0:0] pstrmInput_TDEST_int;
wire    regslice_both_pstrmInput_V_dest_V_U_vld_out;
wire    regslice_both_pstrmInput_V_dest_V_U_ack_in;
wire   [31:0] pstrmOutput_TDATA_int;
reg    pstrmOutput_TVALID_int;
wire    pstrmOutput_TREADY_int;
wire    regslice_both_pstrmOutput_V_data_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_keep_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_keep_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_strb_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_strb_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_user_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_user_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_last_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_last_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_id_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_id_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_dest_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 an32ShiftReg_9 = 32'd0;
#0 an32ShiftReg_8 = 32'd0;
#0 an32ShiftReg_7 = 32'd0;
#0 an32ShiftReg_6 = 32'd0;
#0 an32ShiftReg_5 = 32'd0;
#0 an32ShiftReg_4 = 32'd0;
#0 an32ShiftReg_3 = 32'd0;
#0 an32ShiftReg_2 = 32'd0;
#0 an32ShiftReg_1 = 32'd0;
#0 an32ShiftReg_0 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

fir_n11_strm_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fir_n11_strm_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .an32Coef_address0(an32Coef_address0),
    .an32Coef_ce0(an32Coef_ce0),
    .an32Coef_q0(an32Coef_q0),
    .regXferLeng_V(regXferLeng_V)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_9),
    .din1(reg_283),
    .ce(grp_fu_338_ce),
    .dout(grp_fu_338_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_7),
    .din1(reg_287),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_6),
    .din1(reg_291),
    .ce(grp_fu_364_ce),
    .dout(grp_fu_364_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_5),
    .din1(reg_295),
    .ce(grp_fu_380_ce),
    .dout(grp_fu_380_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(pstrmInput_TDATA_int),
    .din1(reg_299),
    .ce(grp_fu_414_ce),
    .dout(grp_fu_414_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_8),
    .din1(reg_283),
    .ce(grp_fu_430_ce),
    .dout(grp_fu_430_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_4),
    .din1(reg_287),
    .ce(grp_fu_451_ce),
    .dout(grp_fu_451_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_3),
    .din1(reg_291),
    .ce(grp_fu_471_ce),
    .dout(grp_fu_471_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_2),
    .din1(reg_295),
    .ce(grp_fu_487_ce),
    .dout(grp_fu_487_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_1),
    .din1(reg_299),
    .ce(grp_fu_503_ce),
    .dout(grp_fu_503_p2)
);

fir_n11_strm_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_bkb_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(an32ShiftReg_0),
    .din1(an32Coef_load_9_reg_756),
    .ce(grp_fu_528_ce),
    .dout(grp_fu_528_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_pstrmInput_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TDATA),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_data_V_U_ack_in),
    .data_out(pstrmInput_TDATA_int),
    .vld_out(pstrmInput_TVALID_int),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmInput_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TKEEP),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_keep_V_U_ack_in),
    .data_out(pstrmInput_TKEEP_int),
    .vld_out(regslice_both_pstrmInput_V_keep_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmInput_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TSTRB),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_strb_V_U_ack_in),
    .data_out(pstrmInput_TSTRB_int),
    .vld_out(regslice_both_pstrmInput_V_strb_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TUSER),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_user_V_U_ack_in),
    .data_out(pstrmInput_TUSER_int),
    .vld_out(regslice_both_pstrmInput_V_user_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TLAST),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_last_V_U_ack_in),
    .data_out(pstrmInput_TLAST_int),
    .vld_out(regslice_both_pstrmInput_V_last_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TID),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_id_V_U_ack_in),
    .data_out(pstrmInput_TID_int),
    .vld_out(regslice_both_pstrmInput_V_id_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TDEST),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_dest_V_U_ack_in),
    .data_out(pstrmInput_TDEST_int),
    .vld_out(regslice_both_pstrmInput_V_dest_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_pstrmOutput_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmOutput_TDATA_int),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(pstrmOutput_TREADY_int),
    .data_out(pstrmOutput_TDATA),
    .vld_out(regslice_both_pstrmOutput_V_data_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmOutput_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_666_pp0_iter1_reg),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TKEEP),
    .vld_out(regslice_both_pstrmOutput_V_keep_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmOutput_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_671_pp0_iter1_reg),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TSTRB),
    .vld_out(regslice_both_pstrmOutput_V_strb_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_676_pp0_iter1_reg),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TUSER),
    .vld_out(regslice_both_pstrmOutput_V_user_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_681_pp0_iter1_reg),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TLAST),
    .vld_out(regslice_both_pstrmOutput_V_last_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_686_pp0_iter1_reg),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TID),
    .vld_out(regslice_both_pstrmOutput_V_id_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_691_pp0_iter1_reg),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TDEST),
    .vld_out(regslice_both_pstrmOutput_V_dest_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_predicate_tran21to22_state12 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (tmp_last_V_reg_681 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n32XferCnt_0_reg_272 <= add_ln22_reg_634;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n32XferCnt_0_reg_272 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln22_reg_634 <= add_ln22_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln35_2_reg_796 <= add_ln35_2_fu_551_p2;
        mul_ln35_8_reg_791 <= grp_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        add_ln35_4_reg_721 <= add_ln35_4_fu_457_p2;
        mul_ln35_3_reg_711 <= grp_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_7_reg_761 <= add_ln35_7_fu_513_p2;
        mul_ln35_1_reg_746 <= grp_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln35_8_reg_776 <= add_ln35_8_fu_542_p2;
        mul_ln35_5_reg_766 <= grp_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        add_ln35_reg_806 <= add_ln35_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        an32Coef_load_9_reg_756 <= an32Coef_q0;
        an32ShiftReg_2 <= an32ShiftReg_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        an32ShiftReg_0 <= tmp_data_V_1_reg_660;
        an32ShiftReg_1 <= an32ShiftReg_0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        an32ShiftReg_3 <= an32ShiftReg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        an32ShiftReg_4 <= an32ShiftReg_3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        an32ShiftReg_5 <= an32ShiftReg_4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        an32ShiftReg_6 <= an32ShiftReg_5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        an32ShiftReg_7 <= an32ShiftReg_6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        an32ShiftReg_7_load_reg_644 <= an32ShiftReg_7;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        an32ShiftReg_8 <= an32ShiftReg_7_load_reg_644;
        an32ShiftReg_9 <= an32ShiftReg_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_reg_630 <= icmp_ln22_fu_323_p2;
        icmp_ln22_reg_630_pp0_iter1_reg <= icmp_ln22_reg_630;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_ln35_10_reg_741 <= grp_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul_ln35_2_reg_706 <= grp_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_ln35_4_reg_726 <= grp_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        mul_ln35_6_reg_781 <= grp_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln35_7_reg_786 <= grp_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul_ln35_9_reg_801 <= grp_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        mul_ln35_reg_696 <= grp_fu_338_p2;
        tmp_data_V_1_reg_660 <= pstrmInput_TDATA_int;
        tmp_dest_V_reg_691 <= pstrmInput_TDEST_int;
        tmp_id_V_reg_686 <= pstrmInput_TID_int;
        tmp_keep_V_reg_666 <= pstrmInput_TKEEP_int;
        tmp_last_V_reg_681 <= pstrmInput_TLAST_int;
        tmp_strb_V_reg_671 <= pstrmInput_TSTRB_int;
        tmp_user_V_reg_676 <= pstrmInput_TUSER_int;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln22_reg_630 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln22_reg_630 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        reg_283 <= an32Coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln22_reg_630 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_287 <= an32Coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_291 <= an32Coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_295 <= an32Coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_299 <= an32Coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_570 <= {{ret_V_fu_307_p2[32:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        tmp_dest_V_reg_691_pp0_iter1_reg <= tmp_dest_V_reg_691;
        tmp_id_V_reg_686_pp0_iter1_reg <= tmp_id_V_reg_686;
        tmp_keep_V_reg_666_pp0_iter1_reg <= tmp_keep_V_reg_666;
        tmp_last_V_reg_681_pp0_iter1_reg <= tmp_last_V_reg_681;
        tmp_strb_V_reg_671_pp0_iter1_reg <= tmp_strb_V_reg_671;
        tmp_user_V_reg_676_pp0_iter1_reg <= tmp_user_V_reg_676;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            an32Coef_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            an32Coef_address0 = 64'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            an32Coef_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            an32Coef_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            an32Coef_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            an32Coef_address0 = 64'd9;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            an32Coef_address0 = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            an32Coef_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            an32Coef_address0 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            an32Coef_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            an32Coef_address0 = 64'd10;
        end else begin
            an32Coef_address0 = 'bx;
        end
    end else begin
        an32Coef_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        an32Coef_ce0 = 1'b1;
    end else begin
        an32Coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (tmp_last_V_reg_681 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_n32XferCnt_0_phi_fu_276_p4 = add_ln22_reg_634;
    end else begin
        ap_phi_mux_n32XferCnt_0_phi_fu_276_p4 = n32XferCnt_0_reg_272;
    end
end

always @ (*) begin
    if (((regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        grp_fu_338_ce = 1'b1;
    end else begin
        grp_fu_338_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_364_ce = 1'b1;
    end else begin
        grp_fu_364_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_380_ce = 1'b1;
    end else begin
        grp_fu_380_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_414_ce = 1'b1;
    end else begin
        grp_fu_414_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_430_ce = 1'b1;
    end else begin
        grp_fu_430_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_451_ce = 1'b1;
    end else begin
        grp_fu_451_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_471_ce = 1'b1;
    end else begin
        grp_fu_471_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_487_ce = 1'b1;
    end else begin
        grp_fu_487_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_503_ce = 1'b1;
    end else begin
        grp_fu_503_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_528_ce = 1'b1;
    end else begin
        grp_fu_528_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        pstrmInput_TDATA_blk_n = pstrmInput_TVALID_int;
    end else begin
        pstrmInput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_pstrmInput_V_data_V_U_ack_in == 1'b1) & (pstrmInput_TVALID == 1'b1))) begin
        pstrmInput_TREADY = 1'b1;
    end else begin
        pstrmInput_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_630 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        pstrmInput_TREADY_int = 1'b1;
    end else begin
        pstrmInput_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        pstrmOutput_TDATA_blk_n = pstrmOutput_TREADY_int;
    end else begin
        pstrmOutput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        pstrmOutput_TVALID_int = 1'b1;
    end else begin
        pstrmOutput_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_328_p2 = (ap_phi_mux_n32XferCnt_0_phi_fu_276_p4 + 31'd1);

assign add_ln35_1_fu_547_p2 = (mul_ln35_6_reg_781 + mul_ln35_5_reg_766);

assign add_ln35_2_fu_551_p2 = (add_ln35_1_fu_547_p2 + mul_ln35_7_reg_786);

assign add_ln35_3_fu_560_p2 = (add_ln35_2_reg_796 + add_ln35_reg_806);

assign add_ln35_4_fu_457_p2 = (mul_ln35_reg_696 + mul_ln35_2_reg_706);

assign add_ln35_5_fu_538_p2 = (add_ln35_4_reg_721 + mul_ln35_1_reg_746);

assign add_ln35_6_fu_509_p2 = (mul_ln35_3_reg_711 + mul_ln35_10_reg_741);

assign add_ln35_7_fu_513_p2 = (add_ln35_6_fu_509_p2 + mul_ln35_4_reg_726);

assign add_ln35_8_fu_542_p2 = (add_ln35_7_reg_761 + add_ln35_5_fu_538_p2);

assign add_ln35_fu_556_p2 = (mul_ln35_8_reg_791 + mul_ln35_9_reg_801);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd12];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln22_reg_630 == 1'd1) & (pstrmInput_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln22_reg_630 == 1'd1) & (pstrmInput_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (pstrmOutput_TREADY_int == 1'b0));
end

assign ap_block_state20_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((icmp_ln22_reg_630_pp0_iter1_reg == 1'd1) & (pstrmOutput_TREADY_int == 1'b0));
end

assign ap_block_state21_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((icmp_ln22_reg_630 == 1'd1) & (pstrmInput_TVALID_int == 1'b0));
end

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran21to22_state12 = ((tmp_last_V_reg_681 == 1'd1) | (icmp_ln22_reg_630 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln22_fu_323_p2 = ((ap_phi_mux_n32XferCnt_0_phi_fu_276_p4 < tmp_1_reg_570) ? 1'b1 : 1'b0);

assign pstrmOutput_TDATA_int = (add_ln35_8_reg_776 + add_ln35_3_fu_560_p2);

assign pstrmOutput_TVALID = regslice_both_pstrmOutput_V_data_V_U_vld_out;

assign ret_V_fu_307_p2 = (zext_ln215_fu_303_p1 + 33'd3);

assign zext_ln215_fu_303_p1 = regXferLeng_V;

endmodule //fir_n11_strm
