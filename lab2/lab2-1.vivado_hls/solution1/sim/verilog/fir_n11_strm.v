// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_n11_strm,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.102000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=753,HLS_SYN_LUT=522,HLS_VERSION=2019_2}" *)

module fir_n11_strm (
        ap_clk,
        ap_rst_n,
        pstrmInput_TDATA,
        pstrmInput_TVALID,
        pstrmInput_TREADY,
        pstrmInput_TKEEP,
        pstrmInput_TSTRB,
        pstrmInput_TUSER,
        pstrmInput_TLAST,
        pstrmInput_TID,
        pstrmInput_TDEST,
        pstrmOutput_TDATA,
        pstrmOutput_TVALID,
        pstrmOutput_TREADY,
        pstrmOutput_TKEEP,
        pstrmOutput_TSTRB,
        pstrmOutput_TUSER,
        pstrmOutput_TLAST,
        pstrmOutput_TID,
        pstrmOutput_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_pp0_stage1 = 6'd8;
parameter    ap_ST_fsm_state11 = 6'd16;
parameter    ap_ST_fsm_state12 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] pstrmInput_TDATA;
input   pstrmInput_TVALID;
output   pstrmInput_TREADY;
input  [3:0] pstrmInput_TKEEP;
input  [3:0] pstrmInput_TSTRB;
input  [0:0] pstrmInput_TUSER;
input  [0:0] pstrmInput_TLAST;
input  [0:0] pstrmInput_TID;
input  [0:0] pstrmInput_TDEST;
output  [31:0] pstrmOutput_TDATA;
output   pstrmOutput_TVALID;
input   pstrmOutput_TREADY;
output  [3:0] pstrmOutput_TKEEP;
output  [3:0] pstrmOutput_TSTRB;
output  [0:0] pstrmOutput_TUSER;
output  [0:0] pstrmOutput_TLAST;
output  [0:0] pstrmOutput_TID;
output  [0:0] pstrmOutput_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg pstrmInput_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] an32Coef_address0;
reg    an32Coef_ce0;
wire   [31:0] an32Coef_q0;
wire   [31:0] regXferLeng_V;
reg   [3:0] an32ShiftReg_address0;
reg    an32ShiftReg_ce0;
reg    an32ShiftReg_we0;
wire   [31:0] an32ShiftReg_q0;
wire   [3:0] an32ShiftReg_address1;
reg    an32ShiftReg_ce1;
reg    an32ShiftReg_we1;
reg    pstrmInput_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln22_fu_271_p2;
reg    pstrmOutput_TDATA_blk_n;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [0:0] icmp_ln22_reg_354;
reg   [31:0] tmp_data_V_reg_209;
reg   [4:0] n32Loop_0_reg_222;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [30:0] tmp_2_reg_349;
reg    ap_block_state2;
wire   [30:0] add_ln22_fu_276_p2;
reg   [30:0] add_ln22_reg_358;
reg   [31:0] tmp_data_V_1_reg_363;
reg   [3:0] tmp_keep_V_reg_369;
reg   [3:0] tmp_strb_V_reg_374;
reg   [0:0] tmp_user_V_reg_379;
reg   [0:0] tmp_last_V_reg_384;
reg   [0:0] tmp_id_V_reg_389;
reg   [0:0] tmp_dest_V_reg_394;
wire   [0:0] tmp_3_fu_310_p3;
reg   [0:0] tmp_3_reg_399;
reg   [0:0] tmp_3_reg_399_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_399_pp0_iter2_reg;
reg   [0:0] tmp_3_reg_399_pp0_iter3_reg;
wire   [0:0] icmp_ln28_fu_318_p2;
reg   [0:0] icmp_ln28_reg_403;
reg   [31:0] n32Data_1_reg_417;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state10_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] an32Coef_load_reg_423;
wire   [4:0] grp_fu_244_p2;
reg   [4:0] n32Loop_reg_428;
wire   [31:0] grp_fu_339_p2;
reg   [31:0] mul_ln35_reg_433;
wire   [31:0] n32Acc_fu_344_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [30:0] n32XferCnt_0_reg_198;
wire    regslice_both_pstrmOutput_V_data_V_U_apdone_blk;
reg    ap_block_state12_io;
reg   [4:0] ap_phi_mux_n32Loop_0_phi_fu_226_p4;
wire    ap_block_pp0_stage0;
wire  signed [31:0] ap_phi_reg_pp0_iter0_n32Data_0_reg_234;
reg  signed [31:0] ap_phi_reg_pp0_iter1_n32Data_0_reg_234;
wire   [63:0] zext_ln32_fu_324_p1;
wire   [63:0] zext_ln35_fu_329_p1;
wire   [63:0] zext_ln32_1_fu_334_p1;
wire    ap_block_pp0_stage1;
reg   [4:0] grp_fu_244_p0;
wire   [32:0] zext_ln215_fu_251_p1;
wire   [32:0] ret_V_fu_255_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_pstrmInput_V_data_V_U_apdone_blk;
wire   [31:0] pstrmInput_TDATA_int;
wire    pstrmInput_TVALID_int;
reg    pstrmInput_TREADY_int;
wire    regslice_both_pstrmInput_V_data_V_U_ack_in;
wire    regslice_both_pstrmInput_V_keep_V_U_apdone_blk;
wire   [3:0] pstrmInput_TKEEP_int;
wire    regslice_both_pstrmInput_V_keep_V_U_vld_out;
wire    regslice_both_pstrmInput_V_keep_V_U_ack_in;
wire    regslice_both_pstrmInput_V_strb_V_U_apdone_blk;
wire   [3:0] pstrmInput_TSTRB_int;
wire    regslice_both_pstrmInput_V_strb_V_U_vld_out;
wire    regslice_both_pstrmInput_V_strb_V_U_ack_in;
wire    regslice_both_pstrmInput_V_user_V_U_apdone_blk;
wire   [0:0] pstrmInput_TUSER_int;
wire    regslice_both_pstrmInput_V_user_V_U_vld_out;
wire    regslice_both_pstrmInput_V_user_V_U_ack_in;
wire    regslice_both_pstrmInput_V_last_V_U_apdone_blk;
wire   [0:0] pstrmInput_TLAST_int;
wire    regslice_both_pstrmInput_V_last_V_U_vld_out;
wire    regslice_both_pstrmInput_V_last_V_U_ack_in;
wire    regslice_both_pstrmInput_V_id_V_U_apdone_blk;
wire   [0:0] pstrmInput_TID_int;
wire    regslice_both_pstrmInput_V_id_V_U_vld_out;
wire    regslice_both_pstrmInput_V_id_V_U_ack_in;
wire    regslice_both_pstrmInput_V_dest_V_U_apdone_blk;
wire   [0:0] pstrmInput_TDEST_int;
wire    regslice_both_pstrmInput_V_dest_V_U_vld_out;
wire    regslice_both_pstrmInput_V_dest_V_U_ack_in;
reg    pstrmOutput_TVALID_int;
wire    pstrmOutput_TREADY_int;
wire    regslice_both_pstrmOutput_V_data_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_keep_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_keep_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_strb_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_strb_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_user_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_user_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_last_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_last_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_id_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_id_V_U_vld_out;
wire    regslice_both_pstrmOutput_V_dest_V_U_apdone_blk;
wire    regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy;
wire    regslice_both_pstrmOutput_V_dest_V_U_vld_out;
reg    ap_condition_212;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

fir_n11_strm_an32bkb #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
an32ShiftReg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(an32ShiftReg_address0),
    .ce0(an32ShiftReg_ce0),
    .we0(an32ShiftReg_we0),
    .d0(tmp_data_V_1_reg_363),
    .q0(an32ShiftReg_q0),
    .address1(an32ShiftReg_address1),
    .ce1(an32ShiftReg_ce1),
    .we1(an32ShiftReg_we1),
    .d1(n32Data_1_reg_417)
);

fir_n11_strm_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fir_n11_strm_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .an32Coef_address0(an32Coef_address0),
    .an32Coef_ce0(an32Coef_ce0),
    .an32Coef_q0(an32Coef_q0),
    .regXferLeng_V(regXferLeng_V)
);

fir_n11_strm_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_n11_strm_mul_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_reg_pp0_iter1_n32Data_0_reg_234),
    .din1(an32Coef_load_reg_423),
    .ce(1'b1),
    .dout(grp_fu_339_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_pstrmInput_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TDATA),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_data_V_U_ack_in),
    .data_out(pstrmInput_TDATA_int),
    .vld_out(pstrmInput_TVALID_int),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmInput_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TKEEP),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_keep_V_U_ack_in),
    .data_out(pstrmInput_TKEEP_int),
    .vld_out(regslice_both_pstrmInput_V_keep_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmInput_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TSTRB),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_strb_V_U_ack_in),
    .data_out(pstrmInput_TSTRB_int),
    .vld_out(regslice_both_pstrmInput_V_strb_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TUSER),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_user_V_U_ack_in),
    .data_out(pstrmInput_TUSER_int),
    .vld_out(regslice_both_pstrmInput_V_user_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TLAST),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_last_V_U_ack_in),
    .data_out(pstrmInput_TLAST_int),
    .vld_out(regslice_both_pstrmInput_V_last_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TID),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_id_V_U_ack_in),
    .data_out(pstrmInput_TID_int),
    .vld_out(regslice_both_pstrmInput_V_id_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmInput_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pstrmInput_TDEST),
    .vld_in(pstrmInput_TVALID),
    .ack_in(regslice_both_pstrmInput_V_dest_V_U_ack_in),
    .data_out(pstrmInput_TDEST_int),
    .vld_out(regslice_both_pstrmInput_V_dest_V_U_vld_out),
    .ack_out(pstrmInput_TREADY_int),
    .apdone_blk(regslice_both_pstrmInput_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_pstrmOutput_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_data_V_reg_209),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(pstrmOutput_TREADY_int),
    .data_out(pstrmOutput_TDATA),
    .vld_out(regslice_both_pstrmOutput_V_data_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmOutput_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_369),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TKEEP),
    .vld_out(regslice_both_pstrmOutput_V_keep_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_pstrmOutput_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_374),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TSTRB),
    .vld_out(regslice_both_pstrmOutput_V_strb_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_379),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TUSER),
    .vld_out(regslice_both_pstrmOutput_V_user_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_384),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TLAST),
    .vld_out(regslice_both_pstrmOutput_V_last_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_389),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TID),
    .vld_out(regslice_both_pstrmOutput_V_id_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_pstrmOutput_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_394),
    .vld_in(pstrmOutput_TVALID_int),
    .ack_in(regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy),
    .data_out(pstrmOutput_TDEST),
    .vld_out(regslice_both_pstrmOutput_V_dest_V_U_vld_out),
    .ack_out(pstrmOutput_TREADY),
    .apdone_blk(regslice_both_pstrmOutput_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_212)) begin
        if (((icmp_ln28_reg_403 == 1'd0) & (tmp_3_reg_399 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_n32Data_0_reg_234 <= an32ShiftReg_q0;
        end else if (((icmp_ln28_reg_403 == 1'd1) & (tmp_3_reg_399 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_n32Data_0_reg_234 <= tmp_data_V_1_reg_363;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_n32Data_0_reg_234 <= ap_phi_reg_pp0_iter0_n32Data_0_reg_234;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_399 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        n32Loop_0_reg_222 <= n32Loop_reg_428;
    end else if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        n32Loop_0_reg_222 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state12_io) | (regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b1)) & (icmp_ln22_reg_354 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (tmp_last_V_reg_384 == 1'd0))) begin
        n32XferCnt_0_reg_198 <= add_ln22_reg_358;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n32XferCnt_0_reg_198 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_reg_399_pp0_iter3_reg == 1'd0))) begin
        tmp_data_V_reg_209 <= n32Acc_fu_344_p2;
    end else if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_209 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln22_reg_358 <= add_ln22_fu_276_p2;
        icmp_ln22_reg_354 <= icmp_ln22_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_reg_399 == 1'd0))) begin
        an32Coef_load_reg_423 <= an32Coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_fu_310_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln28_reg_403 <= icmp_ln28_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_399_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln35_reg_433 <= grp_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln28_reg_403 == 1'd0) & (tmp_3_reg_399 == 1'd0))) begin
        n32Data_1_reg_417 <= an32ShiftReg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_reg_399 == 1'd0))) begin
        n32Loop_reg_428 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_2_reg_349 <= {{ret_V_fu_255_p2[32:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_reg_399 <= ap_phi_mux_n32Loop_0_phi_fu_226_p4[32'd4];
        tmp_3_reg_399_pp0_iter1_reg <= tmp_3_reg_399;
        tmp_3_reg_399_pp0_iter2_reg <= tmp_3_reg_399_pp0_iter1_reg;
        tmp_3_reg_399_pp0_iter3_reg <= tmp_3_reg_399_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_1_reg_363 <= pstrmInput_TDATA_int;
        tmp_dest_V_reg_394 <= pstrmInput_TDEST_int;
        tmp_id_V_reg_389 <= pstrmInput_TID_int;
        tmp_keep_V_reg_369 <= pstrmInput_TKEEP_int;
        tmp_last_V_reg_384 <= pstrmInput_TLAST_int;
        tmp_strb_V_reg_374 <= pstrmInput_TSTRB_int;
        tmp_user_V_reg_379 <= pstrmInput_TUSER_int;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        an32Coef_ce0 = 1'b1;
    end else begin
        an32Coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            an32ShiftReg_address0 = 4'd0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            an32ShiftReg_address0 = zext_ln32_fu_324_p1;
        end else begin
            an32ShiftReg_address0 = 'bx;
        end
    end else begin
        an32ShiftReg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        an32ShiftReg_ce0 = 1'b1;
    end else begin
        an32ShiftReg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        an32ShiftReg_ce1 = 1'b1;
    end else begin
        an32ShiftReg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_403 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_reg_399 == 1'd0))) begin
        an32ShiftReg_we0 = 1'b1;
    end else begin
        an32ShiftReg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln28_reg_403 == 1'd0) & (tmp_3_reg_399 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        an32ShiftReg_we1 = 1'b1;
    end else begin
        an32ShiftReg_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_3_fu_310_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state12_io) | (regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state12) & ((icmp_ln22_reg_354 == 1'd0) | (tmp_last_V_reg_384 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_399 == 1'd0))) begin
        ap_phi_mux_n32Loop_0_phi_fu_226_p4 = n32Loop_reg_428;
    end else begin
        ap_phi_mux_n32Loop_0_phi_fu_226_p4 = n32Loop_0_reg_222;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state12_io) | (regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state12) & ((icmp_ln22_reg_354 == 1'd0) | (tmp_last_V_reg_384 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_244_p0 = n32Loop_0_reg_222;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_244_p0 = ap_phi_mux_n32Loop_0_phi_fu_226_p4;
        end else begin
            grp_fu_244_p0 = 'bx;
        end
    end else begin
        grp_fu_244_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        pstrmInput_TDATA_blk_n = pstrmInput_TVALID_int;
    end else begin
        pstrmInput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_pstrmInput_V_data_V_U_ack_in == 1'b1) & (pstrmInput_TVALID == 1'b1))) begin
        pstrmInput_TREADY = 1'b1;
    end else begin
        pstrmInput_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        pstrmInput_TREADY_int = 1'b1;
    end else begin
        pstrmInput_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((icmp_ln22_reg_354 == 1'd1) & (1'b1 == ap_CS_fsm_state12)))) begin
        pstrmOutput_TDATA_blk_n = pstrmOutput_TREADY_int;
    end else begin
        pstrmOutput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((pstrmOutput_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        pstrmOutput_TVALID_int = 1'b1;
    end else begin
        pstrmOutput_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0)) & (icmp_ln22_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_3_fu_310_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((tmp_3_fu_310_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((pstrmOutput_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((1'b1 == ap_block_state12_io) | (regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state12) & ((icmp_ln22_reg_354 == 1'd0) | (tmp_last_V_reg_384 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state12_io) | (regslice_both_pstrmOutput_V_data_V_U_apdone_blk == 1'b1)) & (icmp_ln22_reg_354 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (tmp_last_V_reg_384 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_276_p2 = (n32XferCnt_0_reg_198 + 31'd1);

assign an32Coef_address0 = zext_ln35_fu_329_p1;

assign an32ShiftReg_address1 = zext_ln32_1_fu_334_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((icmp_ln22_reg_354 == 1'd1) & (pstrmOutput_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln22_fu_271_p2 == 1'd1) & (pstrmInput_TVALID_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_212 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_n32Data_0_reg_234 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_244_p2 = ($signed(grp_fu_244_p0) + $signed(5'd31));

assign icmp_ln22_fu_271_p2 = ((n32XferCnt_0_reg_198 < tmp_2_reg_349) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_318_p2 = ((ap_phi_mux_n32Loop_0_phi_fu_226_p4 == 5'd0) ? 1'b1 : 1'b0);

assign n32Acc_fu_344_p2 = (tmp_data_V_reg_209 + mul_ln35_reg_433);

assign pstrmOutput_TVALID = regslice_both_pstrmOutput_V_data_V_U_vld_out;

assign ret_V_fu_255_p2 = (zext_ln215_fu_251_p1 + 33'd3);

assign tmp_3_fu_310_p3 = ap_phi_mux_n32Loop_0_phi_fu_226_p4[32'd4];

assign zext_ln215_fu_251_p1 = regXferLeng_V;

assign zext_ln32_1_fu_334_p1 = n32Loop_0_reg_222;

assign zext_ln32_fu_324_p1 = grp_fu_244_p2;

assign zext_ln35_fu_329_p1 = ap_phi_mux_n32Loop_0_phi_fu_226_p4;

endmodule //fir_n11_strm
