-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_n11_strm is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    pstrmInput_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    pstrmInput_TVALID : IN STD_LOGIC;
    pstrmInput_TREADY : OUT STD_LOGIC;
    pstrmInput_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    pstrmInput_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    pstrmInput_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmInput_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmInput_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmInput_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pstrmOutput_TVALID : OUT STD_LOGIC;
    pstrmOutput_TREADY : IN STD_LOGIC;
    pstrmOutput_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    pstrmOutput_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    pstrmOutput_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fir_n11_strm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_n11_strm,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3316,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=33,HLS_SYN_FF=1172,HLS_SYN_LUT=995,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal an32Coef_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal an32Coef_ce0 : STD_LOGIC;
    signal an32Coef_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regXferLeng_V : STD_LOGIC_VECTOR (31 downto 0);
    signal an32ShiftReg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal an32ShiftReg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pstrmInput_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal icmp_ln22_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal pstrmOutput_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln22_reg_622_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal n32XferCnt_0_reg_278 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_reg_562 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln22_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_318_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln22_reg_626 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln35_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal an32ShiftReg_7_load_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_2_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_2_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_3_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_3_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_4_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_4_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_4_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_4_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_666 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln35_10_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_10_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_1_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_1_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_7_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_7_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_5_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_5_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_8_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_8_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_6_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_6_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_7_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_7_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_8_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_8_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_2_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_2_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_9_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_9_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_predicate_tran16to17_state12 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_n32XferCnt_0_phi_fu_282_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal zext_ln215_fu_293_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_297_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln35_fu_328_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_2_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_3_fu_354_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_4_fu_374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_10_fu_408_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_1_fu_424_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_6_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_5_fu_454_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_5_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_6_fu_479_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_7_fu_495_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_8_fu_511_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_9_fu_536_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_3_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal regslice_both_pstrmOutput_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_pstrmInput_V_data_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal pstrmInput_TVALID_int : STD_LOGIC;
    signal pstrmInput_TREADY_int : STD_LOGIC;
    signal regslice_both_pstrmInput_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_pstrmInput_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_pstrmInput_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_user_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_last_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_id_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_dest_V_U_ack_in : STD_LOGIC;
    signal pstrmOutput_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal pstrmOutput_TVALID_int : STD_LOGIC;
    signal pstrmOutput_TREADY_int : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_dest_V_U_vld_out : STD_LOGIC;

    component fir_n11_strm_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        an32Coef_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        an32Coef_ce0 : IN STD_LOGIC;
        an32Coef_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regXferLeng_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fir_n11_strm_AXILiteS_s_axi_U : component fir_n11_strm_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        an32Coef_address0 => an32Coef_address0,
        an32Coef_ce0 => an32Coef_ce0,
        an32Coef_q0 => an32Coef_q0,
        regXferLeng_V => regXferLeng_V);

    regslice_both_pstrmInput_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TDATA,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_data_V_U_ack_in,
        data_out => pstrmInput_TDATA_int,
        vld_out => pstrmInput_TVALID_int,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_data_V_U_apdone_blk);

    regslice_both_pstrmInput_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TKEEP,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_keep_V_U_ack_in,
        data_out => pstrmInput_TKEEP_int,
        vld_out => regslice_both_pstrmInput_V_keep_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_keep_V_U_apdone_blk);

    regslice_both_pstrmInput_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TSTRB,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_strb_V_U_ack_in,
        data_out => pstrmInput_TSTRB_int,
        vld_out => regslice_both_pstrmInput_V_strb_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_strb_V_U_apdone_blk);

    regslice_both_pstrmInput_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TUSER,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_user_V_U_ack_in,
        data_out => pstrmInput_TUSER_int,
        vld_out => regslice_both_pstrmInput_V_user_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_user_V_U_apdone_blk);

    regslice_both_pstrmInput_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TLAST,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_last_V_U_ack_in,
        data_out => pstrmInput_TLAST_int,
        vld_out => regslice_both_pstrmInput_V_last_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_last_V_U_apdone_blk);

    regslice_both_pstrmInput_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TID,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_id_V_U_ack_in,
        data_out => pstrmInput_TID_int,
        vld_out => regslice_both_pstrmInput_V_id_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_id_V_U_apdone_blk);

    regslice_both_pstrmInput_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TDEST,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_dest_V_U_ack_in,
        data_out => pstrmInput_TDEST_int,
        vld_out => regslice_both_pstrmInput_V_dest_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int,
        apdone_blk => regslice_both_pstrmInput_V_dest_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmOutput_TDATA_int,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => pstrmOutput_TREADY_int,
        data_out => pstrmOutput_TDATA,
        vld_out => regslice_both_pstrmOutput_V_data_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_data_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_666,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy,
        data_out => pstrmOutput_TKEEP,
        vld_out => regslice_both_pstrmOutput_V_keep_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_keep_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_671,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy,
        data_out => pstrmOutput_TSTRB,
        vld_out => regslice_both_pstrmOutput_V_strb_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_strb_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_676,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy,
        data_out => pstrmOutput_TUSER,
        vld_out => regslice_both_pstrmOutput_V_user_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_user_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_681,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy,
        data_out => pstrmOutput_TLAST,
        vld_out => regslice_both_pstrmOutput_V_last_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_last_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_686,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy,
        data_out => pstrmOutput_TID,
        vld_out => regslice_both_pstrmOutput_V_id_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_id_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_691,
        vld_in => pstrmOutput_TVALID_int,
        ack_in => regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy,
        data_out => pstrmOutput_TDEST,
        vld_out => regslice_both_pstrmOutput_V_dest_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_predicate_tran16to17_state12 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n32XferCnt_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (tmp_last_V_reg_681 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n32XferCnt_0_reg_278 <= add_ln22_reg_626;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n32XferCnt_0_reg_278 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln22_reg_626 <= add_ln22_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_2_reg_736 <= add_ln35_2_fu_521_p2;
                mul_ln35_8_reg_731 <= mul_ln35_8_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln35_4_reg_651 <= add_ln35_4_fu_360_p2;
                mul_ln35_3_reg_646 <= mul_ln35_3_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln35_7_reg_706 <= add_ln35_7_fu_439_p2;
                mul_ln35_1_reg_701 <= mul_ln35_1_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                add_ln35_8_reg_716 <= add_ln35_8_fu_464_p2;
                mul_ln35_5_reg_711 <= mul_ln35_5_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                an32ShiftReg_0 <= tmp_data_V_1_reg_661;
                an32ShiftReg_1 <= an32ShiftReg_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                an32ShiftReg_2 <= an32ShiftReg_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                an32ShiftReg_3 <= an32ShiftReg_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                an32ShiftReg_4 <= an32ShiftReg_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                an32ShiftReg_5 <= an32ShiftReg_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                an32ShiftReg_6 <= an32ShiftReg_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                an32ShiftReg_7 <= an32ShiftReg_6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                an32ShiftReg_7_load_reg_636 <= an32ShiftReg_7;
                mul_ln35_2_reg_641 <= mul_ln35_2_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                an32ShiftReg_8 <= an32ShiftReg_7_load_reg_636;
                an32ShiftReg_9 <= an32ShiftReg_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln22_reg_622 <= icmp_ln22_fu_313_p2;
                icmp_ln22_reg_622_pp0_iter1_reg <= icmp_ln22_reg_622;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul_ln35_10_reg_696 <= mul_ln35_10_fu_408_p2;
                tmp_data_V_1_reg_661 <= pstrmInput_TDATA_int;
                tmp_dest_V_reg_691 <= pstrmInput_TDEST_int;
                tmp_id_V_reg_686 <= pstrmInput_TID_int;
                tmp_keep_V_reg_666 <= pstrmInput_TKEEP_int;
                tmp_last_V_reg_681 <= pstrmInput_TLAST_int;
                tmp_strb_V_reg_671 <= pstrmInput_TSTRB_int;
                tmp_user_V_reg_676 <= pstrmInput_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_ln35_4_reg_656 <= mul_ln35_4_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                mul_ln35_6_reg_721 <= mul_ln35_6_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                mul_ln35_7_reg_726 <= mul_ln35_7_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln35_9_reg_741 <= mul_ln35_9_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_ln35_reg_631 <= mul_ln35_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then
                reg_289 <= an32Coef_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_reg_562 <= ret_V_fu_297_p2(32 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage10_subdone, ap_block_pp0_stage3_subdone, ap_CS_fsm_state17, regslice_both_pstrmOutput_V_data_V_U_apdone_blk, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_state17 => 
                if (((regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_fu_318_p2 <= std_logic_vector(unsigned(ap_phi_mux_n32XferCnt_0_phi_fu_282_p4) + unsigned(ap_const_lv31_1));
    add_ln35_1_fu_517_p2 <= std_logic_vector(unsigned(mul_ln35_6_reg_721) + unsigned(mul_ln35_5_reg_711));
    add_ln35_2_fu_521_p2 <= std_logic_vector(unsigned(add_ln35_1_fu_517_p2) + unsigned(mul_ln35_7_reg_726));
    add_ln35_3_fu_551_p2 <= std_logic_vector(unsigned(add_ln35_2_reg_736) + unsigned(add_ln35_fu_547_p2));
    add_ln35_4_fu_360_p2 <= std_logic_vector(unsigned(mul_ln35_reg_631) + unsigned(mul_ln35_2_reg_641));
    add_ln35_5_fu_460_p2 <= std_logic_vector(unsigned(add_ln35_4_reg_651) + unsigned(mul_ln35_1_reg_701));
    add_ln35_6_fu_435_p2 <= std_logic_vector(unsigned(mul_ln35_3_reg_646) + unsigned(mul_ln35_10_reg_696));
    add_ln35_7_fu_439_p2 <= std_logic_vector(unsigned(add_ln35_6_fu_435_p2) + unsigned(mul_ln35_4_reg_656));
    add_ln35_8_fu_464_p2 <= std_logic_vector(unsigned(add_ln35_7_reg_706) + unsigned(add_ln35_5_fu_460_p2));
    add_ln35_fu_547_p2 <= std_logic_vector(unsigned(mul_ln35_8_reg_731) + unsigned(mul_ln35_9_reg_741));

    an32Coef_address0_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage7, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                an32Coef_address0 <= ap_const_lv64_1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                an32Coef_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                an32Coef_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                an32Coef_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                an32Coef_address0 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                an32Coef_address0 <= ap_const_lv64_9(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                an32Coef_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                an32Coef_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                an32Coef_address0 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                an32Coef_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                an32Coef_address0 <= ap_const_lv64_A(4 - 1 downto 0);
            else 
                an32Coef_address0 <= "XXXX";
            end if;
        else 
            an32Coef_address0 <= "XXXX";
        end if; 
    end process;


    an32Coef_ce0_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            an32Coef_ce0 <= ap_const_logic_1;
        else 
            an32Coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(12);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state15_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state15_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state16_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state16_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln22_reg_622, pstrmInput_TVALID_int)
    begin
                ap_block_pp0_stage6_11001 <= ((icmp_ln22_reg_622 = ap_const_lv1_1) and (pstrmInput_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln22_reg_622, pstrmInput_TVALID_int)
    begin
                ap_block_pp0_stage6_subdone <= ((icmp_ln22_reg_622 = ap_const_lv1_1) and (pstrmInput_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(icmp_ln22_reg_622_pp0_iter1_reg, pstrmOutput_TREADY_int)
    begin
                ap_block_state15_io <= ((icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (pstrmOutput_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(icmp_ln22_reg_622_pp0_iter1_reg, pstrmOutput_TREADY_int)
    begin
                ap_block_state16_io <= ((icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (pstrmOutput_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage6_iter0_assign_proc : process(icmp_ln22_reg_622, pstrmInput_TVALID_int)
    begin
                ap_block_state8_pp0_stage6_iter0 <= ((icmp_ln22_reg_622 = ap_const_lv1_1) and (pstrmInput_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_state17, regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_n32XferCnt_0_phi_fu_282_p4_assign_proc : process(icmp_ln22_reg_622, ap_enable_reg_pp0_iter1, n32XferCnt_0_reg_278, ap_CS_fsm_pp0_stage0, add_ln22_reg_626, tmp_last_V_reg_681, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_last_V_reg_681 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_n32XferCnt_0_phi_fu_282_p4 <= add_ln22_reg_626;
        else 
            ap_phi_mux_n32XferCnt_0_phi_fu_282_p4 <= n32XferCnt_0_reg_278;
        end if; 
    end process;


    ap_predicate_tran16to17_state12_assign_proc : process(icmp_ln22_reg_622, tmp_last_V_reg_681)
    begin
                ap_predicate_tran16to17_state12 <= ((tmp_last_V_reg_681 = ap_const_lv1_1) or (icmp_ln22_reg_622 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln22_fu_313_p2 <= "1" when (unsigned(ap_phi_mux_n32XferCnt_0_phi_fu_282_p4) < unsigned(tmp_1_reg_562)) else "0";
    mul_ln35_10_fu_408_p0 <= pstrmInput_TDATA_int;
    mul_ln35_10_fu_408_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_10_fu_408_p0) * signed(reg_289))), 32));
    mul_ln35_1_fu_424_p0 <= an32ShiftReg_8;
    mul_ln35_1_fu_424_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_1_fu_424_p0) * signed(reg_289))), 32));
    mul_ln35_2_fu_338_p0 <= an32ShiftReg_7;
    mul_ln35_2_fu_338_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_2_fu_338_p0) * signed(reg_289))), 32));
    mul_ln35_3_fu_354_p0 <= an32ShiftReg_6;
    mul_ln35_3_fu_354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_3_fu_354_p0) * signed(reg_289))), 32));
    mul_ln35_4_fu_374_p0 <= an32ShiftReg_5;
    mul_ln35_4_fu_374_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_4_fu_374_p0) * signed(reg_289))), 32));
    mul_ln35_5_fu_454_p0 <= an32ShiftReg_4;
    mul_ln35_5_fu_454_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_5_fu_454_p0) * signed(reg_289))), 32));
    mul_ln35_6_fu_479_p0 <= an32ShiftReg_3;
    mul_ln35_6_fu_479_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_6_fu_479_p0) * signed(reg_289))), 32));
    mul_ln35_7_fu_495_p0 <= an32ShiftReg_2;
    mul_ln35_7_fu_495_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_7_fu_495_p0) * signed(reg_289))), 32));
    mul_ln35_8_fu_511_p0 <= an32ShiftReg_1;
    mul_ln35_8_fu_511_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_8_fu_511_p0) * signed(reg_289))), 32));
    mul_ln35_9_fu_536_p0 <= an32ShiftReg_0;
    mul_ln35_9_fu_536_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_9_fu_536_p0) * signed(reg_289))), 32));
    mul_ln35_fu_328_p0 <= an32ShiftReg_9;
    mul_ln35_fu_328_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln35_fu_328_p0) * signed(reg_289))), 32));

    pstrmInput_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0, ap_block_pp0_stage6, icmp_ln22_reg_622, pstrmInput_TVALID_int)
    begin
        if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            pstrmInput_TDATA_blk_n <= pstrmInput_TVALID_int;
        else 
            pstrmInput_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pstrmInput_TREADY_assign_proc : process(pstrmInput_TVALID, regslice_both_pstrmInput_V_data_V_U_ack_in)
    begin
        if (((regslice_both_pstrmInput_V_data_V_U_ack_in = ap_const_logic_1) and (pstrmInput_TVALID = ap_const_logic_1))) then 
            pstrmInput_TREADY <= ap_const_logic_1;
        else 
            pstrmInput_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    pstrmInput_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter0, icmp_ln22_reg_622, ap_block_pp0_stage6_11001)
    begin
        if (((icmp_ln22_reg_622 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            pstrmInput_TREADY_int <= ap_const_logic_1;
        else 
            pstrmInput_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    pstrmOutput_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, icmp_ln22_reg_622_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, pstrmOutput_TREADY_int)
    begin
        if ((((icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            pstrmOutput_TDATA_blk_n <= pstrmOutput_TREADY_int;
        else 
            pstrmOutput_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pstrmOutput_TDATA_int <= std_logic_vector(unsigned(add_ln35_8_reg_716) + unsigned(add_ln35_3_fu_551_p2));
    pstrmOutput_TVALID <= regslice_both_pstrmOutput_V_data_V_U_vld_out;

    pstrmOutput_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, icmp_ln22_reg_622_pp0_iter1_reg, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln22_reg_622_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            pstrmOutput_TVALID_int <= ap_const_logic_1;
        else 
            pstrmOutput_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_297_p2 <= std_logic_vector(unsigned(zext_ln215_fu_293_p1) + unsigned(ap_const_lv33_3));
    zext_ln215_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(regXferLeng_V),33));
end behav;
