// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_n11_maxi_HH_
#define _fir_n11_maxi_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_n11_maxi_mul_bkb.h"
#include "fir_n11_maxi_AXILiteS_s_axi.h"
#include "fir_n11_maxi_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 8,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct fir_n11_maxi : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;


    // Module declarations
    fir_n11_maxi(sc_module_name name);
    SC_HAS_PROCESS(fir_n11_maxi);

    ~fir_n11_maxi();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_n11_maxi_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* fir_n11_maxi_AXILiteS_s_axi_U;
    fir_n11_maxi_gmem_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* fir_n11_maxi_gmem_m_axi_U;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U1;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U2;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U3;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U4;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U5;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U6;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U7;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U8;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U9;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U10;
    fir_n11_maxi_mul_bkb<1,5,32,32,32>* fir_n11_maxi_mul_bkb_U11;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<24> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > pn32HPInput;
    sc_signal< sc_lv<32> > pn32HPOutput;
    sc_signal< sc_lv<4> > an32Coef_address0;
    sc_signal< sc_logic > an32Coef_ce0;
    sc_signal< sc_lv<32> > an32Coef_q0;
    sc_signal< sc_lv<32> > regXferLeng_V;
    sc_signal< sc_lv<32> > an32ShiftReg_9;
    sc_signal< sc_lv<32> > an32ShiftReg_8;
    sc_signal< sc_lv<32> > an32ShiftReg_7;
    sc_signal< sc_lv<32> > an32ShiftReg_6;
    sc_signal< sc_lv<32> > an32ShiftReg_5;
    sc_signal< sc_lv<32> > an32ShiftReg_4;
    sc_signal< sc_lv<32> > an32ShiftReg_3;
    sc_signal< sc_lv<32> > an32ShiftReg_2;
    sc_signal< sc_lv<32> > an32ShiftReg_1;
    sc_signal< sc_lv<32> > an32ShiftReg_0;
    sc_signal< sc_logic > gmem_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > gmem_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage8;
    sc_signal< sc_lv<1> > icmp_ln16_reg_672;
    sc_signal< sc_lv<1> > icmp_ln16_reg_672_pp0_iter1_reg;
    sc_signal< sc_logic > gmem_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state33;
    sc_signal< sc_logic > gmem_blk_n_AR;
    sc_signal< sc_logic > gmem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > gmem_AWVALID;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_lv<32> > gmem_AWADDR;
    sc_signal< sc_logic > gmem_WVALID;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_logic > gmem_ARVALID;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_lv<32> > gmem_ARADDR;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_logic > gmem_RREADY;
    sc_signal< sc_lv<32> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_logic > gmem_BREADY;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_lv<31> > n32XferCnt_0_reg_271;
    sc_signal< sc_lv<32> > reg_282;
    sc_signal< bool > ap_block_state10_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state21_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage6;
    sc_signal< bool > ap_block_state15_pp0_stage6_iter0;
    sc_signal< bool > ap_block_state26_pp0_stage6_iter1;
    sc_signal< bool > ap_block_pp0_stage6_11001;
    sc_signal< sc_lv<32> > reg_286;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state11_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state22_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage7;
    sc_signal< bool > ap_block_state16_pp0_stage7_iter0;
    sc_signal< bool > ap_block_state27_pp0_stage7_iter1;
    sc_signal< bool > ap_block_pp0_stage7_11001;
    sc_signal< sc_lv<32> > reg_290;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state12_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state23_pp0_stage3_iter1;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< bool > ap_block_state17_pp0_stage8_iter0;
    sc_signal< bool > ap_block_state28_pp0_stage8_iter1;
    sc_signal< bool > ap_block_state28_io;
    sc_signal< bool > ap_block_pp0_stage8_11001;
    sc_signal< sc_lv<32> > reg_294;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state13_pp0_stage4_iter0;
    sc_signal< bool > ap_block_state24_pp0_stage4_iter1;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage9;
    sc_signal< bool > ap_block_state18_pp0_stage9_iter0;
    sc_signal< bool > ap_block_pp0_stage9_11001;
    sc_signal< sc_lv<32> > reg_298;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_state14_pp0_stage5_iter0;
    sc_signal< bool > ap_block_state25_pp0_stage5_iter1;
    sc_signal< bool > ap_block_pp0_stage5_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage10;
    sc_signal< bool > ap_block_state19_pp0_stage10_iter0;
    sc_signal< bool > ap_block_pp0_stage10_11001;
    sc_signal< sc_lv<30> > pn32HPOutput3_reg_584;
    sc_signal< sc_lv<30> > pn32HPInput1_reg_589;
    sc_signal< sc_lv<31> > trunc_ln_reg_594;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<32> > empty_8_fu_362_p1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > icmp_ln16_fu_367_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state20_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > n32XferCnt_fu_372_p2;
    sc_signal< sc_lv<31> > n32XferCnt_reg_676;
    sc_signal< sc_lv<32> > n32Temp_reg_681;
    sc_signal< sc_lv<32> > an32ShiftReg_3_load_reg_687;
    sc_signal< sc_lv<32> > grp_fu_382_p2;
    sc_signal< sc_lv<32> > mul_ln28_6_reg_708;
    sc_signal< sc_lv<32> > grp_fu_398_p2;
    sc_signal< sc_lv<32> > mul_ln28_7_reg_718;
    sc_signal< sc_lv<32> > grp_fu_414_p2;
    sc_signal< sc_lv<32> > mul_ln28_8_reg_728;
    sc_signal< sc_lv<32> > add_ln28_4_fu_472_p2;
    sc_signal< sc_lv<32> > add_ln28_4_reg_733;
    sc_signal< sc_lv<32> > grp_fu_430_p2;
    sc_signal< sc_lv<32> > mul_ln28_9_reg_743;
    sc_signal< sc_lv<32> > grp_fu_441_p2;
    sc_signal< sc_lv<32> > mul_ln28_10_reg_753;
    sc_signal< sc_lv<32> > grp_fu_450_p2;
    sc_signal< sc_lv<32> > mul_ln28_reg_758;
    sc_signal< sc_lv<32> > an32Coef_load_5_reg_768;
    sc_signal< sc_lv<32> > add_ln28_7_fu_528_p2;
    sc_signal< sc_lv<32> > add_ln28_7_reg_773;
    sc_signal< sc_lv<32> > grp_fu_466_p2;
    sc_signal< sc_lv<32> > mul_ln28_1_reg_778;
    sc_signal< sc_lv<32> > grp_fu_486_p2;
    sc_signal< sc_lv<32> > mul_ln28_2_reg_788;
    sc_signal< sc_lv<32> > add_ln28_fu_553_p2;
    sc_signal< sc_lv<32> > add_ln28_reg_793;
    sc_signal< sc_lv<32> > grp_fu_502_p2;
    sc_signal< sc_lv<32> > mul_ln28_3_reg_798;
    sc_signal< sc_lv<32> > grp_fu_518_p2;
    sc_signal< sc_lv<32> > mul_ln28_4_reg_803;
    sc_signal< sc_lv<32> > grp_fu_543_p2;
    sc_signal< sc_lv<32> > mul_ln28_5_reg_808;
    sc_signal< sc_lv<32> > add_ln28_2_fu_561_p2;
    sc_signal< sc_lv<32> > add_ln28_2_reg_813;
    sc_signal< sc_lv<32> > add_ln28_8_fu_570_p2;
    sc_signal< sc_lv<32> > add_ln28_8_reg_818;
    sc_signal< sc_lv<32> > add_ln28_9_fu_579_p2;
    sc_signal< sc_lv<32> > add_ln28_9_reg_823;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< bool > ap_block_pp0_stage10_subdone;
    sc_signal< bool > ap_block_pp0_stage8_subdone;
    sc_signal< sc_lv<31> > ap_phi_mux_n32XferCnt_0_phi_fu_275_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > empty_fu_342_p1;
    sc_signal< sc_lv<64> > empty_6_fu_352_p1;
    sc_signal< bool > ap_block_pp0_stage8_01001;
    sc_signal< bool > ap_block_pp0_stage7;
    sc_signal< bool > ap_block_pp0_stage9;
    sc_signal< bool > ap_block_pp0_stage10;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< bool > ap_block_pp0_stage5;
    sc_signal< bool > ap_block_pp0_stage6;
    sc_signal< sc_lv<33> > zext_ln16_fu_322_p1;
    sc_signal< sc_lv<33> > add_ln16_fu_326_p2;
    sc_signal< sc_lv<32> > add_ln28_6_fu_524_p2;
    sc_signal< sc_lv<32> > add_ln28_1_fu_557_p2;
    sc_signal< sc_lv<32> > add_ln28_5_fu_566_p2;
    sc_signal< sc_lv<32> > add_ln28_3_fu_575_p2;
    sc_signal< sc_logic > grp_fu_382_ce;
    sc_signal< sc_logic > grp_fu_398_ce;
    sc_signal< sc_logic > grp_fu_414_ce;
    sc_signal< sc_logic > grp_fu_430_ce;
    sc_signal< sc_logic > grp_fu_441_ce;
    sc_signal< sc_logic > grp_fu_450_ce;
    sc_signal< sc_logic > grp_fu_466_ce;
    sc_signal< sc_logic > grp_fu_486_ce;
    sc_signal< sc_logic > grp_fu_502_ce;
    sc_signal< sc_logic > grp_fu_518_ce;
    sc_signal< sc_logic > grp_fu_543_ce;
    sc_signal< sc_lv<24> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage5_subdone;
    sc_signal< bool > ap_block_pp0_stage6_subdone;
    sc_signal< bool > ap_block_pp0_stage7_subdone;
    sc_signal< bool > ap_block_pp0_stage9_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<24> ap_ST_fsm_state1;
    static const sc_lv<24> ap_ST_fsm_state2;
    static const sc_lv<24> ap_ST_fsm_state3;
    static const sc_lv<24> ap_ST_fsm_state4;
    static const sc_lv<24> ap_ST_fsm_state5;
    static const sc_lv<24> ap_ST_fsm_state6;
    static const sc_lv<24> ap_ST_fsm_state7;
    static const sc_lv<24> ap_ST_fsm_state8;
    static const sc_lv<24> ap_ST_fsm_pp0_stage0;
    static const sc_lv<24> ap_ST_fsm_pp0_stage1;
    static const sc_lv<24> ap_ST_fsm_pp0_stage2;
    static const sc_lv<24> ap_ST_fsm_pp0_stage3;
    static const sc_lv<24> ap_ST_fsm_pp0_stage4;
    static const sc_lv<24> ap_ST_fsm_pp0_stage5;
    static const sc_lv<24> ap_ST_fsm_pp0_stage6;
    static const sc_lv<24> ap_ST_fsm_pp0_stage7;
    static const sc_lv<24> ap_ST_fsm_pp0_stage8;
    static const sc_lv<24> ap_ST_fsm_pp0_stage9;
    static const sc_lv<24> ap_ST_fsm_pp0_stage10;
    static const sc_lv<24> ap_ST_fsm_state29;
    static const sc_lv<24> ap_ST_fsm_state30;
    static const sc_lv<24> ap_ST_fsm_state31;
    static const sc_lv<24> ap_ST_fsm_state32;
    static const sc_lv<24> ap_ST_fsm_state33;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_9;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<33> ap_const_lv33_3;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<31> ap_const_lv31_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_clk_no_reset_();
    void thread_add_ln16_fu_326_p2();
    void thread_add_ln28_1_fu_557_p2();
    void thread_add_ln28_2_fu_561_p2();
    void thread_add_ln28_3_fu_575_p2();
    void thread_add_ln28_4_fu_472_p2();
    void thread_add_ln28_5_fu_566_p2();
    void thread_add_ln28_6_fu_524_p2();
    void thread_add_ln28_7_fu_528_p2();
    void thread_add_ln28_8_fu_570_p2();
    void thread_add_ln28_9_fu_579_p2();
    void thread_add_ln28_fu_553_p2();
    void thread_an32Coef_address0();
    void thread_an32Coef_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage10();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_CS_fsm_pp0_stage7();
    void thread_ap_CS_fsm_pp0_stage8();
    void thread_ap_CS_fsm_pp0_stage9();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state33();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage10();
    void thread_ap_block_pp0_stage10_11001();
    void thread_ap_block_pp0_stage10_subdone();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_pp0_stage5();
    void thread_ap_block_pp0_stage5_11001();
    void thread_ap_block_pp0_stage5_subdone();
    void thread_ap_block_pp0_stage6();
    void thread_ap_block_pp0_stage6_11001();
    void thread_ap_block_pp0_stage6_subdone();
    void thread_ap_block_pp0_stage7();
    void thread_ap_block_pp0_stage7_11001();
    void thread_ap_block_pp0_stage7_subdone();
    void thread_ap_block_pp0_stage8();
    void thread_ap_block_pp0_stage8_01001();
    void thread_ap_block_pp0_stage8_11001();
    void thread_ap_block_pp0_stage8_subdone();
    void thread_ap_block_pp0_stage9();
    void thread_ap_block_pp0_stage9_11001();
    void thread_ap_block_pp0_stage9_subdone();
    void thread_ap_block_state10_pp0_stage1_iter0();
    void thread_ap_block_state11_pp0_stage2_iter0();
    void thread_ap_block_state12_pp0_stage3_iter0();
    void thread_ap_block_state13_pp0_stage4_iter0();
    void thread_ap_block_state14_pp0_stage5_iter0();
    void thread_ap_block_state15_pp0_stage6_iter0();
    void thread_ap_block_state16_pp0_stage7_iter0();
    void thread_ap_block_state17_pp0_stage8_iter0();
    void thread_ap_block_state18_pp0_stage9_iter0();
    void thread_ap_block_state19_pp0_stage10_iter0();
    void thread_ap_block_state20_pp0_stage0_iter1();
    void thread_ap_block_state21_pp0_stage1_iter1();
    void thread_ap_block_state22_pp0_stage2_iter1();
    void thread_ap_block_state23_pp0_stage3_iter1();
    void thread_ap_block_state24_pp0_stage4_iter1();
    void thread_ap_block_state25_pp0_stage5_iter1();
    void thread_ap_block_state26_pp0_stage6_iter1();
    void thread_ap_block_state27_pp0_stage7_iter1();
    void thread_ap_block_state28_io();
    void thread_ap_block_state28_pp0_stage8_iter1();
    void thread_ap_block_state2_io();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_n32XferCnt_0_phi_fu_275_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_empty_6_fu_352_p1();
    void thread_empty_8_fu_362_p1();
    void thread_empty_fu_342_p1();
    void thread_gmem_ARADDR();
    void thread_gmem_ARVALID();
    void thread_gmem_AWADDR();
    void thread_gmem_AWVALID();
    void thread_gmem_BREADY();
    void thread_gmem_RREADY();
    void thread_gmem_WVALID();
    void thread_gmem_blk_n_AR();
    void thread_gmem_blk_n_AW();
    void thread_gmem_blk_n_B();
    void thread_gmem_blk_n_R();
    void thread_gmem_blk_n_W();
    void thread_grp_fu_382_ce();
    void thread_grp_fu_398_ce();
    void thread_grp_fu_414_ce();
    void thread_grp_fu_430_ce();
    void thread_grp_fu_441_ce();
    void thread_grp_fu_450_ce();
    void thread_grp_fu_466_ce();
    void thread_grp_fu_486_ce();
    void thread_grp_fu_502_ce();
    void thread_grp_fu_518_ce();
    void thread_grp_fu_543_ce();
    void thread_icmp_ln16_fu_367_p2();
    void thread_n32XferCnt_fu_372_p2();
    void thread_zext_ln16_fu_322_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
