// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multip_2num.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multip_2num::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multip_2num::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> multip_2num::ap_ST_fsm_state1 = "1";
const sc_lv<7> multip_2num::ap_ST_fsm_state2 = "10";
const sc_lv<7> multip_2num::ap_ST_fsm_state3 = "100";
const sc_lv<7> multip_2num::ap_ST_fsm_state4 = "1000";
const sc_lv<7> multip_2num::ap_ST_fsm_state5 = "10000";
const sc_lv<7> multip_2num::ap_ST_fsm_state6 = "100000";
const sc_lv<7> multip_2num::ap_ST_fsm_state7 = "1000000";
const int multip_2num::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> multip_2num::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> multip_2num::ap_const_lv32_5 = "101";
const sc_lv<32> multip_2num::ap_const_lv32_6 = "110";
const sc_lv<32> multip_2num::ap_const_lv32_1 = "1";
const bool multip_2num::ap_const_boolean_1 = true;

multip_2num::multip_2num(sc_module_name name) : sc_module(name), mVcdFile(0) {
    multip_2num_AXILiteS_s_axi_U = new multip_2num_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("multip_2num_AXILiteS_s_axi_U");
    multip_2num_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    multip_2num_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    multip_2num_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    multip_2num_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    multip_2num_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    multip_2num_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    multip_2num_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    multip_2num_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    multip_2num_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    multip_2num_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    multip_2num_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    multip_2num_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    multip_2num_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    multip_2num_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    multip_2num_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    multip_2num_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    multip_2num_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    multip_2num_AXILiteS_s_axi_U->ACLK(ap_clk);
    multip_2num_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    multip_2num_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    multip_2num_AXILiteS_s_axi_U->n32In1(n32In1);
    multip_2num_AXILiteS_s_axi_U->n32In2(n32In2);
    multip_2num_AXILiteS_s_axi_U->pn32ResOut(mul_ln18_reg_59);
    multip_2num_AXILiteS_s_axi_U->pn32ResOut_ap_vld(pn32ResOut_ap_vld);
    multip_2num_mul_3bkb_U1 = new multip_2num_mul_3bkb<1,5,32,32,32>("multip_2num_mul_3bkb_U1");
    multip_2num_mul_3bkb_U1->clk(ap_clk);
    multip_2num_mul_3bkb_U1->reset(ap_rst_n_inv);
    multip_2num_mul_3bkb_U1->din0(n32In2_read_reg_49);
    multip_2num_mul_3bkb_U1->din1(n32In1_read_reg_54);
    multip_2num_mul_3bkb_U1->ce(ap_var_for_const0);
    multip_2num_mul_3bkb_U1->dout(grp_fu_45_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_pn32ResOut_ap_vld);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multip_2num_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, n32In1, "n32In1");
    sc_trace(mVcdFile, n32In2, "n32In2");
    sc_trace(mVcdFile, pn32ResOut_ap_vld, "pn32ResOut_ap_vld");
    sc_trace(mVcdFile, n32In2_read_reg_49, "n32In2_read_reg_49");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, n32In1_read_reg_54, "n32In1_read_reg_54");
    sc_trace(mVcdFile, grp_fu_45_p2, "grp_fu_45_p2");
    sc_trace(mVcdFile, mul_ln18_reg_59, "mul_ln18_reg_59");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("multip_2num.hdltvin.dat");
    mHdltvoutHandle.open("multip_2num.hdltvout.dat");
}

multip_2num::~multip_2num() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete multip_2num_AXILiteS_s_axi_U;
    delete multip_2num_mul_3bkb_U1;
}

void multip_2num::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void multip_2num::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        mul_ln18_reg_59 = grp_fu_45_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        n32In1_read_reg_54 = n32In1.read();
        n32In2_read_reg_49 = n32In2.read();
    }
}

void multip_2num::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void multip_2num::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void multip_2num::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void multip_2num::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void multip_2num::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void multip_2num::thread_pn32ResOut_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pn32ResOut_ap_vld = ap_const_logic_1;
    } else {
        pn32ResOut_ap_vld = ap_const_logic_0;
    }
}

void multip_2num::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void multip_2num::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

